repeat task.wait(0.1) until game:IsLoaded()
repeat task.wait(0.1) until game.Players
repeat task.wait(0.1) until game.Players.LocalPlayer ~= nil
repeat task.wait(0.1)
until game.Workspace:FindFirstChild("UserData")
	and game.Workspace.UserData:FindFirstChild("User_" .. game.Players.LocalPlayer.UserId)
	and game.Workspace.UserData["User_" .. game.Players.LocalPlayer.UserId]:FindFirstChild("Data")
	and game.Workspace.UserData["User_" .. game.Players.LocalPlayer.UserId].Data:FindFirstChild("MissionObjective")

SALUNALOADING = Instance.new("ScreenGui")
SALUNALOADING.Name = "SALUNALOADING"
SALUNALOADING.Parent = game.CoreGui

LOADINGFRAME = Instance.new("ImageLabel")
LOADINGFRAME.Name = "LOADINGFRAME"
LOADINGFRAME.Parent = SALUNALOADING
LOADINGFRAME.BackgroundTransparency = 1
LOADINGFRAME.ClipsDescendants = true
LOADINGFRAME.AnchorPoint = Vector2.new(0.5, 0.5)
LOADINGFRAME.Position = UDim2.new(0.5, 0, 0.5, 0)
LOADINGFRAME.Size = UDim2.new(0, 0, 0, 0)
LOADINGFRAME.Image = "http://www.roblox.com/asset/?id=18866462306"

LOADINGFRAMEcorner = Instance.new("UICorner")
LOADINGFRAMEcorner.Name = "LOADINGFRAMEcorner"
LOADINGFRAMEcorner.Parent = LOADINGFRAME
LOADINGFRAMEcorner.CornerRadius = UDim.new(0.05,0)

game.TweenService:Create(LOADINGFRAME, TweenInfo.new(0.5, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {
         Size = UDim2.new(0.631, 0, 0.756, 0),
}):Play()

Loading = Instance.new("TextLabel")
Loading.Parent = LOADINGFRAME
Loading.Name = "Loading"
Loading.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
Loading.BackgroundTransparency = 1
Loading.Position = UDim2.new(0.7, 0, 0.05, 0)
Loading.Size = UDim2.new(0.2, 0, 0.756, 0)
Loading.TextColor3 = Color3.fromRGB(255,0,0)
Loading.Text = [[L
O
A
D
I
N
G
]]
Loading.TextSize = 20
Loading.FontFace.Bold = true
Loading.FontFace = Font.fromName("Merriweather")

task.spawn(function()
while game.CoreGui:FindFirstChild("SALUNALOADING") do task.wait(1)
Loading.Text = [[L
O
A
D
I
N
G
.]]
task.wait(0.4)
Loading.Text = [[L
O
A
D
I
N
G
..]]
task.wait(0.4)
Loading.Text = [[L
O
A
D
I
N
G
...]]
end
end)

local SalunaVersion = "Saluna 011 (09/07/2025)"
local qweur = loadstring(game:HttpGet('https://raw.githubusercontent.com/PotatoEiii/List/refs/heads/main/a',true))()
local retur = loadstring(game:HttpGet('https://raw.githubusercontent.com/PotatoEiii/List/refs/heads/main/b',true))()
local stofur = loadstring(game:HttpGet('https://raw.githubusercontent.com/PotatoEiii/List/refs/heads/main/c',true))()
local logur = loadstring(game:HttpGet('https://raw.githubusercontent.com/PotatoEiii/List/refs/heads/main/d',true))()
task.wait()
usingname = game:GetService("Players").LocalPlayer.Name
usingid = game:GetService("Players").LocalPlayer.UserId
local requesting = http_request or request or (syn and syn.request) or (fluxus and fluxus.request)
if not requesting then return end
local excutor =  nil
task.spawn(function()
    excutor = (identifyexecutor and identifyexecutor()) or "Unknown Executor"
end)

Fruittaoew = {}
Mobsszz = {}
Mobsfarmz = {}
Values = {}
Valuess = {}
Values2 = {}
Valuess2 = {}
Valuablez = {}
Valuablezz2 = {}
Playerslist = {}
for i,v in pairs(game:GetService("Players"):GetChildren()) do
    table.insert(Playerslist,v.Name)
end
Rarefruit = {
"Candy Fruit",
"Chilly Fruit",
"Flare Fruit",
"Gas Fruit",
"Gravity Fruit",
"Hollow Fruit",
"Light Fruit",
"Magma Fruit",
"Ope Fruit",
"Plasma Fruit",
"Rumble Fruit",
"Sand Fruit",
"Smoke Fruit",
"Snow Fruit",
"Venom Fruit",
"Dark Fruit",
"Phoenix Fruit",
"Quake Fruit",
"Vampire Fruit"
}

StoreRarefruit = {
"Candy Fruit",
"Chilly Fruit",
"Flare Fruit",
"Gas Fruit",
"Gravity Fruit",
"Hollow Fruit",
"Light Fruit",
"Magma Fruit",
"Ope Fruit",
"Plasma Fruit",
"Rumble Fruit",
"Sand Fruit",
"Smoke Fruit",
"Snow Fruit",
"Venom Fruit"
}
StoreUltrafruit = {
"Dark Fruit",
"Phoenix Fruit",
"Quake Fruit",
"Vampire Fruit"
}
MeleeTTT = {
"Melee",
"Table Kick",
"Black Leg",
"Seastone Cestus",
"Aqua Staff"
}

SniperTTT = {
"Slingshot",
"Stars",
"Crossbow",
"Flintlock",
"Cannon Ball"
}

SwordTTT = {
"Dagger",
"Wakizashi",
"Tachi",
"Katana",
"Flail",
"Krizma",
"Kogatana",
"Yoru",
"Golden Fish",
"Ultra Great Sword",
"Masamune",
"Candy Cane Yoru",
"Divine Axe",
"Kanshou and Byakuya",
"Scissor Blade",
"Lightning Sword",
"Meteorite Sword"
}

UtilityTTT = {
"Wood Rod",
"Sturdy Rod",
"Super Rod",
"Zombie Head",
"Tea Cup",
"Santa Bag",
"Tea Kettle"
}

everyClipboard = toclipboard
function toClipboard(txt)
if everyClipboard then
everyClipboard(tostring(txt))
end
end

function storedf()
if game:GetService("Workspace").UserData["User_"..tostring(usingid)].Data.StoredDF1Unlocked.Value == true and workspace.UserData["User_"..tostring(usingid)].Data.StoredDF1.Value == "None" and game:GetService("Players").LocalPlayer.PlayerGui.Storage.Frame.StoredDF1.Button.Text == "Store" then
                local args = {
                    [1] = "StoredDF1"
                }
                
                game:GetService("Workspace").UserData["User_"..usingid].StoredDFRequest:FireServer(unpack(args))
elseif game:GetService("Workspace").UserData["User_"..tostring(usingid)].Data.StoredDF2Unlocked.Value == true and workspace.UserData["User_"..tostring(usingid)].Data.StoredDF2.Value == "None" and game:GetService("Players").LocalPlayer.PlayerGui.Storage.Frame.StoredDF2.Button.Text == "Store" then
                local args = {
                    [1] = "StoredDF2"
                }
                
                game:GetService("Workspace").UserData["User_"..usingid].StoredDFRequest:FireServer(unpack(args))
elseif game:GetService("Workspace").UserData["User_"..tostring(usingid)].Data.StoredDF3Unlocked.Value == true and workspace.UserData["User_"..tostring(usingid)].Data.StoredDF3.Value == "None" and game:GetService("Players").LocalPlayer.PlayerGui.Storage.Frame.StoredDF3.Button.Text == "Store" then
                local args = {
                    [1] = "StoredDF3"
                }
                
                game:GetService("Workspace").UserData["User_"..usingid].StoredDFRequest:FireServer(unpack(args))
elseif game:GetService("Workspace").UserData["User_"..tostring(usingid)].Data.StoredDF4Unlocked.Value == true and workspace.UserData["User_"..tostring(usingid)].Data.StoredDF4.Value == "None" and game:GetService("Players").LocalPlayer.PlayerGui.Storage.Frame.StoredDF4.Button.Text == "Store" then
                local args = {
                    [1] = "StoredDF4"
                }
                
                game:GetService("Workspace").UserData["User_"..usingid].StoredDFRequest:FireServer(unpack(args))
elseif game:GetService("Workspace").UserData["User_"..tostring(usingid)].Data.StoredDF5Unlocked.Value == true and workspace.UserData["User_"..tostring(usingid)].Data.StoredDF5.Value == "None" and game:GetService("Players").LocalPlayer.PlayerGui.Storage.Frame.StoredDF5.Button.Text == "Store" then
                local args = {
                    [1] = "StoredDF5"
                }
                
                game:GetService("Workspace").UserData["User_"..usingid].StoredDFRequest:FireServer(unpack(args))
elseif game:GetService("Workspace").UserData["User_"..tostring(usingid)].Data.StoredDF6Unlocked.Value == true and workspace.UserData["User_"..tostring(usingid)].Data.StoredDF6.Value == "None" and game:GetService("Players").LocalPlayer.PlayerGui.Storage.Frame.StoredDF6.Button.Text == "Store" then
                local args = {
                    [1] = "StoredDF6"
                }
                
                game:GetService("Workspace").UserData["User_"..usingid].StoredDFRequest:FireServer(unpack(args))
elseif game:GetService("Workspace").UserData["User_"..tostring(usingid)].Data.StoredDF7Unlocked.Value == true and workspace.UserData["User_"..tostring(usingid)].Data.StoredDF7.Value == "None" and game:GetService("Players").LocalPlayer.PlayerGui.Storage.Frame.StoredDF7.Button.Text == "Store" then
                local args = {
                    [1] = "StoredDF7"
                }
                
                game:GetService("Workspace").UserData["User_"..usingid].StoredDFRequest:FireServer(unpack(args))
elseif game:GetService("Workspace").UserData["User_"..tostring(usingid)].Data.StoredDF8Unlocked.Value == true and workspace.UserData["User_"..tostring(usingid)].Data.StoredDF8.Value == "None" and game:GetService("Players").LocalPlayer.PlayerGui.Storage.Frame.StoredDF8.Button.Text == "Store" then
                local args = {
                    [1] = "StoredDF8"
                }
                
                game:GetService("Workspace").UserData["User_"..usingid].StoredDFRequest:FireServer(unpack(args))
elseif game:GetService("Workspace").UserData["User_"..tostring(usingid)].Data.StoredDF9Unlocked.Value == true and workspace.UserData["User_"..tostring(usingid)].Data.StoredDF9.Value == "None" and game:GetService("Players").LocalPlayer.PlayerGui.Storage.Frame.StoredDF9.Button.Text == "Store" then
                local args = {
                    [1] = "StoredDF9"
                }
                
                game:GetService("Workspace").UserData["User_"..usingid].StoredDFRequest:FireServer(unpack(args))
elseif game:GetService("Workspace").UserData["User_"..tostring(usingid)].Data.StoredDF10Unlocked.Value == true and workspace.UserData["User_"..tostring(usingid)].Data.StoredDF10.Value == "None" and game:GetService("Players").LocalPlayer.PlayerGui.Storage.Frame.StoredDF10.Button.Text == "Store" then
                local args = {
                    [1] = "StoredDF10"
                }
                
                game:GetService("Workspace").UserData["User_"..usingid].StoredDFRequest:FireServer(unpack(args))
elseif game:GetService("Workspace").UserData["User_"..tostring(usingid)].Data.StoredDF11Unlocked.Value == true and workspace.UserData["User_"..tostring(usingid)].Data.StoredDF11.Value == "None" and game:GetService("Players").LocalPlayer.PlayerGui.Storage.Frame.StoredDF11.Button.Text == "Store" then
                local args = {
                    [1] = "StoredDF11"
                }
                
                game:GetService("Workspace").UserData["User_"..usingid].StoredDFRequest:FireServer(unpack(args))
elseif game:GetService("Workspace").UserData["User_"..tostring(usingid)].Data.StoredDF12Unlocked.Value == true and workspace.UserData["User_"..tostring(usingid)].Data.StoredDF12.Value == "None" and game:GetService("Players").LocalPlayer.PlayerGui.Storage.Frame.StoredDF12.Button.Text == "Store" then
                local args = {
                    [1] = "StoredDF12"
                }
                
                game:GetService("Workspace").UserData["User_"..usingid].StoredDFRequest:FireServer(unpack(args))
end
end

function amongus()
for i,v in pairs(game:GetService("Workspace").Barrels:GetDescendants()) do
if v:IsA("ClickDetector") then
fireclickdetector(v)
end
end
for i,v in pairs(game:GetService("Workspace").Island8.Kitchen:GetDescendants()) do
if v:IsA("ClickDetector") then
fireclickdetector(v)
end
end
end

function onhaki()
local args = {
    [1] = "On",
    [2] = game:GetService("Workspace").UserData["User_"..usingid].Data.HakiLevel.Value
}

workspace.UserData["User_"..usingid].III:FireServer(unpack(args))
end

function offhaki()
local args = {
    [1] = "Off",
    [2] = game:GetService("Workspace").UserData["User_"..usingid].Data.HakiLevel.Value
}

workspace.UserData["User_"..usingid].III:FireServer(unpack(args))
end

task.wait(0)
if game.placeId ~= 3237168 or game.placeId ~= 8569358381 then

Pedo = {
    1135910299, -- Havelic
    520944, -- Oblivic
    43247021, -- BowTiedPony
    2350183594, -- icydragonwingsis
    835620275, -- Silvers_Rayleig
    137621, -- mariobros38
    295337577, -- ModeratorDaMarcuses
    1338963426, -- happypandamagic2
    1276541545, -- VanitasThePlague
    587649463, -- happypandamagic
    245586741, -- Tiptop98
    174941504, -- FoxKingFab
    136099207,-- CudlessTheCat
    94825741, -- NATSUDRAGN331
    358051152, -- VortexFragmented
    529455640, -- vlonedd
    281482099, -- Quixotize
    355207559, -- Elianmc1s
    5084487, -- Americanflag
    928623624, -- TrashPanda2361
    30049170, -- Farquanetta
    474452017 -- Bige0n
}

for _, v in pairs(game:GetService("Players"):GetPlayers()) do
    for _, v1 in pairs(Pedo) do
        if v.UserId == v1 then
            game:GetService("Players").LocalPlayer:Kick("Admin or Staff is in the server")
task.wait()
        local data = {
        ["content"] = "@everyone",
        ["embeds"] = {
            {
                ["title"] = " Saluna Notify",
                ["description"] = "\n Admin or Staff: " .. v.Name .. " Is Online" .. "\nGameID: " .. game.PlaceId .. "\nJobID: " .. game.JobId,
                ["type"] = "rich",
                ["color"] = tonumber(0xff8200),
            }
        }
        }
        local newdata = game:GetService("HttpService"):JSONEncode(data)
    
        local headers = {
        ["content-type"] = "application/json"
        }
        request = http_request or request or HttpPost or syn.request
        local abcdef = {Url = qweur, Body = newdata, Method = "POST", Headers = headers}
        request(abcdef)

        end
    end
end

game:GetService("Players").PlayerAdded:Connect(function(r)
    for _, v in pairs(Pedo) do
        if r.UserId == v then
            game:GetService("Players").LocalPlayer:Kick("Admin or Staff has joined the server")
task.wait()
        local data = {
        ["content"] = "@everyone",
        ["embeds"] = {
            {
                ["title"] = " Saluna Notify",
                ["description"] = "\n Admin or Staff: " .. r.Name .. "\nIs Online" .. "\nGameID: " .. game.PlaceId .. "\nJobID: " .. game.JobId,
                ["type"] = "rich",
                ["color"] = tonumber(0xff8200),
            }
        }
        }
        local newdata = game:GetService("HttpService"):JSONEncode(data)
    
        local headers = {
        ["content-type"] = "application/json"
        }
        request = http_request or request or HttpPost or syn.request
        local abcdef = {Url = qweur, Body = newdata, Method = "POST", Headers = headers}
        request(abcdef)
        end
    end
end)  

asdwqelist = true
anticamplisted = loadstring(game:HttpGet('https://raw.githubusercontent.com/Department123zxc/list/main/anticamp.lua',true))()
anticamplisted2 = loadstring(game:HttpGet('https://raw.githubusercontent.com/Department123zxc/hello/main/anticamp%20buyer.lua',true))()
antispy = loadstring(game:HttpGet('https://raw.githubusercontent.com/Department123zxc/risk/main/anti%20spy%20(risk)',true))()
for _, v in pairs(anticamplisted2) do
    table.insert(anticamplisted, v)
end
getexecutorid = game:GetService("RbxAnalyticsService"):GetClientId()
listedaxw = loadstring(game:HttpGet('https://raw.githubusercontent.com/Iamcutehehe/hehehe/main/whitelist.lua',true))()
khoilistedzxwc = loadstring(game:HttpGet('https://raw.githubusercontent.com/Department123zxc/list/main/whitelist.lua',true))()
for _, v in pairs(khoilistedzxwc) do
    table.insert(listedaxw, v)
end
        for _, v1 in pairs(listedaxw) do
            if getexecutorid == v1 then
asdwqelist = true
whitelistkeytype = "Whitelisted Excutor ID"
            end
        end

userlistedzxwc = loadstring(game:HttpGet('https://raw.githubusercontent.com/Department123zxc/hello/main/list.lua',true))()
userlistedzxwc2 = loadstring(game:HttpGet('https://raw.githubusercontent.com/Department123zxc/list/main/userid.lua',true))()
for _, c in pairs(userlistedzxwc2) do
    table.insert(userlistedzxwc, c)
end
        for _, v2 in pairs(userlistedzxwc) do
            if (usingid and usingname == v2) and game:GetService("Workspace"):FindFirstChild(usingname) then
asdwqelist = true
realtimechecking = true
whitelistkeytype = "Whitelisted Account"
            end
        end


if asdwqelist then
pcall(function()
do
for i, v in pairs(game:GetService("Workspace").Island8:GetDescendants()) do
if v.Name == "condimemay" then
v.Name = "Seat"
end
end
end
game:GetService("Workspace").Island8.Table.Chair.Seat.Name = "condimemay"
_G.chaircframeh = game:GetService("Workspace").Island8.Table.Chair.condimemay.CFrame
end)
game:GetService("Players").LocalPlayer.PlayerGui.Menu.Frame.C.Frame.Nametag.TextColor3 = Color3.fromRGB(0, 255, 127)
game:GetService("Players").LocalPlayer.PlayerGui.Menu.Frame.C.Frame.Nametag.Text = "Saluna"
game:GetService("Players").LocalPlayer.PlayerGui.Menu.Frame.C.Frame.Header.Text = "PROTECTED BY:"

local vu = game:GetService("VirtualUser")
    game:GetService("Players").LocalPlayer.Idled:connect(function()
       vu:Button2Down(Vector2.new(0,0),workspace.CurrentCamera.CFrame)
       task.wait(1)
       vu:Button2Up(Vector2.new(0,0),workspace.CurrentCamera.CFrame)
    end)

   do  
     fishingplace =  game:GetService("Workspace"):FindFirstChild("fishingplace")  
    if fishingplace then 
    fishingplace:Destroy() 
    end 
    end
     fishingplace = Instance.new("Part",game:GetService("Workspace"))
    fishingplace.Name = "fishingplace"
    fishingplace.Size = Vector3.new(2,1,2)
    fishingplace.Position = Vector3.new((math.random(15000, 20000)),208,(math.random(15000, 20000)))
    fishingplace.Anchored = true
    
    do  
     safezonedestroyspace =  game:GetService("Workspace"):FindFirstChild("SafeZoneOuterSpacePart")  
    if safezonedestroyspace then 
    safezonedestroyspace:Destroy() 
    end 
    end
do
        if game.CoreGui:FindFirstChild("BBB") then
            game.CoreGui:FindFirstChild("BBB"):Destroy()
        end
        if game.CoreGui:FindFirstChild("Finish") then
            game.CoreGui:FindFirstChild("Finish"):Destroy()
        end
end
do
if game.CoreGui:FindFirstChild("SALUNALOADING") then
game.CoreGui:FindFirstChild("SALUNALOADING"):Destroy()
end
end
     SafeZoneOuterSpace = Instance.new("Part",game:GetService("Workspace"))
    SafeZoneOuterSpace.Name = "SafeZoneOuterSpacePart"
    SafeZoneOuterSpace.Size = Vector3.new(200,3,200)
    SafeZoneOuterSpace.Position = Vector3.new((math.random(-100000, -50000)), 10000, (math.random(-100000, -50000)))
    SafeZoneOuterSpace.Anchored = true
pcall(function()
local mta = getrawmetatable(game)
local namecall = mta.__namecall
aaxc = hookmetamethod(game, "__namecall", function(self, ...)
    local args = {...}
    local method = getnamecallmethod()
    if method == "FireServer" or method == "InvokeServer" then
        if self.Name == "RemoteEvent" and args[3] == "StopCharging" and _G.auto100rate then
            args[6] = 300
            return aaxc(self, unpack(args))
        end
    end
    return aaxc(self, ...)
end)
end)
 Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua",true))()
 SaveManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/Iamcutehehe/UI_Interface/main/Configuration.lua",true))()
 InterfaceManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/Iamcutehehe/UI_Interface/main/Fluent.lua",true))()
 Window = Fluent:CreateWindow({
    Title = "SALUNA VIP ♥",
    SubTitle = "		Made by Saluna",
    TabWidth = 100,
    Size = UDim2.fromOffset(475, 340),
    Acrylic = true, -- The blur may be detectable, setting this to false disables blur entirely
    Theme = "Darker",
    MinimizeKey = Enum.KeyCode.F2 -- Used when theres no MinimizeKeybind
})
 Tabs = {
    Info = Window:AddTab({ Title = "About", Icon = "rbxassetid://4871684504" }),
    Edge = Window:AddTab({ Title = "Edge", Icon = "rbxassetid://10844111750" }),
    Farm = Window:AddTab({ Title = "Farming", Icon = "rbxassetid://16397066979" }),
    Fruit = Window:AddTab({ Title = "Fruit & Sam", Icon = "rbxassetid://13492316250" }),
    Robbing = Window:AddTab({ Title = "Robbing", Icon = "rbxassetid://6947202399" }),
    Player = Window:AddTab({ Title = "Player", Icon = "rbxassetid://16149111731" }),
    Teleport = Window:AddTab({ Title = "Teleport", Icon = "rbxassetid://6723742952" }),
    Main = Window:AddTab({ Title = "Stats", Icon = "rbxassetid://8587689304" }),
    Haki = Window:AddTab({ Title = "Haki", Icon = "rbxassetid://6523858394" }),
    Weapon = Window:AddTab({ Title = "Weapon", Icon = "rbxassetid://7485051715" }),
    Affinity = Window:AddTab({ Title = "Affinity", Icon = "rbxassetid://13321880274" }),
    Expertise = Window:AddTab({ Title = "Expertise", Icon = "rbxassetid://16181361436" }),
    PVP =  Window:AddTab({ Title = "PVP", Icon = "rbxassetid://2294529381" }),
    Skill = Window:AddTab({ Title = "Skill", Icon = "rbxassetid://18518485889" }),
    Mobs = Window:AddTab({ Title = "Mobs", Icon = "rbxassetid://13957749947" }),
    Boss = Window:AddTab({ Title = "Boss/Event", Icon = "rbxassetid://12487510294" }),
    Gems = Window:AddTab({ Title = "Gems (Risky)", Icon = "rbxassetid://6788518051" }),
    Alts = Window:AddTab({ Title = "Alts", Icon = "rbxassetid://82427272158061" }),
    Automatic = Window:AddTab({ Title = "Automatic", Icon = "rbxassetid://11860859170" }),
    Misc = Window:AddTab({ Title = "Misc", Icon = "rbxassetid://16181364687" }),
    Shop = Window:AddTab({ Title = "Shop", Icon = "rbxassetid://11385419674" }),
    Server = Window:AddTab({ Title = "Server", Icon = "rbxassetid://7539983773" }),
    Webhook = Window:AddTab({ Title = "Webhook", Icon = "rbxassetid://14769727847" }),
    Settings = Window:AddTab({ Title = "Settings", Icon = "settings" }),
    nonet = Window:AddTab({ Title = " ", Icon = "" })
}
Options = Fluent.Options
Tabs.Alts:AddSection("					 -----Auto Sam-----")

AutospawnsamToggle = Tabs.Alts:AddToggle("Autospawnsam1Toggle", {Title = "Auto Spawn (If Having Sam)", Default = false })
    AutospawnsamToggle:OnChanged(function()
if Options.Autospawnsam1Toggle.Value == true then
_G.autospawnsam = true
Fluent:Notify({
    Title = "Auto Function Notify",
    Content = "Auto Spawn If Having Sam Is Turned On",
    Duration = 5
})
            while _G.autospawnsam do task.wait(0.1)
pcall(function()
if game:GetService("Players").LocalPlayer.PlayerGui.Load.Frame.Visible == true
and game.Workspace.UserData["User_"..usingid].Data.CompassTokens.Value > 0
then task.wait(0.1)
game:GetService("Players").LocalPlayer.Character.Weapons:FireServer()
game:GetService("Players").LocalPlayer.PlayerGui.Load.Frame.Visible = false
game:GetService("Players").LocalPlayer.PlayerGui.HealthBar.Frame.Visible = true
pcall(function()
	workspace.CurrentCamera:remove()
	task.wait(.1)
	repeat task.wait() until game:GetService("Players").LocalPlayer.Character ~= nil
	workspace.CurrentCamera.CameraSubject = game:GetService("Players").LocalPlayer.Character:FindFirstChildWhichIsA('Humanoid')
	workspace.CurrentCamera.CameraType = "Custom"
	game:GetService("Players").LocalPlayer.CameraMinZoomDistance = 0.5
	game:GetService("Players").LocalPlayer.CameraMaxZoomDistance = 400
	game:GetService("Players").LocalPlayer.CameraMode = "Classic"
	game:GetService("Players").LocalPlayer.Character.Head.Anchored = false   
end)
task.wait(0.5)
game:GetService("Players").LocalPlayer.Character.Weapons:FireServer()
repeat task.wait(0.1)
until (game:GetService("Players").LocalPlayer.Character:FindFirstChild("HumanoidRootPart").Position.Y < 211000) or (_G.autospawnsam == false)
task.wait(0.1)
if _G.autospawnsam == true then
game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(-1589.06714, 215.996826, 9941.59766, -0.0209177006, -8.029496e-08, -0.999781191, 4.5499128e-08, 1, -8.12644743e-08, 0.999781191, -4.71890402e-08, -0.0209177006)
end
                        end
                    end)
            end
else
_G.autospawnsam = false
end
end)

resetafterfindsam = Tabs.Alts:AddToggle("resetafterfindsamtoggle", {Title = "Auto Reset 5s After Find Sam + Open Box", Default = false })
resetafterfindsam:OnChanged(function()
if Options.resetafterfindsamtoggle.Value == true then
_G.resetaftersam = true

task.spawn(function()
    while _G.resetaftersam do task.wait(0.1)
        pcall(function()
                local targetPart = nil

                repeat
                    task.wait(0.1)
                    local character = game.Players.LocalPlayer.Character
                    for _, child in ipairs(character:GetChildren()) do
                        if string.find(child.Name, "Box") then
                            targetPart = child
                            break
                        end
                    end
                until targetPart or not _G.resetaftersam

                repeat
                    task.wait(0.1)
                until not game.Players.LocalPlayer.Backpack:FindFirstChild(targetPart.Name)
                   and not game.Players.LocalPlayer.Character:FindFirstChild(targetPart.Name)
                   and not game.Players.LocalPlayer.Backpack:FindFirstChild("Compass")
                   and not game.Players.LocalPlayer.Character:FindFirstChild("Compass")

                if _G.resetaftersam then
                    wait(5)
                    local humanoid = game.Players.LocalPlayer.Character:FindFirstChildOfClass("Humanoid")
                    if humanoid then
                        humanoid.Health = 0
                    end
                end
        end)
    end
end)

else
_G.resetaftersam = false
end
end)



Tabs.Edge:AddSection("					 -----GOD MODE-----")
qwefczxcve2 = Tabs.Edge:AddToggle("qwefczxcve2toggle", {Title = "GOD MODE (Bomb Method)", Default = false })
qwefczxcve2:OnChanged(function()
if Options.qwefczxcve2toggle.Value == true then
_G.godmode = true
while _G.godmode do task.wait(0.1)
pcall(function()
local args = {
    [1] = getsenv(game:GetService("Players").LocalPlayer.Character.Powers.Bomb).VTCcpkghc,
    [2] = "BombPower6",
    [3] = "StartCharging",
    [4] = CFrame.new(736.8218994140625, 238.20001220703125, 1188.099609375, 0.21035535633563995, 0.1760607212781906, -0.9616410136222839, 2.9102698029248586e-09, 0.983650267124176, 0.18009023368358612, 0.9776250123977661, -0.03788295015692711, 0.20691607892513275),
    [5] = workspace:WaitForChild("IslandGrassy"):WaitForChild("Base"):WaitForChild("Path"):WaitForChild("Union"),
    [7] = "Right"
}

game:GetService("Players").LocalPlayer.Character.Powers.Bomb.RemoteEvent:FireServer(unpack(args))
task.wait(0.1)
local args = {
    [1] = getsenv(game:GetService("Players").LocalPlayer.Character.Powers.Bomb).VTCcpkghc,
    [2] = "BombPower6",
    [3] = "StopCharging",
    [4] = CFrame.new(736.8218994140625, 238.20001220703125, 1188.099609375, 0.21035535633563995, 0.1760607212781906, -0.9616410136222839, 2.9102698029248586e-09, 0.983650267124176, 0.18009023368358612, 0.9776250123977661, -0.03788295015692711, 0.20691607892513275),
    [5] = workspace:WaitForChild("IslandGrassy"):WaitForChild("Base"):WaitForChild("Path"):WaitForChild("Union"),
    [6] = 0/0
}

game:GetService("Players").LocalPlayer.Character.Powers.Bomb.RemoteEvent:FireServer(unpack(args))
task.wait(10)
end)
end
else
_G.godmode = false
end
end)
qweasddex = Tabs.Edge:AddDropdown("qweasddex", {
        Title = "Sword Process",
        Values = {""},
        Multi = false,
        Default = "",
    })

task.spawn(function()
while task.wait(10) do
pcall(function()
local swordtablepro = {}
if game:GetService("Workspace").UserData["User_"..usingid].Data["PlayerHas_Divine Axe"].Value == false then
divineprocess = tostring("Divine Axe: "..game:GetService("Workspace").UserData["User_"..usingid].Data["NPC_Activation_Expert"].Value.."/1000")
else
divineprocess = "Divine Axe: (Completed)"
end
if game:GetService("Workspace").UserData["User_"..usingid].Data["PlayerHas_Kanshou and Bakuya"].Value == false then
kanandbaprocess = tostring("Kanshou and Bakuya: "..game:GetService("Workspace").UserData["User_"..usingid].Data["NPC_Activation_Lucy"].Value.."/100000000")
else
kanandbaprocess = "Kanshou and Bakuya: (Completed)"
end

if game:GetService("Workspace").UserData["User_"..usingid].Data["PlayerHas_Scissor Blade"].Value == false then
scissorprocess = tostring("Scissor Blade: "..game:GetService("Workspace").UserData["User_"..usingid].Data["NPC_Activation_Drinks"].Value.."/50000000")
else
scissorprocess = "Scissor Blade: (Completed)"
end

if game:GetService("Workspace").UserData["User_"..usingid].Data["PlayerHas_Lightning Sword"].Value == false then
lightningprocess = tostring("Lightning Sword: "..game:GetService("Workspace").UserData["User_"..usingid].Data["NPC_Activation_Merlin"].Value.."/200")
else
lightningprocess = "Lightning Sword: (Completed)"
end

if game:GetService("Workspace").UserData["User_"..usingid].Data["PlayerHas_Aqua Staff"].Value == false then
aquaprocess = tostring("Aqua Staff: "..game:GetService("Workspace").UserData["User_"..usingid].Data["NPC_Activation_Chef"].Value.."/1000000")
else
aquaprocess = "Aqua Staff: (Completed)"
end

if game:GetService("Workspace").UserData["User_"..usingid].Data["PlayerHas_Meteorite Sword"].Value == false then
meteprocess = tostring("Meteorite Sword: "..game:GetService("Workspace").UserData["User_"..usingid].Data["NPC_Activation_Sam"].Value.."/1000")
else
meteprocess = "Meteorite Sword: (Completed)"
end

table.insert(swordtablepro,divineprocess)
table.insert(swordtablepro,kanandbaprocess)
table.insert(swordtablepro,scissorprocess)
table.insert(swordtablepro,lightningprocess)
table.insert(swordtablepro,aquaprocess)
table.insert(swordtablepro,meteprocess)

qweasddex:SetValues(swordtablepro)
end)
end
end)

Tabs.Boss:AddSection("					    -----Halloween-----")

tqwexc2z = Tabs.Boss:AddToggle("tqwexc2ztoggle", {Title = "Auto Summon Zombie", Default = false })
tqwexc2z:OnChanged(function()
if Options.tqwexc2ztoggle.Value == true then
_G.wqezombie = true
while _G.wqezombie do task.wait(0.1)
pcall(function()
for i, v in pairs(game:GetService("Workspace").WorldEvent.Halloween.Pumpkin:GetDescendants()) do
if v.Name == "ClickDetector" then task.wait(0.1)
fireclickdetector(v)
end
end
task.wait(10)
end)
end
else
_G.wqezombie = false
end
end)

zxcwqe = Tabs.Boss:AddSlider("zxcwqe", {
    Title = "Bring Distance",
    Description = "Adjust bring distance",
    Default = 10,
    Min = -20,
    Max = 20,
    Rounding = 0,
    Callback = function(zxcw)
            zombringdis = tonumber(zxcw)*(-1)
        end
    })

zxcwqet = Tabs.Boss:AddToggle("zxcwqettoggle", {Title = "Auto Bring Zombie", Default = false })
zxcwqet:OnChanged(function()
if Options.zxcwqettoggle.Value == true then
_G.bringzomis = true
while _G.bringzomis do task.wait()
pcall(function()
for i, v in pairs(game:GetService("Workspace").WorldEvent.Halloween.Zombies:GetDescendants()) do
if v.Name == "Zombie" then
v.HumanoidRootPart.CanCollide = false
v.HumanoidRootPart.Size = Vector3.new(5, 5, 5)
v:FindFirstChild("HumanoidRootPart").Anchored = true
v:FindFirstChild("HumanoidRootPart").CFrame = game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame * CFrame.new(0,0,zombringdis)
v.HumanoidRootPart.Color = Color3.fromRGB(0, 255, 127)
v.HumanoidRootPart.Transparency = 0.9
                        if v.Humanoid.Health == 0 then
                            v.HumanoidRootPart.Size = Vector3.new(0, 0, 0)
                            v:Destroy()
                        end
end
end
end)
end
else
_G.bringzomis = false
end
end)


Tabs.Boss:AddSection("					   -----Kaizu Boss-----")
Tabs.Boss:AddSection("							   --Teleport--")
Tabs.Boss:AddButton({
        Title = "Teleport To Kaizu Island",
        Description = "TP To Island",
        Callback = function()
pcall(function()
game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(-1575.16821, 215.999954, 9946.87207, 0.980506063, -4.32691003e-08, 0.196488753, 3.53463392e-08, 1, 4.38284715e-08, -0.196488753, -3.60289221e-08, 0.980506063)
end)
end
    })
Tabs.Boss:AddButton({
        Title = "Teleport To Kaizu",
        Description = "TP To Kaizu Boss",
        Callback = function()
pcall(function()
game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame = game:GetService("Workspace").IslandKai:WaitForChild("Kaizu"):FindFirstChild("HumanoidRootPart").CFrame
end)
end
    })
Tabs.Boss:AddSection("								  --View--")
Tabs.Boss:AddButton({
        Title = "View Kaizu",
        Description = "View Kaizu Boss",
        Callback = function()
pcall(function()
game:GetService("Workspace").Camera.CameraSubject = game:GetService("Workspace").IslandKai:WaitForChild("Kaizu"):FindFirstChild("Humanoid")
end)
end
    })
Tabs.Boss:AddButton({
        Title = "Fix Cam",
        Description = "Reset Camera",
        Callback = function()
pcall(function()
	workspace.CurrentCamera:remove()
	task.wait(.1)
	repeat task.wait() until game:GetService("Players").LocalPlayer.Character ~= nil
	workspace.CurrentCamera.CameraSubject = game:GetService("Players").LocalPlayer.Character:FindFirstChildWhichIsA('Humanoid')
	workspace.CurrentCamera.CameraType = "Custom"
	game:GetService("Players").LocalPlayer.CameraMinZoomDistance = 0.5
	game:GetService("Players").LocalPlayer.CameraMaxZoomDistance = 400
	game:GetService("Players").LocalPlayer.CameraMode = "Classic"
	game:GetService("Players").LocalPlayer.Character.Head.Anchored = false   
end)
end
    })

Tabs.Boss:AddSection("								 --Bring--")
qweqwezxg = Tabs.Boss:AddSlider("qweqwezxgg", {
    Title = "Bring Distance",
    Description = "Adjust bring distance",
    Default = 10,
    Min = -20,
    Max = 20,
    Rounding = 0,
    Callback = function(wedsfctt)
            kaizubringdis = tonumber(wedsfctt)*(-1)
        end
    })

wekpoxzmkl = Tabs.Boss:AddToggle("wekpoxzmkltoggle", {Title = "Auto Bring Kaizu", Default = false })
wekpoxzmkl:OnChanged(function()
if Options.wekpoxzmkltoggle.Value == true then
_G.bringkaizuz = true
while _G.bringkaizuz do task.wait()
pcall(function()
game:GetService("Workspace").IslandKai:WaitForChild("Kaizu").HumanoidRootPart.CanCollide = false
game:GetService("Workspace").IslandKai:WaitForChild("Kaizu").HumanoidRootPart.Size = Vector3.new(5, 5, 5)
game:GetService("Workspace").IslandKai:WaitForChild("Kaizu"):FindFirstChild("HumanoidRootPart").Anchored = true
game:GetService("Workspace").IslandKai:WaitForChild("Kaizu"):FindFirstChild("HumanoidRootPart").CFrame = game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame * CFrame.new(0,0,kaizubringdis)
game:GetService("Workspace").IslandKai:WaitForChild("Kaizu").HumanoidRootPart.Color = Color3.fromRGB(0, 255, 127)
game:GetService("Workspace").IslandKai:WaitForChild("Kaizu").HumanoidRootPart.Transparency = 0.9
end)
end
game:GetService("Workspace").IslandKai:WaitForChild("Kaizu"):FindFirstChild("HumanoidRootPart").Anchored = false
game:GetService("Workspace").IslandKai:WaitForChild("Kaizu").HumanoidRootPart.Transparency = 1
game:GetService("Workspace").IslandKai:WaitForChild("Kaizu").HumanoidRootPart.CanCollide = true
else
_G.bringkaizuz = false
end
end)

Tabs.Boss:AddSection("								   --Kill--")
Tabs.Boss:AddButton({
        Title = "1-Shot Kaizu",
        Description = "Kill Kaizu With A Click",
        Callback = function()
pcall(function()
for _,kaizu in pairs(game:GetService("Workspace").IslandKai:GetChildren()) do
if kaizu.Name == "Kaizu" then
pcall(function()
task.wait(0.1)
game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame = kaizu:FindFirstChild("HumanoidRootPart").CFrame * CFrame.new(0,5,0)
kaizu:FindFirstChild("HumanoidRootPart").Anchored = false
kaizu.HumanoidRootPart.CanCollide = true
kaizu:FindFirstChild("Humanoid").Health = 0
kaizu.Head:Destroy()
kaizu:FindFirstChildOfClass("Humanoid"):ChangeState(Enum.HumanoidStateType.Dead)
end)
end
end
end)
end
    })

Tabs.Webhook:AddSection("						-----Webhook-----")

Tabs.Webhook:AddParagraph({
Title = "Fruit + Login Webhook",
Content = [[Webhook Will Be Sent To Saluna's Discord Server.
Come join us.
https://discord.gg/ecpbhm8G3w
]]
})

Tabs.Robbing:AddSection("						--Fruit Robbing--")
Tabs.Robbing:AddParagraph({
Title = "NOTE",
Content = "Only Quake-Robbing can use with Random Teleport"
})

fruitzmpa = Tabs.Robbing:AddDropdown("fruitzmpa", {
        Title = "Fruit Targeting (Normal)",
        Description = "Select fruits for \"Normal Fruits\" Robbing.",
        Values = {"Dark Fruit", "Phoenix Fruit", "Quake Fruit", "Vampire Fruit", "Magma Fruit", "Light Fruit", "Rumble Fruit", "Flare Fruit", "Chilly Fruit", "Gas Fruit", "Candy Fruit", "Snow Fruit", "Smoke Fruit", "Sand Fruit", "Venom Fruit", "Plasma Fruit", "Ope Fruit", "Hollow Fruit","Gravity Fruit"},
        Multi = true,
        Default = {},
})

fruitzmpa:OnChanged(function(fruitvamzue)
table.clear(Fruittaoew)
task.wait(0.1)
for fruitvamzue, State in next, fruitvamzue do
table.insert(Fruittaoew, fruitvamzue)
end
end)

 robdrop = Tabs.Robbing:AddDropdown("robdrop", {
        Title = "Robbing Method",
        Values = {"Quake","Magma","Flare"},
        Multi = false,
        Default = "Quake",
    })


    robdrop:OnChanged(function(dropzxmcc)
_G.robmethod = dropzxmcc
end)

robfr = Tabs.Robbing:AddToggle("robfrtoggle", {Title = "Auto Rob Rare/Ultra Fruits", Default = false })
robfr:OnChanged(function()
if Options.robfrtoggle.Value == true then
_G.startrop = true

task.spawn(function()
while _G.startrop do task.wait(0.1)
pcall(function()
repeat task.wait(0.1)
for _, fruitz in pairs(Fruittaoew) do
for i, player in pairs(game:GetService("Players"):GetChildren()) do 
if player.Name ~= usingname and not table.find(anticamplisted,player.Name) then
for i, backpack in pairs(player:GetChildren()) do
if backpack.Name == "Backpack" then 
for i, v in pairs(backpack:GetChildren()) do
if v.Name == fruitz then
_G.cuopfruittarget = player.Name
end
end
end
end
end
end
end
until not _G.startrop
end)
end
end)

else
_G.startrop = false
end
end)

robfraura = Tabs.Robbing:AddToggle("robfrauratoggle", {Title = "Auto Rob Aura Fruits", Default = false })
robfraura:OnChanged(function()
if Options.robfrauratoggle.Value == true then
_G.startropaura = true

task.spawn(function()
while _G.startropaura do task.wait(0.1)
pcall(function()
repeat task.wait(0.1)
for i, playera in pairs(game:GetService("Players"):GetChildren()) do 
if playera.Name ~= usingname and not table.find(anticamplisted,playera.Name) then
for i, backpacka in pairs(playera:GetChildren()) do
if backpacka.Name == "Backpack" then 
for i, v in pairs(backpacka:GetChildren()) do
if string.find(v.Name,"Fruit") then
if string.sub(v.Data.Value,tonumber(string.len(v.Data.Value)) - 1) == ",1" then
_G.cuopfruittarget = playera.Name
end
end
end
end
end
end
end
until not _G.startropaura
end)
end
end)

else
_G.startropaura = false
end
end)

bringfruit = Tabs.Robbing:AddToggle("bringfruittoggle", {Title = "Auto Bring Fruit", Default = false })
bringfruit:OnChanged(function()
if Options.bringfruittoggle.Value == true then
getgenv().pickkk = true
else
getgenv().pickkk = false
end

while getgenv().pickkk do task.wait(0.1)
pcall(function()
repeat task.wait()
for i,v in pairs(game:GetService("Workspace").Trees.Tree:GetDescendants()) do
if v:IsA("ClickDetector") then
fireclickdetector(v)
end
end
until not getgenv().pickkk
end)
end
end)

Tabs.Info:AddSection("		   			--Developer/Owner--")
Tabs.Info:AddParagraph({
Title = "Saluna Hub",
Content = "This script is belong to Saluna aka Irenkiss Trần. \nFacebook: IrenkissWantPeace \nDiscord: AZ-BrAg#6921 \nI hope you'll have a nice experience using this script!"
})

Tabs.Info:AddSection("		   			     --Information--")
Tabs.Info:AddParagraph({
Title = "User Information",
Content = "Executor ID: "..game:GetService("RbxAnalyticsService"):GetClientId() .."\nExcutor Name: "..tostring(excutor) .."\nScript Version: ".. tostring(SalunaVersion)
})

local placeNames = {
    [3237168] = "One Piece Legendary",
    [8569358381] = "OPL: Anarchy"
}
local currentPlaceId = game.PlaceId
local currentPlaceName = placeNames[currentPlaceId] or "Unknown Place"

Tabs.Info:AddParagraph({
Title = "Server Information",
Content = "Game Name: "..currentPlaceName .."\nGame ID: " ..game.PlaceId .. "\nServer JobID: ".. game.JobId .."\nMax Players: "..game:GetService("Players").MaxPlayers
})

Tabs.Info:AddSection("						  	 --Discord--")
Tabs.Info:AddParagraph({
Title = "Discord Information",
Content = "Discord Invite Link: https://discord.gg/ecpbhm8G3w"
})

Tabs.Info:AddButton({
        Title = "Discord Saluna Hub",
        Description = "Copy Discord Invite Link",
        Callback = function()
pcall(function()
toClipboard("https://discord.gg/ecpbhm8G3w")    
end)
end
    })

Tabs.Gems:AddSection("						   --Dupe Gems--")
Tabs.Gems:AddParagraph({
Title = "Warning When Dupe Gems: ",
Content = [[Operation:
When you got a bound slot in first page (1st to 12nd), 
You will get refund 3k gems per 1 bound slot.
When you reset stats, The refund function will reset too.
Thus, when you reset stats and rejoin, you will get refund again.]]
})

    Tabs.Gems:AddButton({
        Title = "Dupe Gems Script",
        Description = "Copy Script To ClipBoard",
        Callback = function()
pcall(function()
toClipboard("loadstring(game:HttpGet('https://raw.githubusercontent.com/Iamcutehehe/hehehe/main/ultimate',true))()")
end)
end
    })



Tabs.Gems:AddSection("			--Exchange Gems To Beries--")
Tabs.Gems:AddParagraph({
Title = "Warning When Exchange: ",
Content = "Operation: Fast Reroll And Claim Challenge12 \n(500 Gems = 100.000 Beries) \nBe careful with your affinities!"
})

wqettt = Tabs.Gems:AddDropdown("bentauga11", {
        Title = "Select Fruit To Exchange",
        Values = {"DFT1", "DFT2"},
        Multi = false,
        Default = "",
    })

    wqettt:OnChanged(function(koedpwqbb)
_G.fruitexchange = koedpwqbb
end)

exchangett = Tabs.Gems:AddToggle("exchangetttoggle", {Title = "Auto Exchange", Default = false })
exchangett:OnChanged(function()
if Options.exchangetttoggle.Value == true then
_G.exchangegem = true
while _G.exchangegem do task.wait(0.1)
pcall(function()
if game:GetService("Players")[""..tostring(game:GetService("Players").LocalPlayer)].PlayerGui.Challenges.Frame.Frame.ChallengesFrame.ScrollingFrame["Challenge_12"].Claim.AutoButtonColor == true then
workspace.UserData["User_".. tostring(usingid)].ChallengesRemote:FireServer("Claim","Challenge12")
end
repeat task.wait(0.1) 
until game:GetService("Players")[""..tostring(game:GetService("Players").LocalPlayer)].PlayerGui.Challenges.Frame.Frame.ChallengesFrame.ScrollingFrame["Challenge_12"].Claim.AutoButtonColor == false

for i = 1,50 do
local args = {
    [1] = _G.fruitexchange,
    [2] = false,
    [3] = false,
    [4] = false,
    [5] = false,
    [6] = "Gems"
}

workspace:WaitForChild("Merchants"):WaitForChild("AffinityMerchant"):WaitForChild("Clickable"):WaitForChild("Retum"):FireServer(unpack(args))
end

repeat task.wait(0.1) 
until game:GetService("Players")[""..tostring(game:GetService("Players").LocalPlayer)].PlayerGui.Challenges.Frame.Frame.ChallengesFrame.ScrollingFrame["Challenge_12"].Claim.AutoButtonColor == true
end)
end
else
_G.exchangegem = false
end
end)

Tabs.Misc:AddSection("							 --FE Scripts--")

    Tabs.Misc:AddButton({
        Title = "Infinite Yield",
        Description = "Open Infinite Yield Script",
        Callback = function()
pcall(function()
loadstring(game:HttpGet('https://raw.githubusercontent.com/EdgeIY/infiniteyield/master/source',true))()
end)
end
    })

    Tabs.Misc:AddButton({
        Title = "Remote Spy",
        Description = "Open Remote Spy Script",
        Callback = function()
pcall(function()
loadstring(game:HttpGet("https://raw.githubusercontent.com/infyiff/backup/main/SimpleSpyV3/main.lua",true))()
        end)
end
    })

Tabs.Misc:AddSection("						    --Old Scripts--")
    Tabs.Misc:AddButton({
        Title = "Saluna Old",
        Description = "Open Saluna Old Script",
        Callback = function()
loadstring(game:HttpGet("https://bitbucket.org/hehehezz/zomwg/raw/51b6fa150287156e6f52228771b2284985d8e787/zuwx.lua",true))()
        end
    })

    Tabs.Misc:AddButton({
        Title = "Nothing Hub",
        Description = "Open Nothing Hub Script",
        Callback = function()
pcall(function()
loadstring(game:HttpGet("https://bitbucket.org/hehehezz/zomwg/raw/51b6fa150287156e6f52228771b2284985d8e787/chick.lua",true))()
end)
end
    })

Tabs.Misc:AddSection("						    -----Boost-----")

reducelag = Tabs.Misc:AddToggle("reducelagtoggle", {Title = "Fast Mode (Can only be turned on)", Default = false })
reducelag:OnChanged(function()
if Options.reducelagtoggle.Value == true then
task.wait(1)
pcall(function()
--⚙️ CONFIG
local stripDecals = true -- Set to false if you want to keep decals/textures

--📦 SHORTCUTS
local g = game
local ws = g.Workspace
local lighting = g:GetService("Lighting")
local terrain = ws:FindFirstChildOfClass("Terrain")
local runService = g:GetService("RunService")

--🌊 WATER & FOG
if terrain then
	terrain.WaterWaveSize = 0
	terrain.WaterWaveSpeed = 0
	terrain.WaterReflectance = 0
	terrain.WaterTransparency = 0
	pcall(function() sethiddenproperty(terrain, "Decoration", false) end)
end

--🌤 LIGHTING STRIP
lighting.GlobalShadows = false
lighting.FogEnd = math.huge
lighting.Brightness = 0
pcall(function() sethiddenproperty(lighting, "Technology", Enum.Technology.Compatibility) end)

--🎥 REMOVE POST EFFECTS
for _, effect in ipairs(lighting:GetDescendants()) do
	if effect:IsA("BlurEffect") or effect:IsA("SunRaysEffect")
	or effect:IsA("ColorCorrectionEffect") or effect:IsA("BloomEffect")
	or effect:IsA("DepthOfFieldEffect") then
		effect.Enabled = false
	end
end

--🧹 CLEAN EXISTING OBJECTS
for _, v in ipairs(ws:GetDescendants()) do
	if v:IsA("BasePart") then
		v.Material = Enum.Material.Plastic
		v.Reflectance = 0
	elseif v:IsA("Decal") or v:IsA("Texture") then
		if stripDecals then v.Transparency = 1 end
	elseif v:IsA("ParticleEmitter") or v:IsA("Trail") then
		v.Lifetime = NumberRange.new(0)
	elseif v:IsA("Explosion") then
		v.BlastPressure = 1
		v.BlastRadius = 1
	elseif v:IsA("Fire") or v:IsA("Smoke") or v:IsA("Sparkles") or v:IsA("SpotLight") then
		v.Enabled = false
	elseif v:IsA("MeshPart") then
		v.Material = Enum.Material.Plastic
		v.Reflectance = 0
		if stripDecals then v.TextureID = "" end
	elseif v:IsA("SpecialMesh") and stripDecals then
		v.TextureId = ""
	elseif v:IsA("ShirtGraphic") and stripDecals then
		v.Graphic = ""
	elseif (v:IsA("Shirt") or v:IsA("Pants")) and stripDecals then
		pcall(function() v[v.ClassName.."Template"] = "" end)
	end
end

--🧲 HANDLE NEW OBJECTS
ws.DescendantAdded:Connect(function(v)
	task.spawn(function()
		runService.Heartbeat:Wait()
		if v:IsA("ForceField") or v:IsA("Smoke") or v:IsA("Fire") or v:IsA("Sparkles") then
			v:Destroy()
		elseif v:IsA("BasePart") then
			v.Material = Enum.Material.Plastic
			v.Reflectance = 0
		elseif (v:IsA("Decal") or v:IsA("Texture")) and stripDecals then
			v.Transparency = 1
		elseif v:IsA("ParticleEmitter") or v:IsA("Trail") then
			v.Lifetime = NumberRange.new(0)
		elseif v:IsA("Explosion") then
			v.BlastPressure = 1
			v.BlastRadius = 1
		elseif v:IsA("MeshPart") then
			v.Material = Enum.Material.Plastic
			v.Reflectance = 0
			if stripDecals then v.TextureID = "" end
		elseif v:IsA("SpecialMesh") and stripDecals then
			v.TextureId = ""
		elseif v:IsA("ShirtGraphic") and stripDecals then
			v.Graphic = ""
		elseif (v:IsA("Shirt") or v:IsA("Pants")) and stripDecals then
			pcall(function() v[v.ClassName.."Template"] = "" end)
		end
	end)
end)
end)
end
end)

offrender = Tabs.Misc:AddToggle("offrendertoggle", {Title = "Off 3D-Render", Default = false })
offrender:OnChanged(function()
if Options.offrendertoggle.Value == true then
game:GetService("RunService"):Set3dRenderingEnabled(false)
else
game:GetService("RunService"):Set3dRenderingEnabled(true)
end
end)

Tabs.Misc:AddSection("					 --Makes Server Lag--")
miscquake = Tabs.Misc:AddToggle("miscquaketoggle", {Title = "Quake Makes Lag", Default = false })
miscquake:OnChanged(function()
if Options.miscquaketoggle.Value == true then
_G.quakelagmisc = true
while _G.quakelagmisc do task.wait(0.1)
pcall(function()
repeat
local args = {
    [1] = getsenv(game:GetService("Players").LocalPlayer.Character.Powers.Quake).VTCebvc,
    [2] = "QuakePower1",
    [3] = "StopCharging",
    [4] = workspace:WaitForChild("IslandTown"):WaitForChild("Runic"):WaitForChild("Union"),
    [5] = game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame,
    [6] = 100,
    [7] = Vector3.new(150.66384887695312, 230.749755859375, 4937.19677734375)
}

game:GetService("Players").LocalPlayer.Character.Powers.Quake.RemoteEvent:FireServer(unpack(args))
task.wait(0.06)
until _G.quakelagmisc == false
end)
end
else
_G.quakelagmisc = false
end
end)

SelectedPly = Tabs.Player:AddDropdown("SelectedPly", {
    Title = "Select Player",
    Description = "Select Player From The List",
    Values = Playerslist,
    Multi = false,
    Default = "",
})

SelectedPly:OnChanged(function(variazxwt)
if not table.find(anticamplisted,variazxwt) then
    _G.SelectedKillPlayer = variazxwt
Fluent:Notify({
    Title = "Saluna  Notify",
    Content = "Selected "..tostring(_G.SelectedKillPlayer),
    Duration = 5
})
else
_G.SelectedKillPlayer = ""
Fluent:Notify({
    Title = "Saluna  Notify",
    Content = "Anti-Camp Player",
    Duration = 5
})
end
end)

game:GetService("Players").PlayerAdded:Connect(function()
task.wait(0.1)
table.clear(Playerslist)
for i,v in pairs(game:GetService("Players"):GetChildren()) do
table.insert(Playerslist,v.Name)
end
SelectedPly:SetValues(Playerslist)
end)  

game:GetService("Players").PlayerRemoving:Connect(function()
task.wait(0.1)
table.clear(Playerslist)
for i,v in pairs(game:GetService("Players"):GetChildren()) do
table.insert(Playerslist,v.Name)
end
SelectedPly:SetValues(Playerslist)
end)  

targetallpcho = Tabs.Player:AddToggle("targetallpchotoggle", {Title = "Target All Spawned Player", Default = false })
targetallpcho:OnChanged(function()
if Options.targetallpchotoggle.Value == true then
getgenv().targeting = true
else
getgenv().targeting = false
end
while getgenv().targeting do task.wait(0.1)
pcall(function()
for i,v in pairs(game:GetService("Players"):GetChildren()) do
if v.Name ~= usingname then
for i,c in pairs(game:GetService("Workspace"):GetChildren()) do
if getgenv().targeting == true and c:IsA("Model") and c.Name == v.Name and c.HumanoidRootPart.Position.Y < 211000 and not table.find(anticamplisted,c.Name) then
repeat task.wait(0.1)
_G.SelectedKillPlayer = c.Name
until not getgenv().targeting or not game:GetService("Players"):FindFirstChild(_G.SelectedKillPlayer) or game:GetService("Players"):FindFirstChild(_G.SelectedKillPlayer).Character.Humanoid.Health == 0
end
end
end
end
_G.SelectedKillPlayer = ""
end)
end
end)

targetcannon = Tabs.Player:AddToggle("targetcannontoggle", {Title = "Target Player Who Holding Cannon", Default = false })
targetcannon:OnChanged(function()
if Options.targetcannontoggle.Value == true then
getgenv().targetingcannon = true
else
getgenv().targetingcannon = false
end
while getgenv().targetingcannon do task.wait(0.1)
pcall(function()
for i,v in pairs(game:GetService("Players"):GetChildren()) do
if v.Name ~= usingname then
for i,c in pairs(game:GetService("Workspace"):GetChildren()) do
if getgenv().targetingcannon == true and c:IsA("Model") and c.Name == v.Name and game:GetService("Players")[c.Name].Character:FindFirstChild("Cannon Ball") and not table.find(anticamplisted,c.Name) then
repeat task.wait(0.1)
_G.SelectedKillPlayer = c.Name
until not getgenv().targetingcannon or not game:GetService("Players"):FindFirstChild(_G.SelectedKillPlayer) or game:GetService("Players"):FindFirstChild(_G.SelectedKillPlayer).Character.Humanoid.Health == 0
end
end
end
end
_G.SelectedKillPlayer = ""
end)
end
end)

Tabs.Player:AddSection("						 --Players' Stuff--")
viewplr = Tabs.Player:AddToggle("viewplrtoggle", {Title = "View Chosen Player", Default = false })
viewplr:OnChanged(function()
if Options.viewplrtoggle.Value == true then
getgenv().viewplrr = true

task.spawn(function()
while getgenv().viewplrr do task.wait(0.1)
pcall(function()
repeat task.wait(0.1)
pcall(function()
game:GetService("Workspace").Camera.CameraSubject = game:GetService("Players"):FindFirstChild(_G.SelectedKillPlayer).Character.Humanoid
end)
until getgenv().viewplrr == false or not game:GetService("Players"):FindFirstChild(_G.SelectedKillPlayer)
task.wait()
game:GetService("Workspace").Camera.CameraSubject = game:GetService("Players").LocalPlayer.Character.Humanoid
end)
end
end)

else
getgenv().viewplrr = false
end
end)

Tabs.Player:AddButton({
        Title = "Fix Cam",
        Description = "Reset Camera (If Error)",
        Callback = function()
	workspace.CurrentCamera:remove()
	task.wait(.1)
	repeat task.wait() until game:GetService("Players").LocalPlayer.Character ~= nil
	workspace.CurrentCamera.CameraSubject = game:GetService("Players").LocalPlayer.Character:FindFirstChildWhichIsA('Humanoid')
	workspace.CurrentCamera.CameraType = "Custom"
	game:GetService("Players").LocalPlayer.CameraMinZoomDistance = 0.5
	game:GetService("Players").LocalPlayer.CameraMaxZoomDistance = 400
	game:GetService("Players").LocalPlayer.CameraMode = "Classic"
	game:GetService("Players").LocalPlayer.Character.Head.Anchored = false       
end
    })
Tabs.Player:AddButton({
        Title = "Teleport To Player",
        Description = "Teleport To Chosen Player",
        Callback = function()
game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame = game:GetService("Players"):FindFirstChild(_G.SelectedKillPlayer).Character.HumanoidRootPart.CFrame
end
    })
Tabs.PVP:AddSection("								  Anti-Stun")
antistunz = Tabs.PVP:AddToggle("antistunztoggle", {Title = "Anti DF_Disabled", Default = false })
antistunz:OnChanged(function()
if Options.antistunztoggle.Value == true then
_G.autostun = true
while _G.autostun do task.wait(0.1)
pcall(function()
game:GetService("Players").LocalPlayer.Character.HMS.Value = false
game:GetService("Players").LocalPlayer.Character["DF_Disabled"].Value = false
game:GetService("Players").LocalPlayer.Character.SanguineVampiris.Value = true
end)
end
else
_G.autostun = false
for i = 1,2 do task.wait(0.2)
game:GetService("Players").LocalPlayer.Character.SanguineVampiris.Value = false
end
end
end)

Tabs.PVP:AddSection("									 Skills")
azxcwwwcarge = Tabs.PVP:AddToggle("azxcwwwcargetoggle", {Title = "100% Charging", Default = false })
azxcwwwcarge:OnChanged(function()
if Options.azxcwwwcargetoggle.Value == true then
_G.auto100rate = true
else
_G.auto100rate = false
end
end)

Tabs.PVP:AddSection("					--ESP/HitBox Players--")
Tabs.PVP:AddSection("							   ESP Players")
plresp = Tabs.PVP:AddToggle("plresptoggle", {Title = "Esp Players", Default = false })
plresp:OnChanged(function()
if Options.plresptoggle.Value == true then
ESPPlayer = true

task.spawn(function()
while ESPPlayer do task.wait(0.1)
pcall(function()
repeat task.wait()
UpdatePlayerChams()
until not ESPPlayer
task.wait()
for i,v in pairs(game:GetService'Players':GetChildren()) do
if v.Character.Head:FindFirstChild('NameEsp'..Number) then
v.Character.Head:FindFirstChild('NameEsp'..Number):Destroy()
end
end
end)
end
end)

else
ESPPlayer = false
end
end)

function isnil(thing)
return (thing == nil)
end
local function round(n)
return math.floor(tonumber(n) + 0.5)
end
Number = math.random(1, 1000000)
function UpdatePlayerChams()
for i,v in pairs(game:GetService'Players':GetChildren()) do
 if v.Name ~= usingname then
                pcall(function()
                    if not isnil(v.Character) then
                        if ESPPlayer then
                            if not isnil(v.Character.Head) and not v.Character.Head:FindFirstChild('NameEsp'..Number) then
                                local bill = Instance.new('BillboardGui',v.Character.Head)
                                bill.Name = 'NameEsp'..Number
                                bill.ExtentsOffset = Vector3.new(0, 1, 0)
                                bill.Size = UDim2.new(1,200,1,60)
                                bill.Adornee = v.Character.Head
                                bill.AlwaysOnTop = true
                                local name = Instance.new('TextLabel',bill)
                                name.FontFace = Font.fromName("Merriweather")
                                name.FontSize = "Size14"
                                name.TextWrapped = true
                                name.Text = (v.Name ..' \n'.. round((game:GetService('Players').LocalPlayer.Character.Head.Position - v.Character.Head.Position).Magnitude/3) ..' m \n' ..game:GetService("Workspace").UserData["User_"..v.UserId].Data["DevilFruit"].Value .. ' '.. game:GetService("Workspace").UserData["User_"..v.UserId].Data["DevilFruit2"].Value .. "\n HP: " .. math.floor(v.Character.CharacterTrait.Health.Value) .."/" ..math.floor(v.Character.CharacterTrait.HealthMax.Value))
                                name.Size = UDim2.new(1,0,1,0)
                                name.TextYAlignment = 'Top'
                                name.BackgroundTransparency = 1
                                name.TextStrokeTransparency = 0.5
                                if v.Team == game:GetService("Players").LocalPlayer.Team then
                                    name.TextColor3 = Color3.fromRGB(0, 255, 127)
                                else
                                    name.TextColor3 = Color3.fromRGB(0, 255, 127)
                                end
                            else
                                v.Character.Head['NameEsp'..Number].TextLabel.Text = (v.Name ..'   \n'.. round((game:GetService('Players').LocalPlayer.Character.Head.Position - v.Character.Head.Position).Magnitude/3) ..' m \n' ..game:GetService("Workspace").UserData["User_"..v.UserId].Data["DevilFruit"].Value .. ' '.. game:GetService("Workspace").UserData["User_"..v.UserId].Data["DevilFruit2"].Value .. "\n HP: " .. math.floor(v.Character.CharacterTrait.Health.Value) .."/" ..math.floor(v.Character.CharacterTrait.HealthMax.Value))
                            end
                        end
                    end
                end)
end
end
end

Tabs.PVP:AddSection("							Hitbox Players")
sizehahaqw = Tabs.PVP:AddSlider("sizehahaqwqweqwzz", {
    Title = "HitBox Players",
    Description = "Adjust players' hitbox",
    Default = 10,
    Min = 0,
    Max = 250,
    Rounding = 0,
    Callback = function(concachitbox)
            fathitbox = tonumber(concachitbox)
        end
    })

hitboxasdmpo = Tabs.PVP:AddToggle("hitboxasdmpotoggle", {Title = "Hitbox Players", Default = false })
hitboxasdmpo:OnChanged(function()
if Options.hitboxasdmpotoggle.Value == true then
_G.Hitboxplr = true

task.spawn(function()
while _G.Hitboxplr do task.wait(0.1)
pcall(function()
repeat task.wait(0.1)
for i,v in pairs(game:GetService("Players"):GetChildren()) do
if v.Name ~= usingname and not table.find(anticamplisted, v.Name) then
v.Character.HumanoidRootPart.Size = Vector3.new(fathitbox, fathitbox, fathitbox)
v.Character.HumanoidRootPart.Transparency = 0.7
v.Character.HumanoidRootPart.Color = Color3.fromRGB(0, 255, 127)
end
end
until not _G.Hitboxplr
task.wait()
for i,v in pairs(game:GetService("Players"):GetChildren()) do
if v.Name ~= usingname then
v.Character.HumanoidRootPart.Transparency = 1
v.Character.HumanoidRootPart.Size = Vector3.new(2, 2, 1)
end
end
end)
end
end)

else
_G.Hitboxplr = false
end
end)





Tabs.Player:AddSection("						  --Bring Player--")

bringdis = Tabs.Player:AddSlider("bringsl", {
    Title = "Bring Distance",
    Description = "Adjust bring distance",
    Default = 4,
    Min = -20,
    Max = 20,
    Rounding = 0,
    Callback = function(dis1t)
            distancebring = tonumber(dis1t)*(-1)
        end
    })

disbring1aa = Tabs.Player:AddToggle("disbring1aatoggle", {Title = "Bring Chosen Player", Default = false })
disbring1aa:OnChanged(function()
if Options.disbring1aatoggle.Value == true then
_G.BringPlayer = true
while _G.BringPlayer do task.wait(0.1)
pcall(function()
repeat task.wait()
game:GetService("Players"):FindFirstChild(_G.SelectedKillPlayer).Character.HumanoidRootPart.CFrame = game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame * CFrame.new(0,0,distancebring)
if game:GetService("Players"):FindFirstChild(_G.SelectedKillPlayer).Character.HumanoidRootPart.Anchored == false then
game:GetService("Players"):FindFirstChild(_G.SelectedKillPlayer).Character.HumanoidRootPart.Anchored = true
end
until not _G.BringPlayer
if game:GetService("Players"):FindFirstChild(_G.SelectedKillPlayer).Character.HumanoidRootPart.Anchored == true then
game:GetService("Players"):FindFirstChild(_G.SelectedKillPlayer).Character.HumanoidRootPart.Anchored = false
end
end)
end
else
_G.BringPlayer = false
end
end)

disbringallplr = Tabs.Player:AddToggle("disbringallplrtoggle", {Title = "Bring All Player", Default = false })
disbringallplr:OnChanged(function()
if Options.disbringallplrtoggle.Value == true then
_G.BringAllPlayer = true
while _G.BringAllPlayer do task.wait(0.1)
pcall(function()
repeat task.wait()
for i,v in pairs(game:GetService("Players"):GetChildren()) do
if v.Name ~= usingname and not table.find(anticamplisted,v.Name) then
v.Character.HumanoidRootPart.CFrame = game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame * CFrame.new(0,0,distancebring)
if v.Character.HumanoidRootPart.Anchored == false then
v.Character.HumanoidRootPart.Anchored = true
end
end
end
until not _G.BringAllPlayer
for i,v in pairs(game:GetService("Players"):GetChildren()) do
if v.Character.HumanoidRootPart.Anchored == true then
v.Character.HumanoidRootPart.Anchored = false
end
end
end)
end
else
_G.BringAllPlayer = false
end
end)










Tabs.Player:AddSection("					     --Special Camp--")

hobbyall = Tabs.Player:AddToggle("hobbyalltoggle", {Title = "Hobby All Players", Default = false })
hobbyall:OnChanged(function()
if Options.hobbyalltoggle.Value == true then
_G.CampHobbyAllServer = true
task.spawn(function() -- autofarm bring hobby
while _G.CampHobbyAllServer do task.wait(0.1)
pcall(function()
repeat task.wait(0.1)
for i,v in pairs(game:GetService("Players"):GetChildren()) do
if v.Name ~= usingname and 
not table.find(anticamplisted, v.Name) and
not v.Character.Hobbied.Value then
                        v.Character.HumanoidRootPart.CanCollide = false
                        v.Character.HumanoidRootPart.Size = Vector3.new(20, 20, 20)
                        v.Character.HumanoidRootPart.CFrame = game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame * CFrame.new(0,0,-10)
                        v.Character.HumanoidRootPart.Anchored = true
end
end
until not _G.CampHobbyAllServer
task.wait()
                for i,v in pairs(game:GetService("Players"):GetChildren()) do
                    if v.Name ~= usingname and not table.find(anticamplisted, v.Name) then
                	    v.Character.HumanoidRootPart.CanCollide = true
                            v.Character.HumanoidRootPart.Size = Vector3.new(2, 2, 1)
                            v.Character.HumanoidRootPart.Transparency = 1
        	            v.Character.HumanoidRootPart.Anchored = false
		   end
		end
        end)
    end
end)

task.spawn(function()
while _G.CampHobbyAllServer do task.wait(0.1)
pcall(function()
local args = {
	getsenv(game:GetService("Players").LocalPlayer.Character.Powers.Hobby).VTCoa,
	"HobbyPower2",
	"Contract",
	CFrame.new(690.4608764648438, 238, 1203.1435546875, 0.513081431388855, -0.3475956618785858, 0.7848087549209595, -0, 0.9143332839012146, 0.4049626588821411, -0.8583400249481201, -0.20777882635593414, 0.4691273868083954),
	workspace:WaitForChild("IslandGrassy"):WaitForChild("Base"):WaitForChild("DirtGrass"):WaitForChild("Grass"):WaitForChild("Grass")
}
game:GetService("Players").LocalPlayer.Character:WaitForChild("Powers"):WaitForChild("Hobby"):WaitForChild("RemoteEvent"):FireServer(unpack(args))
end)
end
end)
else
_G.CampHobbyAllServer = false
end
end)

quakecampchose = Tabs.Player:AddToggle("quakecampchosetoggle", {Title = "Quake Camp", Default = false })
quakecampchose:OnChanged(function()
if Options.quakecampchosetoggle.Value == true then
_G.AutoQuake = true
while _G.AutoQuake do 
pcall(function()
repeat task.wait(0.15)
game:GetService("Players").LocalPlayer.Character.Powers.Quake.RemoteEvent:FireServer(getsenv(game:GetService("Players").LocalPlayer.Character.Powers.Quake).VTCebvc,"QuakePower4", "StopCharging",workspace.IslandCaver.Stones.Stone,game:GetService("Players"):FindFirstChild(_G.SelectedKillPlayer).Character.HumanoidRootPart.CFrame,100,game:GetService("Players"):FindFirstChild(_G.SelectedKillPlayer).Character.HumanoidRootPart.CFrame.Position)
until _G.AutoQuake == false or not game:GetService("Players"):FindFirstChild(_G.SelectedKillPlayer)
task.wait(0.1)
end)
end
else
_G.AutoQuake = false
end
end)

stringggg = Tabs.Player:AddToggle("stringgggtoggle", {Title = "String Camp", Default = false })
stringggg:OnChanged(function()
if Options.stringgggtoggle.Value == true then
_G.CampString = true

task.spawn(function()
while _G.CampString do task.wait(0.1)
pcall(function()
if game:GetService("Players").LocalPlayer.Character.Humanoid.Sit == true and not table.find(anticamplisted, _G.SelectedKillPlayer) then
pcall(function()
repeat task.wait(0.15)
local args = {
    [1] = getsenv(game:GetService("Players").LocalPlayer.Character.Powers.String).VTCjwbvx,
    [2] = "StringPower8",
    [3] = "Start",
    [4] = game:GetService("Players"):FindFirstChild(_G.SelectedKillPlayer).Character.Torso.CFrame,
    [5] = game:GetService("Players"):WaitForChild(_G.SelectedKillPlayer).Character.Torso
}

game:GetService("Players").LocalPlayer.Character.Powers.String.RemoteEvent:FireServer(unpack(args))
task.wait()
until (not game:GetService("Players"):FindFirstChild(_G.SelectedKillPlayer).Character:FindFirstChild("HumanoidRootPart")) or (game:GetService("Players"):FindFirstChild(_G.SelectedKillPlayer).Character.Humanoid.Health == 0) or (not _G.CampString) or (not game:GetService("Players"):FindFirstChild(_G.SelectedKillPlayer)) or table.find(anticamplisted,_G.SelectedKillPlayer)
task.wait(0.15)
local args = {
    [1] = getsenv(game:GetService("Players").LocalPlayer.Character.Powers.String).VTCjwbvx,
    [2] = "StringPower7"
}

game:GetService("Players").LocalPlayer.Character.Powers.String.RemoteEvent:FireServer(unpack(args))
task.wait(0.15)
local args = {
    [1] = getsenv(game:GetService("Players").LocalPlayer.Character.Powers.String).VTCjwbvx,
    [2] = "StringPower7"
}

game:GetService("Players").LocalPlayer.Character.Powers.String.RemoteEvent:FireServer(unpack(args))
end)
end
end)
end
end)


task.spawn(function()
while _G.CampString do task.wait(0.1)
pcall(function()
if not table.find(anticamplisted, _G.SelectedKillPlayer) then
repeat task.wait()
game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame = game:GetService("Workspace").Island8.Table.Chair.condimemay.CFrame * CFrame.new(0,-1,0)
task.wait(0.1)
until not _G.CampString or game:GetService("Players").LocalPlayer.Character.Humanoid.Sit == true or table.find(anticamplisted, _G.SelectedKillPlayer)
end
end)
end
end)

task.spawn(function()
while _G.CampString do task.wait(0.1)
pcall(function()
repeat task.wait()
pcall(function()
game:GetService("Players"):FindFirstChild(_G.SelectedKillPlayer).Character.HumanoidRootPart.CFrame = game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame * CFrame.new(0,0,-10)
end)
until not _G.CampString or table.find(anticamplisted, _G.SelectedKillPlayer)
end)
end
end)

else
_G.CampString = false
end
end)

magmatpball = Tabs.Player:AddToggle("magmatpballtoggle", {Title = "TP Magma Ball (Optional)", Default = false })
magmatpball:OnChanged(function()
if Options.magmatpballtoggle.Value == true then
_G.TPMAGMABALL = true

task.spawn(function()
while _G.TPMAGMABALL do task.wait(0.3)
pcall(function()
if _G.CampMagma and game:GetService("Players"):FindFirstChild(_G.SelectedKillPlayer) then
repeat task.wait(0.1)
for i, v in pairs(game:GetService("Workspace")[tostring(usingname)]:WaitForChild("Powers"):FindFirstChild("Magma"):FindFirstChild("Shots"):GetChildren()) do
if v.Name == "MagmaBall" then
v.CFrame = game:GetService("Players"):FindFirstChild(tostring(_G.SelectedKillPlayer)).Character.HumanoidRootPart.CFrame
end
end
until (not _G.TPMAGMABALL) or (not _G.CampMagma) or (not game:GetService("Players"):FindFirstChild(_G.SelectedKillPlayer)) or (game:GetService("Players").LocalPlayer.Character.Humanoid.Health == 0) or (game:GetService("Players"):WaitForChild(_G.SelectedKillPlayer).Character.Humanoid.Health == 0)
end
end)
end
end)

else
_G.TPMAGMABALL = false
end
end)

magmamgggg = Tabs.Player:AddToggle("magmamggggtoggle", {Title = "Magma Camp", Default = false })
magmamgggg:OnChanged(function()
if Options.magmamggggtoggle.Value == true then
_G.CampMagma = true

task.spawn(function()
while _G.CampMagma do task.wait(0.1)
pcall(function()
for i,v in pairs(game:GetService("Workspace"):GetChildren()) do task.wait(0.1)
if v.Name == _G.SelectedKillPlayer and _G.CampMagma == true then
pcall(function()
repeat task.wait(0.15)
local args = {
    [1] = getsenv(game:GetService("Players").LocalPlayer.Character.Powers.Magma).VTCmel,
    [2] = "MagmaPower1",
    [3] = "StartCharging",
    [4] = CFrame.new(-123.28974914550781, 213, -871.10595703125, 0.9992225766181946, -0.009072019718587399, 0.038368139415979385, -0, 0.9731666445732117, 0.23010201752185822, -0.03942607715725899, -0.22992312908172607, 0.9724099040031433),
    [5] = workspace:WaitForChild("IslandTown"):WaitForChild("Beach"):WaitForChild("Beach"),
    [7] = "Right"
}

game:GetService("Players").LocalPlayer.Character.Powers.Magma.RemoteEvent:FireServer(unpack(args))
task.wait()
local args = {
    [1] = getsenv(game:GetService("Players").LocalPlayer.Character.Powers.Magma).VTCmel,
    [2] = "MagmaPower1",
    [3] = "StopCharging",
    [4] = game:GetService("Workspace"):FindFirstChild(_G.SelectedKillPlayer).HumanoidRootPart.CFrame,
    [5] = workspace:WaitForChild("IslandTown"):WaitForChild("Beach"):WaitForChild("Beach"),
    [6] = 100
}

game:GetService("Players").LocalPlayer.Character.Powers.Magma.RemoteEvent:FireServer(unpack(args))
until (not _G.CampMagma) or (not game:GetService("Players"):FindFirstChild(_G.SelectedKillPlayer))
end)
end
end
end)
end
end)
else
_G.CampMagma = false
end
end)

task.spawn(function()
while task.wait(1) do 
pcall(function()
game:GetService("Workspace").Island8.Table.Chair.condimemay.CFrame = _G.chaircframeh 
end)
end
end)

Tabs.Player:AddSection("					    --Teleport Camp--")
cvbvfsx = Tabs.Player:AddSlider("gkhlsmxxx", {
    Title = "Teleport Distance",
    Description = "Change this for adjusting camp distance",
    Default = 15,
    Min = 0,
    Max = 100,
    Rounding = 0,
    Callback = function(distancecagreva)
            campdis = tonumber(distancecagreva)
        end
    })

 asdzx = Tabs.Player:AddDropdown("asdzx", {
        Title = "Tele Method",
        Values = {"Above","Behind"},
        Multi = false,
        Default = "Above",
    })


    asdzx:OnChanged(function(fuckasdzz)
_G.telecamethod = fuckasdzz
end)

aweopcz = Tabs.Player:AddToggle("aweopcztoggle", {Title = "Auto Teleport (*)", Default = false })
aweopcz:OnChanged(function()
if Options.aweopcztoggle.Value == true then
_G.wqesorry = true

task.spawn(function()
while _G.wqesorry do task.wait()
pcall(function()
if game:GetService("Players"):FindFirstChild(_G.SelectedKillPlayer) then
if game:GetService("Players"):FindFirstChild(_G.SelectedKillPlayer).Character.HumanoidRootPart.Position.Y > 200 and _G.telecamethod == "Behind" then
game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame = game:GetService("Players"):FindFirstChild(_G.SelectedKillPlayer).Character.HumanoidRootPart.CFrame * CFrame.new(0,0,campdis)
elseif game:GetService("Players"):FindFirstChild(_G.SelectedKillPlayer).Character.HumanoidRootPart.Position.Y > 200 and _G.telecamethod == "Above" then
game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame = game:GetService("Players"):FindFirstChild(_G.SelectedKillPlayer).Character.HumanoidRootPart.CFrame * CFrame.new(0,campdis,0)
elseif game:GetService("Players"):FindFirstChild(_G.SelectedKillPlayer).Character.HumanoidRootPart.Position.Y < 200 then
game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame = game:GetService("Workspace")["SafeZoneOuterSpacePart"].CFrame * CFrame.new(0, 5, 0)
end
else
game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame = game:GetService("Workspace")["SafeZoneOuterSpacePart"].CFrame * CFrame.new(0, 5, 0)
end
end)
end
end)

task.spawn(function()
while _G.wqesorry do task.wait(0.1)
pcall(function()
repeat task.wait(0.1)
game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CanCollide = false
game:GetService("Players").LocalPlayer.Character.Torso.CanCollide = false
game:GetService("Players").LocalPlayer.Character.Head.CanCollide = false
game:GetService("Players").LocalPlayer.Character["Right Arm"].CanCollide = false
game:GetService("Players").LocalPlayer.Character["Left Arm"].CanCollide = false
game:GetService("Players").LocalPlayer.Character["Right Leg"].CanCollide = false
game:GetService("Players").LocalPlayer.Character["Left Leg"].CanCollide = false
until _G.wqesorry == false
task.wait()
game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CanCollide = true
game:GetService("Players").LocalPlayer.Character.Torso.CanCollide = true
game:GetService("Players").LocalPlayer.Character.Head.CanCollide = true
game:GetService("Players").LocalPlayer.Character["Right Arm"].CanCollide = true
game:GetService("Players").LocalPlayer.Character["Left Arm"].CanCollide = true
game:GetService("Players").LocalPlayer.Character["Right Leg"].CanCollide = true
game:GetService("Players").LocalPlayer.Character["Left Leg"].CanCollide = true
end)
end
end)

else
_G.wqesorry = false
end
end)


Tabs.Player:AddSection("                              Fruit Camp")

darksec = Tabs.Player:AddToggle("darksectoggle", {Title = "Dark Camp", Default = false })
darksec:OnChanged(function()
if Options.darksectoggle.Value == true then
_G.CampDark = true
while _G.CampDark do task.wait(0.1)
pcall(function()
for i,v in pairs(game:GetService("Workspace"):GetChildren()) do
if v.Name == _G.SelectedKillPlayer and _G.CampDark == true then
    pcall(function()
repeat task.wait(0.15)
local args = {
    [1] = getsenv(game:GetService("Players").LocalPlayer.Character.Powers.Dark).VTCjebaj,
    [2] = "DarkPower4",
    [3] = "StartCharging",
    [4] = CFrame.new(-102.340569, 213, 215.227097, -0.982314944, -0.125758141, 0.138716429, -0, 0.74086374, 0.671655476, -0.187236086, 0.659777224, -0.727761507),
    [5] = workspace:WaitForChild("IslandWindmill"):WaitForChild("OutterDune"):WaitForChild("Beach"),
    [7] = "Right"
}

game:GetService("Players").LocalPlayer.Character.Powers.Dark.RemoteEvent:FireServer(unpack(args))
task.wait()
local args = {
    [1] = getsenv(game:GetService("Players").LocalPlayer.Character.Powers.Dark).VTCjebaj,
    [2] = "DarkPower4",
    [3] = "StopCharging",
    [4] = game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame * CFrame.new(0,100,0),
    [5] = workspace:WaitForChild("IslandGrassy"):WaitForChild("Base"):WaitForChild("Path"):WaitForChild("Union"),
    [6] = 100
}

game:GetService("Players").LocalPlayer.Character.Powers.Dark.RemoteEvent:FireServer(unpack(args))
until not _G.CampDark or not game:GetService("Players"):FindFirstChild(_G.SelectedKillPlayer)
end)
end
end
end)
end
else
_G.CampDark = false
end
end)


vamppppp = Tabs.Player:AddToggle("vamppppptoggle", {Title = "Vamp Camp", Default = false })
vamppppp:OnChanged(function()
if Options.vamppppptoggle.Value == true then
_G.CampVamp = true
while _G.CampVamp do task.wait(0.1)
pcall(function()
for i,v in pairs(game:GetService("Workspace"):GetChildren()) do
if v.Name == _G.SelectedKillPlayer and _G.CampVamp == true then
    pcall(function()
repeat task.wait(0.15)
local args = {
    [1] = getsenv(game:GetService("Players").LocalPlayer.Character.Powers.Vampire).VTCjwf,
    [2] = "VampirePower5",
    [3] = "StartCharging",
    [4] = CFrame.new(-391.38922119140625, 213, -232.140625, 0.5274614095687866, -0.7214826345443726, 0.4486061632633209, -1.4901161193847656e-08, 0.5280334949493408, 0.8492236733436584, -0.8495790362358093, -0.44793272018432617, 0.2785172760486603),
    [5] = workspace:WaitForChild("IslandWindmill"):WaitForChild("Beach"):WaitForChild("Beach"),
    [9] = "Left"
}

game:GetService("Players").LocalPlayer.Character.Powers.Vampire.RemoteEvent:FireServer(unpack(args))
task.wait()
local args = {
    [1] = getsenv(game:GetService("Players").LocalPlayer.Character.Powers.Vampire).VTCjwf,
    [2] = "VampirePower5",
    [3] = "StopCharging",
    [4] = game:GetService("Workspace"):FindFirstChild(_G.SelectedKillPlayer).HumanoidRootPart.CFrame,
    [5] = workspace:WaitForChild("IslandWindmill"):WaitForChild("OutterDune"):WaitForChild("Beach"),
    [6] = 100
}

game:GetService("Players").LocalPlayer.Character.Powers.Vampire.RemoteEvent:FireServer(unpack(args))
until not _G.CampVamp or not game:GetService("Players"):FindFirstChild(_G.SelectedKillPlayer)
end)
end
end
end)
end
else
_G.CampVamp = false
end
end)

flareee = Tabs.Player:AddToggle("flareeetoggle", {Title = "Flare Camp", Default = false })
flareee:OnChanged(function()
if Options.flareeetoggle.Value == true then
_G.CampFlare = true
while _G.CampFlare do task.wait(0.1)
pcall(function()
for i,v in pairs(game:GetService("Workspace"):GetChildren()) do
if v.Name == _G.SelectedKillPlayer and _G.CampFlare == true then
pcall(function()
repeat task.wait(0.15)
local args = {
    [1] = getsenv(game:GetService("Players").LocalPlayer.Character.Powers.Flare).VTCmgwcm,
    [2] = "FlarePower2",
    [3] = "StartCharging",
    [4] = CFrame.new(-143.0747833251953, 218, -994.1463012695312, 0.9986038208007812, -0.013327144086360931, 0.051116567105054855, 9.313225746154785e-10, 0.9676525592803955, 0.2522869408130646, -0.05282533913850784, -0.2519347071647644, 0.966301441192627),
    [5] = workspace:WaitForChild("IslandTown"):WaitForChild("GrassUplift"):WaitForChild("Union"),
    [7] = "Left"
}

game:GetService("Players").LocalPlayer.Character.Powers.Flare.RemoteEvent:FireServer(unpack(args))
task.wait()
local args = {
    [1] = getsenv(game:GetService("Players").LocalPlayer.Character.Powers.Flare).VTCmgwcm,
    [2] = "FlarePower2",
    [3] = "StopCharging",
    [4] = game:GetService("Workspace"):FindFirstChild(_G.SelectedKillPlayer).HumanoidRootPart.CFrame,
    [5] = workspace:WaitForChild("IslandTown"):WaitForChild("GrassUplift"):WaitForChild("Union"),
    [6] = 100
}

game:GetService("Players").LocalPlayer.Character.Powers.Flare.RemoteEvent:FireServer(unpack(args))
until not _G.CampFlare or not game:GetService("Players"):FindFirstChild(_G.SelectedKillPlayer)
end)
end
end
end)
end
else
_G.CampFlare = false
end
end)

snowww = Tabs.Player:AddToggle("snowwwtoggle", {Title = "Snow Camp", Default = false })
snowww:OnChanged(function()
if Options.snowwwtoggle.Value == true then
_G.CampSnow = true
while _G.CampSnow do task.wait(0.1)
pcall(function()
for i,v in pairs(game:GetService("Workspace"):GetChildren()) do
if v.Name == _G.SelectedKillPlayer and _G.CampSnow == true then
    pcall(function()
repeat task.wait(0.15)
local args = {
    [1] = getsenv(game:GetService("Players").LocalPlayer.Character.Powers.Snow).VTCqkxtn,
    [2] = "SnowPower9",
    [3] = "StartCharging",
    [4] = CFrame.new(709.24609375, 238, 1224.901611328125, -0.9550395011901855, -0.07896141707897186, 0.28577059507369995, -5.080631026999072e-09, 0.9638818502426147, 0.26633062958717346, -0.29647889733314514, 0.2543562650680542, -0.9205450415611267),
    [5] = workspace:WaitForChild("IslandGrassy"):WaitForChild("Base"):WaitForChild("DirtGrass"):WaitForChild("Grass"):WaitForChild("Grass"),
    [9] = "Right"
}

game:GetService("Players").LocalPlayer.Character.Powers.Snow.RemoteEvent:FireServer(unpack(args))
task.wait()
local args = {
    [1] = getsenv(game:GetService("Players").LocalPlayer.Character.Powers.Snow).VTCqkxtn,
    [2] = "SnowPower9",
    [3] = "StopCharging",
    [4] = game:GetService("Workspace"):FindFirstChild(_G.SelectedKillPlayer).HumanoidRootPart.CFrame,
    [5] = workspace:WaitForChild("IslandGrassy"):WaitForChild("Base"):WaitForChild("DirtGrass"):WaitForChild("Grass"):WaitForChild("Grass"),
    [6] = 100,
    [7] = 100
}

game:GetService("Players").LocalPlayer.Character.Powers.Snow.RemoteEvent:FireServer(unpack(args))
until not _G.CampSnow or not game:GetService("Players"):FindFirstChild(_G.SelectedKillPlayer)
end)
end
end
end)
end
else
_G.CampSnow = false
end
end)

chilll = Tabs.Player:AddToggle("chillltoggle", {Title = "Chilly Camp", Default = false })
chilll:OnChanged(function()
if Options.chillltoggle.Value == true then
_G.CampChilly = true
while _G.CampChilly do task.wait(0.1)
pcall(function()
for i,v in pairs(game:GetService("Workspace"):GetChildren()) do
if v.Name == _G.SelectedKillPlayer and _G.CampChilly == true then
    pcall(function()
repeat task.wait(0.15)
local args = {
    [1] = getsenv(game:GetService("Players").LocalPlayer.Character.Powers.Chilly).VTCewddsfe,
    [2] = "ChillyPower5",
    [3] = "StartCharging",
    [4] = CFrame.new(-1084.59033, -9763.44336, 501.375885, -0, 0.995015204, 0.0997241139, 0.0880244896, -0.099337019, 0.991152883, 0.996118307, 0.00877816416, -0.08758571),
    [5] = workspace:WaitForChild("IslandPirate"):WaitForChild("Base"):WaitForChild("Beach"),
    [7] = "Right"
}

game:GetService("Players").LocalPlayer.Character.Powers.Chilly.RemoteEvent:FireServer(unpack(args))
task.wait()
local args = {
    [1] = getsenv(game:GetService("Players").LocalPlayer.Character.Powers.Chilly).VTCewddsfe,
    [2] = "ChillyPower5",
    [3] = "StopCharging",
    [4] = game:GetService("Workspace"):FindFirstChild(_G.SelectedKillPlayer).HumanoidRootPart.CFrame,
    [5] = workspace:WaitForChild("IslandPirate"):WaitForChild("Base"):WaitForChild("Beach"),
    [6] = 100
}

game:GetService("Players").LocalPlayer.Character.Powers.Chilly.RemoteEvent:FireServer(unpack(args))
until not _G.CampChilly or not game:GetService("Players"):FindFirstChild(_G.SelectedKillPlayer)
end)
end
end
end)
end
else
_G.CampChilly = false
end
end)


bombbbb = Tabs.Player:AddToggle("bombbbbtoggle", {Title = "Bomb Camp", Default = false })
bombbbb:OnChanged(function()
if Options.bombbbbtoggle.Value == true then
_G.CampBomb = true
while _G.CampBomb do task.wait(0.1)
pcall(function()
for i,v in pairs(game:GetService("Workspace"):GetChildren()) do
if v.Name == _G.SelectedKillPlayer and _G.CampBomb == true then
    pcall(function()
repeat task.wait(0.15)
local args = {
    [1] = getsenv(game:GetService("Players").LocalPlayer.Character.Powers.Bomb).VTCcpkghc,
    [2] = "BombPower5",
    [3] = "StartCharging",
    [4] = CFrame.new(-1039.5162353515625, 214, 1886.921875, 0.2717759311199188, 0.3374144434928894, -0.9012709856033325, -0, 0.9365211129188538, 0.35061126947402954, 0.9623605608940125, -0.09528770297765732, 0.254523903131485),
    [5] = workspace:WaitForChild("IslandCaver"):WaitForChild("Grass"):WaitForChild("Grass"),
    [7] = "Left"
}

game:GetService("Players").LocalPlayer.Character.Powers.Bomb.RemoteEvent:FireServer(unpack(args))
task.wait()
local args = {
    [1] = getsenv(game:GetService("Players").LocalPlayer.Character.Powers.Bomb).VTCcpkghc,
    [2] = "BombPower5",
    [3] = "StopCharging",
    [4] = game:GetService("Workspace"):FindFirstChild(_G.SelectedKillPlayer).HumanoidRootPart.CFrame,
    [5] = workspace:WaitForChild("IslandCaver"):WaitForChild("Grass"):WaitForChild("Grass"),
    [6] = 100
}

game:GetService("Players").LocalPlayer.Character.Powers.Bomb.RemoteEvent:FireServer(unpack(args))
until not _G.CampBomb or not game:GetService("Players"):FindFirstChild(_G.SelectedKillPlayer)
end)
end
end
end)
end
else
_G.CampBomb = false
end
end)

gassss = Tabs.Player:AddToggle("gasssstoggle", {Title = "Gas Camp", Default = false })
gassss:OnChanged(function()
if Options.gasssstoggle.Value == true then
_G.CampGas = true
while _G.CampGas do task.wait(0.1)
pcall(function()
for i,v in pairs(game:GetService("Workspace"):GetChildren()) do
if v.Name == _G.SelectedKillPlayer and _G.CampGas == true then
    pcall(function()
repeat task.wait(0.15)
local args = {
    [1] = getsenv(game:GetService("Players").LocalPlayer.Character.Powers.Gas).VTCtb,
    [2] = "GasPower4",
    [3] = "StartCharging",
    [4] = CFrame.new(-1689.326904296875, 213, 9976.861328125, 0.9961590766906738, -0.06699453294277191, 0.056381046772003174, -0, 0.6438990831375122, 0.7651103138923645, -0.08756192773580551, -0.7621715664863586, 0.6414259076118469),
    [5] = workspace:WaitForChild("IslandKai"):WaitForChild("Folder"):WaitForChild("FourIce"),
    [7] = "Right"
}

game:GetService("Players").LocalPlayer.Character.Powers.Gas.RemoteEvent:FireServer(unpack(args))
task.wait()
local args = {
    [1] = getsenv(game:GetService("Players").LocalPlayer.Character.Powers.Gas).VTCtb,
    [2] = "GasPower4",
    [3] = "StopCharging",
    [4] = game:GetService("Workspace"):FindFirstChild(_G.SelectedKillPlayer).HumanoidRootPart.CFrame,
    [5] = workspace:WaitForChild("IslandKai"):WaitForChild("Folder"):WaitForChild("FourIce"),
    [6] = 100
}

game:GetService("Players").LocalPlayer.Character.Powers.Gas.RemoteEvent:FireServer(unpack(args))
until not _G.CampGas or not game:GetService("Players"):FindFirstChild(_G.SelectedKillPlayer)
end)
end
end
end)
end
else
_G.CampGas = false
end
end)

lightsec = Tabs.Player:AddToggle("lightsectoggle", {Title = "Light Camp", Default = false })
lightsec:OnChanged(function()
if Options.lightsectoggle.Value == true then
_G.CampLight = true
while _G.CampLight do task.wait(0.1)
pcall(function()
for i,v in pairs(game:GetService("Workspace"):GetChildren()) do
if v.Name == _G.SelectedKillPlayer and _G.CampLight == true then
    pcall(function()
repeat task.wait(0.15)
local args = {
    [1] = getsenv(game:GetService("Players").LocalPlayer.Character.Powers.Light).VTCrv,
    [2] = "LightPower2",
    [3] = "StartCharging",
    [4] = CFrame.new(0,0,0),
    [5] = workspace.IslandCaver.Stones.Stone,
    [9] = "Right"
}

game:GetService("Players").LocalPlayer.Character.Powers.Light.RemoteEvent:FireServer(unpack(args))
task.wait()
local args = {
    [1] = getsenv(game:GetService("Players").LocalPlayer.Character.Powers.Light).VTCrv,
    [2] = "LightPower2",
    [3] = "StopCharging",
    [4] = game:GetService("Workspace"):FindFirstChild(_G.SelectedKillPlayer).HumanoidRootPart.CFrame,
    [5] = workspace.IslandCaver.Stones.Stone,
    [6] = 100
}

game:GetService("Players").LocalPlayer.Character.Powers.Light.RemoteEvent:FireServer(unpack(args))
until not _G.CampLight or not game:GetService("Players"):FindFirstChild(_G.SelectedKillPlayer)
end)
end
end
end)
end
else
_G.CampLight = false
end
end)

plasmasec = Tabs.Player:AddToggle("plasmasectoggle", {Title = "Plasma Camp", Default = false })
plasmasec:OnChanged(function()
if Options.plasmasectoggle.Value == true then
_G.CampPlasma = true
while _G.CampPlasma do task.wait(0.1)
pcall(function()
for i,v in pairs(game:GetService("Workspace"):GetChildren()) do
if v.Name == _G.SelectedKillPlayer and _G.CampPlasma == true then
    pcall(function()
repeat task.wait()
                    local args = {
                        [1] = getsenv(game:GetService("Players").LocalPlayer.Character.Powers.Plasma).VTCpwd,
                        [2] = "PlasmaPower4",
                        [3] = "StartCharging",
                        [4] = Vector3.new(720, 238, 1194)
                    }
                    game:GetService("Players").LocalPlayer.Character.Powers.Plasma.RemoteEvent:FireServer(unpack(args))
task.wait(0.15)
                    local args = {
                        [1] = getsenv(game:GetService("Players").LocalPlayer.Character.Powers.Plasma).VTCpwd,
                        [2] = "PlasmaPower4",
                        [3] = "Attack",
			[4] = Vector3.new(game:GetService("Workspace"):FindFirstChild(_G.SelectedKillPlayer).HumanoidRootPart.Position.X, game:GetService("Workspace"):FindFirstChild(_G.SelectedKillPlayer).HumanoidRootPart.Position.Y, game:GetService("Workspace"):FindFirstChild(_G.SelectedKillPlayer).HumanoidRootPart.Position.Z),
                        [5] = game:GetService("Players"):WaitForChild(_G.SelectedKillPlayer).Character.HumanoidRootPart,
                        [6] = 100
                    }
                    game:GetService("Players").LocalPlayer.Character.Powers.Plasma.RemoteEvent:FireServer(unpack(args))
task.wait()
                    local args = {
                        [1] = getsenv(game:GetService("Players").LocalPlayer.Character.Powers.Plasma).VTCpwd,
                        [2] = "PlasmaPower4",
                        [3] = "Attack",
			[4] = Vector3.new(game:GetService("Workspace"):FindFirstChild(_G.SelectedKillPlayer).HumanoidRootPart.Position.X, game:GetService("Workspace"):FindFirstChild(_G.SelectedKillPlayer).HumanoidRootPart.Position.Y, game:GetService("Workspace"):FindFirstChild(_G.SelectedKillPlayer).HumanoidRootPart.Position.Z),
                        [5] = game:GetService("Players"):WaitForChild(_G.SelectedKillPlayer).Character.HumanoidRootPart,
                        [6] = 100
                    }
                    game:GetService("Players").LocalPlayer.Character.Powers.Plasma.RemoteEvent:FireServer(unpack(args))
task.wait()
                    local args = {
                        [1] = getsenv(game:GetService("Players").LocalPlayer.Character.Powers.Plasma).VTCpwd,
                        [2] = "PlasmaPower4",
                        [3] = "Attack",
			[4] = Vector3.new(game:GetService("Workspace"):FindFirstChild(_G.SelectedKillPlayer).HumanoidRootPart.Position.X, game:GetService("Workspace"):FindFirstChild(_G.SelectedKillPlayer).HumanoidRootPart.Position.Y, game:GetService("Workspace"):FindFirstChild(_G.SelectedKillPlayer).HumanoidRootPart.Position.Z),
                        [5] = game:GetService("Players"):WaitForChild(_G.SelectedKillPlayer).Character.HumanoidRootPart,
                        [6] = 100
                    }
                    game:GetService("Players").LocalPlayer.Character.Powers.Plasma.RemoteEvent:FireServer(unpack(args))
until not _G.CampPlasma or not game:GetService("Players"):FindFirstChild(_G.SelectedKillPlayer)
end)
end
end
end)
end
else
_G.CampPlasma = false
end
end)

phoenixsec = Tabs.Player:AddToggle("phoenixsectoggle", {Title = "Phoenix Camp", Default = false })
phoenixsec:OnChanged(function()
if Options.phoenixsectoggle.Value == true then
_G.CampPhoenix = true
while _G.CampPhoenix do task.wait(0.1)
pcall(function()
for i,v in pairs(game:GetService("Workspace"):GetChildren()) do
if v.Name == _G.SelectedKillPlayer and _G.CampPhoenix == true then
    pcall(function()
repeat task.wait(0.15)
local args = {
    [1] = getsenv(game:GetService("Players").LocalPlayer.Character.Powers.Phoenix).VTCytb,
    [2] = "PhoenixPower9",
    [3] = "StartCharging",
    [4] = CFrame.new(690.3527221679688, 238.20001220703125, 1188.52685546875, -0.2054780274629593, -0.3733275532722473, 0.9046576023101807, 1.4742429499392529e-10, 0.9243822693824768, 0.38146740198135376, -0.9786617159843445, 0.07838317006826401, -0.18994025886058807),
    [5] = workspace:WaitForChild("IslandGrassy"):WaitForChild("Base"):WaitForChild("Path"):WaitForChild("Union"),
    [7] = "Right"
}

game:GetService("Players").LocalPlayer.Character.Powers.Phoenix.RemoteEvent:FireServer(unpack(args))
task.wait()
local args = {
    [1] = getsenv(game:GetService("Players").LocalPlayer.Character.Powers.Phoenix).VTCytb,
    [2] = "PhoenixPower9",
    [3] = "StopCharging",
    [4] = game:GetService("Workspace"):FindFirstChild(_G.SelectedKillPlayer).HumanoidRootPart.CFrame,
    [5] = workspace:WaitForChild("IslandGrassy"):WaitForChild("Base"):WaitForChild("Path"):WaitForChild("Union"),
    [6] = 100
}

game:GetService("Players").LocalPlayer.Character.Powers.Phoenix.RemoteEvent:FireServer(unpack(args))
until not _G.CampPhoenix or not game:GetService("Players"):FindFirstChild(_G.SelectedKillPlayer)
end)
end
end
end)
end
else
_G.CampPhoenix = false
end
end)







Tabs.Shop:AddSection("						  -----Drinks-----")

drinkstype = Tabs.Shop:AddDropdown("drinkstype", {
        Title = "Select Drinks",
        Values = {"Smoothie","Cider","Juice","Lemonade","Smoothie+","Cider+","Juice+","Lemonade+"},
        Multi = false,
        Default = "",
    })


drinkstype:OnChanged(function(typepzp)
_G.drinktret = tostring(typepzp)
end)

drinkamount = Tabs.Shop:AddInput("drinkamount", {
	Title = "Insert Amount:",
	Default = "",
	Placeholder = "Insert Here",
	Numeric = true, -- Only allows numbers
	Finished = false, -- Only calls callback when you press enter
	Callback = function()
	end
})
drinkamount:OnChanged(function()
task.wait(0.1)
_G.tretgmm = tonumber(drinkamount.Value)
end)

Tabs.Shop:AddButton({
        Title = "Buy Drinks (Fast)",
        Description = "Buy selected drinks",
        Callback = function()
if _G.drinktret == "Smoothie" or _G.drinktret == "Cider" or _G.drinktret == "Juice" or _G.drinktret == "Lemonade" then
for i = 1, _G.tretgmm do
    local args = {
        [1] = _G.drinktret
    }
    
workspace.Merchants.DrinkMerchant.Clickable.Retum:FireServer(unpack(args))
end
elseif _G.drinktret == "Smoothie+" or _G.drinktret == "Cider+" or _G.drinktret == "Juice+" or _G.drinktret == "Lemonade+" then
for i = 1, _G.tretgmm do
    local args = {
        [1] = _G.drinktret
    }
    
workspace.Merchants.BetterDrinkMerchant.Clickable.Retum:FireServer(unpack(args))
end
end
end
    })

Tabs.Shop:AddButton({
        Title = "Buy Drinks (Slow)",
        Description = "Buy selected drinks",
        Callback = function()
if _G.drinktret == "Smoothie" or _G.drinktret == "Cider" or _G.drinktret == "Juice" or _G.drinktret == "Lemonade" then
for i = 1, tonumber(_G.tretgmm) do task.wait(0.1)
    local args = {
        [1] = _G.drinktret
    }
    
workspace.Merchants.DrinkMerchant.Clickable.Retum:FireServer(unpack(args))
end
elseif _G.drinktret == "Smoothie+" or _G.drinktret == "Cider+" or _G.drinktret == "Juice+" or _G.drinktret == "Lemonade+" then
for i = 1,tonumber(_G.tretgmm) do task.wait(0.1)
    local args = {
        [1] = _G.drinktret
    }
    
workspace.Merchants.BetterDrinkMerchant.Clickable.Retum:FireServer(unpack(args))
end
end
end
    })

Tabs.Shop:AddButton({
        Title = "Instant Drink (Fast)",
        Description = "Fast Drink",
        Callback = function()

for i,v in pairs(game:GetService("Players").LocalPlayer.Backpack:GetChildren()) do
if string.find(v.Name, "Juice") or string.find(v.Name, "Milk") or string.find(v.Name, "Cider") or string.find(v.Name, "Lemonade") or string.find(v.Name, "Smoothie") or string.find(v.Name, "Golden") then
v.Parent = game:GetService("Players").LocalPlayer.Character
end
end
for i,v in pairs(game:GetService("Players").LocalPlayer.Character:GetChildren()) do
if string.find(v.Name, "Juice") or string.find(v.Name, "Milk") or string.find(v.Name, "Cider") or string.find(v.Name, "Lemonade") or string.find(v.Name, "Smoothie") or string.find(v.Name, "Golden") then
v:Activate()
v:Activate()
v:Activate()
v:Activate()
v:Activate()
v:Activate()
v:Destroy()
end
end

end
    })

Tabs.Shop:AddButton({
        Title = "Instant Drink (Slow)",
        Description = "Slow Drink",
        Callback = function()
for i,v in pairs(game:GetService("Players").LocalPlayer.Backpack:GetChildren()) do
if string.find(v.Name, "Juice") or string.find(v.Name, "Milk") or string.find(v.Name, "Cider") or string.find(v.Name, "Lemonade") or string.find(v.Name, "Smoothie") or string.find(v.Name, "Golden") then
v.Parent = game:GetService("Players").LocalPlayer.Character
end
end
for i,v in pairs(game:GetService("Players").LocalPlayer.Character:GetChildren()) do task.wait(0.1)
if string.find(v.Name, "Juice") or string.find(v.Name, "Milk") or string.find(v.Name, "Cider") or string.find(v.Name, "Lemonade") or string.find(v.Name, "Smoothie") or string.find(v.Name, "Golden") then
v:Activate()
v:Activate()
v:Activate()
v:Activate()
v:Activate()
v:Activate()
v:Destroy()
end
end

end
    })






Tabs.Shop:AddSection("						  -----Weapon-----")
Tabs.Shop:AddSection("						  	   --Melee--")
Tabs.Shop:AddButton({
        Title = "Seastone Cestus (Fake Equipment)",
        Description = "Requires 500 Melee",
        Callback = function()
if game:GetService("Players").LocalPlayer.Backpack:FindFirstChild("Melee") or game:GetService("Players").LocalPlayer.Backpack:FindFirstChild("Table Kick") or game:GetService("Players").LocalPlayer.Backpack:FindFirstChild("Black Leg") or game:GetService("Players").LocalPlayer.Backpack:FindFirstChild("Seastone Cestus") or game:GetService("Players").LocalPlayer.Backpack:FindFirstChild("Aqua Staff") then
if game:GetService("Workspace").UserData["User_"..tostring(usingid)].Data.MeleeLevel.Value >= 500 then
pcall(function()
    local A_1 = "Seastone Cestus"
    local Event = game:GetService("Workspace").UserData["User_"..usingid].UpdateMelee
    Event:FireServer(A_1)
end)
Fluent:Notify({
    Title = "Saluna Shop Notify",
    Content = "Equipped Seastone Cestus",
    Duration = 5
})
else
Fluent:Notify({
    Title = "Saluna Shop Notify",
    Content = "Your Melee Level Is Lower Than 500",
    Duration = 5
})
end
else
Fluent:Notify({
    Title = "Saluna Shop Notify",
    Content = "Please Spawn",
    Duration = 5
})
end
        end
    })

    Tabs.Shop:AddButton({
        Title = "Aqua Staff (Fake Equipment)",
        Description = "Requires 500 Melee",
        Callback = function()
if game:GetService("Players").LocalPlayer.Backpack:FindFirstChild("Melee") or game:GetService("Players").LocalPlayer.Backpack:FindFirstChild("Table Kick") or game:GetService("Players").LocalPlayer.Backpack:FindFirstChild("Black Leg") or game:GetService("Players").LocalPlayer.Backpack:FindFirstChild("Seastone Cestus") or game:GetService("Players").LocalPlayer.Backpack:FindFirstChild("Aqua Staff") then
if game:GetService("Workspace").UserData["User_"..tostring(usingid)].Data.MeleeLevel.Value >= 500 then
pcall(function()
    local A_1 = "Aqua Staff"
    local Event = game:GetService("Workspace").UserData["User_"..usingid].UpdateMelee
    Event:FireServer(A_1)
end)
Fluent:Notify({
    Title = "Saluna Shop Notify",
    Content = "Equipped Aqua Staff",
    Duration = 5
})
else
Fluent:Notify({
    Title = "Saluna Shop Notify",
    Content = "Your Melee Level Is Lower Than 500",
    Duration = 5
})
end
else
Fluent:Notify({
    Title = "Saluna Shop Notify",
    Content = "Please Spawn",
    Duration = 5
})
end
        end
    })


Tabs.Shop:AddSection("						  	  --Sword--")
    Tabs.Shop:AddButton({
        Title = "Dagger",
        Description = "Requires 1,000 Beries",
        Callback = function()
if game:GetService("Workspace").UserData["User_"..tostring(usingid)].Data.PlayerHas_Dagger.Value == false then

if game:GetService("Workspace").UserData["User_"..tostring(usingid)].Data.Cash.Value >= 1000 then
        local A_1 = "Dagger"
        local A_2 = 1000
        local Event = game:GetService("Workspace").Merchants.SwordMerchant.Clickable.Retum
        Event:FireServer(A_1, A_2)
Fluent:Notify({
    Title = "Saluna Shop Notify",
    Content = "You just bought Dagger",
    Duration = 5
})
else
Fluent:Notify({
    Title = "Saluna Shop Notify",
    Content = "Lack Of Beries",
    Duration = 5
})
end

else
Fluent:Notify({
    Title = "Saluna Shop Notify",
    Content = "You have already got Dagger",
    Duration = 5
})
end


        end
    })

    Tabs.Shop:AddButton({
        Title = "Wakizashi",
        Description = "Requires 5,000 Beries",
        Callback = function()
if game:GetService("Workspace").UserData["User_"..tostring(usingid)].Data.PlayerHas_Wakizashi.Value == false then

if game:GetService("Workspace").UserData["User_"..tostring(usingid)].Data.Cash.Value >= 5000 then
        local A_1 = "Wakizashi"
        local A_2 = 5000
        local Event = game:GetService("Workspace").Merchants.SwordMerchant.Clickable.Retum
        Event:FireServer(A_1, A_2)
Fluent:Notify({
    Title = "Saluna Shop Notify",
    Content = "You just bought Wakizashi",
    Duration = 5
})
else
Fluent:Notify({
    Title = "Saluna Shop Notify",
    Content = "Lack Of Beries",
    Duration = 5
})
end

else
Fluent:Notify({
    Title = "Saluna Shop Notify",
    Content = "You have already got Wakizashi",
    Duration = 5
})
end


        end
    })

    Tabs.Shop:AddButton({
        Title = "Tachi",
        Description = "Requires 7,500 Beries",
        Callback = function()
if game:GetService("Workspace").UserData["User_"..tostring(usingid)].Data.PlayerHas_Tachi.Value == false then

if game:GetService("Workspace").UserData["User_"..tostring(usingid)].Data.Cash.Value >= 7500 then
        local A_1 = "Tachi"
        local A_2 = 7500
        local Event = game:GetService("Workspace").Merchants.SwordMerchant.Clickable.Retum
        Event:FireServer(A_1, A_2)
Fluent:Notify({
    Title = "Saluna Shop Notify",
    Content = "You just bought Tachi",
    Duration = 5
})

else
Fluent:Notify({
    Title = "Saluna Shop Notify",
    Content = "Lack Of Beries",
    Duration = 5
})
end


else
Fluent:Notify({
    Title = "Saluna Shop Notify",
    Content = "You have already got Tachi",
    Duration = 5
})
end


        end
    })

    Tabs.Shop:AddButton({
        Title = "Katana",
        Description = "Requires 10,000 Beries",
        Callback = function()
if game:GetService("Workspace").UserData["User_"..tostring(usingid)].Data.PlayerHas_Katana.Value == false then
if game:GetService("Workspace").UserData["User_"..tostring(usingid)].Data.Cash.Value >= 10000 then

        local A_1 = "Katana"
        local A_2 = 10000
        local Event = game:GetService("Workspace").Merchants.SwordMerchant.Clickable.Retum
        Event:FireServer(A_1, A_2)
Fluent:Notify({
    Title = "Saluna Shop Notify",
    Content = "You just bought Katana",
    Duration = 5
})
else
Fluent:Notify({
    Title = "Saluna Shop Notify",
    Content = "Lack Of Beries",
    Duration = 5
})
end

else
Fluent:Notify({
    Title = "Saluna Shop Notify",
    Content = "You have already got Katana",
    Duration = 5
})
end


        end
    })

    Tabs.Shop:AddButton({
        Title = "Flail",
        Description = "Requires 50,000 Beries",
        Callback = function()
if game:GetService("Workspace").UserData["User_"..tostring(usingid)].Data.PlayerHas_Flail.Value == false then
if game:GetService("Workspace").UserData["User_"..tostring(usingid)].Data.Cash.Value >= 50000 then

        local A_1 = "Flail"
        local A_2 = 50000
        local Event = game:GetService("Workspace").Merchants.FlailMerchant.Clickable.Retum
        Event:FireServer(A_1, A_2)
Fluent:Notify({
    Title = "Saluna Shop Notify",
    Content = "You just bought Flail",
    Duration = 5
})
else
Fluent:Notify({
    Title = "Saluna Shop Notify",
    Content = "Lack Of Beries",
    Duration = 5
})
end

else
Fluent:Notify({
    Title = "Saluna Shop Notify",
    Content = "You have already got Flail",
    Duration = 5
})
end


        end
    })

    Tabs.Shop:AddButton({
        Title = "Krizma",
        Description = "Requires 80,000 Beries",
        Callback = function()
if game:GetService("Workspace").UserData["User_"..tostring(usingid)].Data.PlayerHas_Krizma.Value == false then
if game:GetService("Workspace").UserData["User_"..tostring(usingid)].Data.Cash.Value >= 80000 then

        local A_1 = "Krizma"
        local A_2 = 80000
        local Event = game:GetService("Workspace").Merchants.KrizmaMerch.Clickable.Retum
        Event:FireServer(A_1, A_2)
Fluent:Notify({
    Title = "Saluna Shop Notify",
    Content = "You just bought Krizma",
    Duration = 5
})
else
Fluent:Notify({
    Title = "Saluna Shop Notify",
    Content = "Lack Of Beries",
    Duration = 5
})
end

else
Fluent:Notify({
    Title = "Saluna Shop Notify",
    Content = "You have already got Krizma",
    Duration = 5
})
end


        end
    })

Tabs.Shop:AddSection("						  	  --Sniper--")

    Tabs.Shop:AddButton({
        Title = "Slingshot",
        Description = "Requires 1,000 Beries",
        Callback = function()
if game:GetService("Workspace").UserData["User_"..tostring(usingid)].Data.PlayerHas_Slingshot.Value == false then
if game:GetService("Workspace").UserData["User_"..tostring(usingid)].Data.Cash.Value >= 1000 then

        local A_1 = "Slingshot"
        local A_2 = 1000
        local Event = game:GetService("Workspace").Merchants.SniperMerchant.Clickable.Retum
        Event:FireServer(A_1, A_2)
Fluent:Notify({
    Title = "Saluna Shop Notify",
    Content = "You just bought Slingshot",
    Duration = 5
})
else
Fluent:Notify({
    Title = "Saluna Shop Notify",
    Content = "Lack Of Beries",
    Duration = 5
})
end

else
Fluent:Notify({
    Title = "Saluna Shop Notify",
    Content = "You have already got Slingshot",
    Duration = 5
})
end


        end
    })

    Tabs.Shop:AddButton({
        Title = "Stars",
        Description = "Requires 5,000 Beries",
        Callback = function()
if game:GetService("Workspace").UserData["User_"..tostring(usingid)].Data.PlayerHas_Stars.Value == false then
if game:GetService("Workspace").UserData["User_"..tostring(usingid)].Data.Cash.Value >= 5000 then

        local A_1 = "Stars"
        local A_2 = 5000
        local Event = game:GetService("Workspace").Merchants.SniperMerchant.Clickable.Retum
        Event:FireServer(A_1, A_2)
Fluent:Notify({
    Title = "Saluna Shop Notify",
    Content = "You just bought Stars",
    Duration = 5
})
else
Fluent:Notify({
    Title = "Saluna Shop Notify",
    Content = "Lack Of Beries",
    Duration = 5
})
end

else
Fluent:Notify({
    Title = "Saluna Shop Notify",
    Content = "You have already got Stars",
    Duration = 5
})
end


        end
    })

    Tabs.Shop:AddButton({
        Title = "Crossbow",
        Description = "Requires 7,500 Beries",
        Callback = function()
if game:GetService("Workspace").UserData["User_"..tostring(usingid)].Data.PlayerHas_Crossbow.Value == false then
if game:GetService("Workspace").UserData["User_"..tostring(usingid)].Data.Cash.Value >= 7500 then

        local A_1 = "Crossbow"
        local A_2 = 7500
        local Event = game:GetService("Workspace").Merchants.SniperMerchant.Clickable.Retum
        Event:FireServer(A_1, A_2)
Fluent:Notify({
    Title = "Saluna Shop Notify",
    Content = "You just bought Crossbow",
    Duration = 5
})
else
Fluent:Notify({
    Title = "Saluna Shop Notify",
    Content = "Lack Of Beries",
    Duration = 5
})
end

else
Fluent:Notify({
    Title = "Saluna Shop Notify",
    Content = "You have already got Crossbow",
    Duration = 5
})
end


        end
    })

    Tabs.Shop:AddButton({
        Title = "Flintlock",
        Description = "Requires 10,000 Beries",
        Callback = function()
if game:GetService("Workspace").UserData["User_"..tostring(usingid)].Data.PlayerHas_Flintlock.Value == false then
if game:GetService("Workspace").UserData["User_"..tostring(usingid)].Data.Cash.Value >= 10000 then

        local A_1 = "Flintlock"
        local A_2 = 10000
        local Event = game:GetService("Workspace").Merchants.SniperMerchant.Clickable.Retum
        Event:FireServer(A_1, A_2)
Fluent:Notify({
    Title = "Saluna Shop Notify",
    Content = "You just bought Flintlock",
    Duration = 5
})
else
Fluent:Notify({
    Title = "Saluna Shop Notify",
    Content = "Lack Of Beries",
    Duration = 5
})
end

else
Fluent:Notify({
    Title = "Saluna Shop Notify",
    Content = "You have already got Flintlock",
    Duration = 5
})
end


        end
    })

    Tabs.Shop:AddButton({
        Title = "Cannon Ball",
        Description = "Requires 400,000 Beries",
        Callback = function()
if game:GetService("Workspace").UserData["User_"..tostring(usingid)].Data["PlayerHas_Cannon Ball"].Value == false then
if game:GetService("Workspace").UserData["User_"..tostring(usingid)].Data.Cash.Value >= 400000 then

        local A_1 = "Cannon Ball"
        local A_2 = 400000
        local Event = game:GetService("Workspace").Merchants.HeavyWeaponsMerchant.Clickable.Retum
        Event:FireServer(A_1, A_2)
Fluent:Notify({
    Title = "Saluna Shop Notify",
    Content = "You just bought Cannon Ball",
    Duration = 5
})
else
Fluent:Notify({
    Title = "Saluna Shop Notify",
    Content = "Lack Of Beries",
    Duration = 5
})
end

else
Fluent:Notify({
    Title = "Saluna Shop Notify",
    Content = "You have already got Cannon Ball",
    Duration = 5
})
end


        end
    })














Tabs.Fruit:AddSection("				   -------Fruit Stuff-------")
Tabs.Fruit:AddSection("				--Auto Open Fruit Boxes--")
openboxunc = Tabs.Fruit:AddToggle("openboxunctoggle", {Title = "Auto Open Common/Uncommon Box", Default = false })
openboxunc:OnChanged(function()
if Options.openboxunctoggle.Value == true then
_G.opencommon = true
while _G.opencommon do task.wait(0.1)
pcall(function()
for i,v in pairs(game:GetService("Players").LocalPlayer.Backpack:GetChildren()) do
if v:IsA("Tool") and string.find(v.Name, "ommon") then
v.Parent = game:GetService("Players").LocalPlayer.Character
v:Activate()
end
end
end)
end
else
_G.opencommon = false
end
end)

openboxrare = Tabs.Fruit:AddToggle("openboxraretoggle", {Title = "Auto Open Rare/Ultra Box", Default = false })
openboxrare:OnChanged(function()
if Options.openboxraretoggle.Value == true then
_G.openrare = true
while _G.openrare do task.wait(0.1)
pcall(function()
for i,v in pairs(game:GetService("Players").LocalPlayer.Backpack:GetChildren()) do
if v:IsA("Tool") and string.find(v.Name, "Rare") then
v.Parent = game:GetService("Players").LocalPlayer.Character
v:Activate()
end
end
end)
end
else
_G.openrare = false
end
end)

Tabs.Fruit:AddSection("			   --Auto Store Devil Fruits--")

storefruitrare = Tabs.Fruit:AddToggle("storefruitraretoggle", {Title = "Auto Store Rare Fruit", Default = false })
storefruitrare:OnChanged(function()
if Options.storefruitraretoggle.Value == true then
_G.storeffrtrare = true

task.spawn(function()
while _G.storeffrtrare do task.wait(0.1)
pcall(function()
repeat task.wait(0.1)
for i, t in pairs(StoreRarefruit) do
for i, u in pairs(game:GetService("Players").LocalPlayer.Backpack:GetChildren()) do
if u.Name == t then
game:GetService("Players").LocalPlayer.Character.Humanoid:EquipTool(u)
task.wait()
storedf()
end
end
end
until not _G.storeffrtrare
end)
end
end)

else
_G.storeffrtrare = false
end
end)

storefruitultra = Tabs.Fruit:AddToggle("storefruitultratoggle", {Title = "Auto Store Ultra Fruit", Default = false })
storefruitultra:OnChanged(function()
if Options.storefruitultratoggle.Value == true then
_G.storeffrtultra = true

task.spawn(function()
while _G.storeffrtultra do task.wait(0.1)
pcall(function()
repeat task.wait(0.1)
for i, t in pairs(StoreUltrafruit) do
for i, u in pairs(game:GetService("Players").LocalPlayer.Backpack:GetChildren()) do
if u.Name == t then
game:GetService("Players").LocalPlayer.Character.Humanoid:EquipTool(u)
task.wait()
storedf()
end
end
end
until not _G.storeffrtultra
end)
end
end)


else
_G.storeffrtultra = false
end
end)

aurastq = Tabs.Fruit:AddToggle("aurastqtoggle", {Title = "Auto Store Aura Fruit", Default = false })
aurastq:OnChanged(function()
if Options.aurastqtoggle.Value == true then
_G.aurasto = true

task.spawn(function()
while _G.aurasto do task.wait(0.1)
pcall(function()
repeat task.wait(0.1)
for i,v in pairs(game:GetService("Players").LocalPlayer.Backpack:GetChildren()) do
if string.find(v.Name,"Fruit") and string.sub(v.Data.Value,tonumber(string.len(v.Data.Value)) - 1) == ",1" then
game:GetService("Players").LocalPlayer.Character.Humanoid:EquipTool(v)
task.wait()
storedf()
end
end
until not _G.aurasto
end)
end
end)

else
_G.aurasto = false
end
end)


Tabs.Fruit:AddSection("			   -------Auto Compass-------")
getcompass = Tabs.Fruit:AddToggle("getcompasstoggle", {Title = "Auto Get Compass", Default = false })
getcompass:OnChanged(function()
if Options.getcompasstoggle.Value == true then
getgenv().claim = true
else
getgenv().claim = false
end

while getgenv().claim do task.wait(0.1)
pcall(function()
workspace.Merchants.QuestMerchant.Clickable.Retum:FireServer("Claim10")
end)
task.wait(2)
end
end)

findcompass = Tabs.Fruit:AddToggle("findcompasstoggle", {Title = "Auto Find Compass", Default = false })
findcompass:OnChanged(function()
if Options.findcompasstoggle.Value == true then
getgenv().find = true
else
getgenv().find = false
end

while getgenv().find do task.wait()
pcall(function()
if game:GetService("Players").LocalPlayer.Backpack:FindFirstChild("Compass") then
game:GetService("Players").LocalPlayer.Character.Humanoid:EquipTool(game:GetService("Players").LocalPlayer.Backpack:FindFirstChild("Compass"))
end

for i,v in pairs(game:GetService("Players").LocalPlayer.Character:GetChildren()) do
if v.Name == "Compass" then
game:GetService("Players").LocalPlayer.Character.Humanoid.Sit = false
task.wait()
game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(v.Poser.Value)
end

if game:GetService("Players").LocalPlayer.Character:FindFirstChild("Compass") then
game:GetService("Players").LocalPlayer.Character.Compass:Activate()
end
end
task.wait(0.5)
end)
end

end)


Tabs.Farm:AddSection("				--Auto Cannon Farming--")

fastcannon = Tabs.Farm:AddToggle("fastcannontoggle", {Title = "Fast Cannon", Default = false })
fastcannon:OnChanged(function()
if Options.fastcannontoggle.Value == true then
_G.fastcannon = true
game:GetService("Players").LocalPlayer.Character.Humanoid:UnequipTools()

task.spawn(function()
while _G.fastcannon do task.wait(0.1)
pcall(function()
repeat task.wait(0.1) until game:GetService("Players").LocalPlayer.Character:FindFirstChild("Humanoid").Health ~= 0
and #game.Players.LocalPlayer.Backpack:GetChildren() > 0
pcall(function()
for i = 1,10 do task.wait()
game:GetService("Players").LocalPlayer.Character.Weapons:FireServer()
end
end)
repeat task.wait(0.1)
pcall(function()
task.wait(1)
for i, v in pairs(game:GetService("Players").LocalPlayer.Backpack:GetChildren()) do
if v.Name ~= "Cannon" and v.Name ~= "Cannon Ball" and not string.find(v.Name, "Box") and not string.find(v.Name, "Compass") then
v:Destroy()
end
end
end)
until (not _G.fastcannon) or (game:GetService("Players").LocalPlayer.Character:FindFirstChild("Humanoid").Health == 0) or (game:GetService("Players").LocalPlayer.Character:FindFirstChild("HumanoidRootPart").Position.Y > 211000) or (game:GetService("Players").LocalPlayer.Character:FindFirstChild("Humanoid"):GetState() == Enum.HumanoidStateType.Dead)
end)
end
end)


task.spawn(function()
while _G.fastcannon do task.wait(0.1)
pcall(function()
repeat task.wait(0.1)
    local cannonBalls = {}
for i,tuy in pairs(game:GetService("Players").LocalPlayer.Backpack:GetChildren()) do
if tuy.Name == "Cannon Ball" then task.wait()
table.insert(cannonBalls, tuy)
end
end
for i, asd in pairs(cannonBalls) do task.wait(0.75)
game:GetService("Players").LocalPlayer.Character.Humanoid:EquipTool(asd)
end
until not _G.autocannon
        end)
    end
end)

else
_G.fastcannon = false
task.wait()
game:GetService("Players").LocalPlayer.Character.Humanoid:UnequipTools()
end
end)

    Tabs.Farm:AddButton({
        Title = "Refresh BackPack",
        Description = "Refresh Your BackPack",
        Callback = function()
game:GetService("Players").LocalPlayer.Character.Humanoid:UnequipTools()
task.wait(0.1)
if game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.Position.Y < 211000 then
for i, v in pairs(game:GetService("Players").LocalPlayer.Backpack:GetChildren()) do
v:Destroy()
end
task.wait(0.1)
game:GetService("Players").LocalPlayer.Character.Weapons:FireServer()
end
        end
    })

Tabs.Farm:AddSection("	     Off Farm Before Off Fast-Cannon")

autocannonmob = Tabs.Farm:AddToggle("cannonmobtoggle", {Title = "Auto Farm Mobs (Cannon)", Default = false })
autocannonmob:OnChanged(function()
if Options.cannonmobtoggle.Value == true then
_G.autocannonslow = true

task.spawn(function() -- autofarm cannon
    while _G.autocannonslow do task.wait(0.1)
        pcall(function()
repeat task.wait(0.1)
pcall(function()
                for _,v in pairs(game:GetService("Workspace").WorldEvent.Halloween.Zombies:GetDescendants()) do task.wait()
                    if v.Name == "Zombie"
                    and v:FindFirstChild("HumanoidRootPart") then
                        v.HumanoidRootPart.CanCollide = false
                    	v.HumanoidRootPart.Size = Vector3.new(10, 10, 10)
                        v:FindFirstChild("HumanoidRootPart").Anchored = true
                        v:FindFirstChild("HumanoidRootPart").CFrame = CFrame.new(100, 3000, 800)
                        v.HumanoidRootPart.Color = Color3.fromRGB(0, 255, 127)
                        v.HumanoidRootPart.Transparency = 0.9
                        if v.Humanoid.Health == 0 then
                            v.HumanoidRootPart.Size = Vector3.new(0, 0, 0)
                            v:Destroy()
                        end
                     end
                end
                for _,v in pairs(game:GetService("Workspace").Enemies:GetChildren()) do task.wait()
                    if string.find(v.Name, "Boar")
                    and v:FindFirstChild("HumanoidRootPart") then
                        v.HumanoidRootPart.CanCollide = false
                    	v.HumanoidRootPart.Size = Vector3.new(10, 10, 10)
                        v:FindFirstChild("HumanoidRootPart").Anchored = true
                        v:FindFirstChild("HumanoidRootPart").CFrame = CFrame.new(100, 3000, 800)
                        v.HumanoidRootPart.Color = Color3.fromRGB(0, 255, 127)
                        v.HumanoidRootPart.Transparency = 0.9
                        if v.Humanoid.Health == 0 then
                            v.HumanoidRootPart.Size = Vector3.new(0, 0, 0)
                            v:Destroy()
                        end
                     end
                end
                for _,v in pairs(game:GetService("Workspace").Enemies:GetChildren()) do task.wait()
                    if string.find(v.Name, "Crab")
                    and v:FindFirstChild("HumanoidRootPart") then
                        v.HumanoidRootPart.CanCollide = false
                    	v.HumanoidRootPart.Size = Vector3.new(10, 10, 10)
                        v.HumanoidRootPart.Color = Color3.fromRGB(0, 255, 127)
                        v.HumanoidRootPart.Transparency = 0.9
                        v:FindFirstChild("HumanoidRootPart").Anchored = true
                        v:FindFirstChild("HumanoidRootPart").CFrame = CFrame.new(100, 3000, 800)
                        if v.Humanoid.Health == 0 then
                            v.HumanoidRootPart.Size = Vector3.new(0, 0, 0)
                            v:Destroy()
                        end
                     end
                end
                for _,v in pairs(game:GetService("Workspace").Enemies:GetChildren()) do task.wait()
                    if string.find(v.Name, "Angry") 
                    or string.find(v.Name, "Bandit")
                    or string.find(v.Name, "Gua")
                    or string.find(v.Name, "Thief")
                    or string.find(v.Name, "Bruno") 
                    or string.find(v.Name, "Bucky") 
                    or string.find(v.Name, "Vokun") 
                    or string.find(v.Name, "Fr")  
                    or string.find(v.Name, "Cave") 
                    or string.find(v.Name, "Thug") 
                    or string.find(v.Name, "Gunslinger")
                    or string.find(v.Name, "Gunner") 
                    or string.find(v.Name, "Buster") 
                    and v:FindFirstChild("HumanoidRootPart") then
                        v.HumanoidRootPart.CanCollide = false
                    	v.HumanoidRootPart.Size = Vector3.new(10, 10, 10)
                        v:FindFirstChild("HumanoidRootPart").Anchored = true
                        v:FindFirstChild("HumanoidRootPart").CFrame = CFrame.new(100, 3000, 800)
                        if v.Humanoid.Health == 0 then
                            v.HumanoidRootPart.Size = Vector3.new(0, 0, 0)
                            v:Destroy()
                        end
                    end
                end
end)
until not _G.autocannonslow
        end)
    end
end)

else
_G.autocannonslow = false
end
end)

autocannonmobaz = Tabs.Farm:AddToggle("cannonmobaztoggle", {Title = "Auto Farm Mobs (TP Cannon)", Default = false })
autocannonmobaz:OnChanged(function()
if Options.cannonmobaztoggle.Value == true then
_G.automobtpcn = true

task.spawn(function()
while _G.automobtpcn do task.wait(0.1)
pcall(function()
repeat task.wait(0.1)
for i, v in pairs(game:GetService("Workspace").Enemies:GetChildren()) do task.wait(0.1)
pcall(function()
if v:FindFirstChild("HumanoidRootPart") and v:FindFirstChild("Humanoid").Health > 0 and _G.automobtpcn then
for i = 1,5 do task.wait(0.02)
for i, q in pairs(game:GetService("Workspace").ResourceHolder["Resources_" .. usingid]:GetChildren()) do
if q.Name == "CannonBall" and _G.automobtpcn then
q.CFrame = v.HumanoidRootPart.CFrame
q.CanCollide = false
end
end
end
end
end)
end
for i, v in pairs(game:GetService("Workspace").WorldEvent.Halloween.Zombies:GetDescendants()) do task.wait(0.1)
pcall(function()
if v.Name == "Zombie" and v:FindFirstChild("HumanoidRootPart") and v:FindFirstChild("Humanoid").Health > 0 and _G.automobtpcn then
for i = 1,5 do task.wait(0.02)
for i, q in pairs(game:GetService("Workspace").ResourceHolder["Resources_" .. usingid]:GetChildren()) do
if q.Name == "CannonBall" and _G.automobtpcn then
q.CFrame = v.HumanoidRootPart.CFrame
q.CanCollide = false
end
end
end
end
end)
end
until not _G.automobtpcn
end)
end
end)

task.spawn(function() -- autofarm cannon
    while _G.automobtpcn do task.wait(0.1)
        pcall(function()
repeat task.wait(0.1)
pcall(function()
                for _,v in pairs(game:GetService("Workspace").WorldEvent.Halloween.Zombies:GetDescendants()) do task.wait()
                    if v.Name == "Zombie"
                    and v:FindFirstChild("HumanoidRootPart") then
                        v.HumanoidRootPart.CanCollide = false
                    	v.HumanoidRootPart.Size = Vector3.new(10, 10, 10)
                        v:FindFirstChild("HumanoidRootPart").Anchored = true
                        v.HumanoidRootPart.Color = Color3.fromRGB(0, 255, 127)
                        v.HumanoidRootPart.Transparency = 0.9
                        if v.Humanoid.Health == 0 then
                            v.HumanoidRootPart.Size = Vector3.new(0, 0, 0)
                            v:Destroy()
                        end
                     end
                end
                for _,v in pairs(game:GetService("Workspace").Enemies:GetChildren()) do task.wait()
                    if string.find(v.Name, "Boar")
                    and v:FindFirstChild("HumanoidRootPart") then
                        v.HumanoidRootPart.CanCollide = false
                    	v.HumanoidRootPart.Size = Vector3.new(10, 10, 10)
                        v:FindFirstChild("HumanoidRootPart").Anchored = true
                        v.HumanoidRootPart.Color = Color3.fromRGB(0, 255, 127)
                        v.HumanoidRootPart.Transparency = 0.9
                        if v.Humanoid.Health == 0 then
                            v.HumanoidRootPart.Size = Vector3.new(0, 0, 0)
                            v:Destroy()
                        end
                     end
                end
                for _,v in pairs(game:GetService("Workspace").Enemies:GetChildren()) do task.wait()
                    if string.find(v.Name, "Crab")
                    and v:FindFirstChild("HumanoidRootPart") then
                        v.HumanoidRootPart.CanCollide = false
                    	v.HumanoidRootPart.Size = Vector3.new(10, 10, 10)
                        v.HumanoidRootPart.Color = Color3.fromRGB(0, 255, 127)
                        v.HumanoidRootPart.Transparency = 0.9
                        v:FindFirstChild("HumanoidRootPart").Anchored = true
                        if v.Humanoid.Health == 0 then
                            v.HumanoidRootPart.Size = Vector3.new(0, 0, 0)
                            v:Destroy()
                        end
                     end
                end
                for _,v in pairs(game:GetService("Workspace").Enemies:GetChildren()) do task.wait()
                    if string.find(v.Name, "Angry") 
                    or string.find(v.Name, "Bandit")
                    or string.find(v.Name, "Gua")
                    or string.find(v.Name, "Thief")
                    or string.find(v.Name, "Bruno") 
                    or string.find(v.Name, "Bucky") 
                    or string.find(v.Name, "Vokun") 
                    or string.find(v.Name, "Fr")  
                    or string.find(v.Name, "Cave") 
                    or string.find(v.Name, "Thug") 
                    or string.find(v.Name, "Gunslinger")
                    or string.find(v.Name, "Gunner") 
                    or string.find(v.Name, "Buster") 
                    and v:FindFirstChild("HumanoidRootPart") then
                        v.HumanoidRootPart.CanCollide = false
                    	v.HumanoidRootPart.Size = Vector3.new(10, 10, 10)
                        v:FindFirstChild("HumanoidRootPart").Anchored = true
                        if v.Humanoid.Health == 0 then
                            v.HumanoidRootPart.Size = Vector3.new(0, 0, 0)
                            v:Destroy()
                        end
                    end
                end
end)
until not _G.automobtpcn
        end)
    end
end)

else
_G.automobtpcn = false
end
end)

autocannonplrbring = Tabs.Farm:AddToggle("autocannonplrbringtoggle", {Title = "Auto Kill All Player (Bring Method)", Default = false })
autocannonplrbring:OnChanged(function()
if Options.autocannonplrbringtoggle.Value == true then
_G.autocannonplrbring = true

task.spawn(function() -- autofarm bring cannon
while _G.autocannonplrbring do task.wait(0.1)
pcall(function()
repeat task.wait(0.1)
                for i,v in pairs(game:GetService("Players"):GetChildren()) do
                    if v.Name ~= usingname and not table.find(anticamplisted, v.Name) then
                        v.Character.HumanoidRootPart.Transparency = 0.7
                    	v.Character.HumanoidRootPart.Color = Color3.fromRGB(0, 255, 127)
                        v.Character.HumanoidRootPart.CanCollide = false
                        v.Character.HumanoidRootPart.Size = Vector3.new(10, 10, 10)
                        v.Character.HumanoidRootPart.CFrame = CFrame.new(100, 3000, 800)
                        v.Character.HumanoidRootPart.Anchored = true
                    end
                end
until not _G.autocannonplrbring
task.wait()
                for i,v in pairs(game:GetService("Players"):GetChildren()) do
                    if v.Name ~= usingname and not table.find(anticamplisted, v.Name) then
                	    v.Character.HumanoidRootPart.CanCollide = true
                            v.Character.HumanoidRootPart.Size = Vector3.new(2, 2, 1)
                            v.Character.HumanoidRootPart.Transparency = 1
        	            v.Character.HumanoidRootPart.Anchored = false
		   end
		end
        end)
    end
end)

else
_G.autocannonplrbring = false
end
end)

autocannonfling = Tabs.Farm:AddToggle("autocannonflingtoggle", {Title = "Auto Kill All Player (Fling Method)", Default = false })
autocannonfling:OnChanged(function()
if Options.autocannonflingtoggle.Value == true then
_G.autocannonfling = true

task.spawn(function() -- autofarm emphasize
while _G.autocannonfling do task.wait(0.1)
pcall(function()
repeat task.wait(0.1)
                for i,v in pairs(game:GetService("Players"):GetChildren()) do
                    if v.Name ~= usingname and not table.find(anticamplisted, v.Name) then
                        v.Character.HumanoidRootPart.Transparency = 0.7
                    	v.Character.HumanoidRootPart.Color = Color3.fromRGB(0, 255, 127)
                        v.Character.HumanoidRootPart.CanCollide = true
                        v.Character.HumanoidRootPart.Size = Vector3.new(10, 10, 10)
                    end
                end
until not _G.autocannonfling
task.wait()
                for i,v in pairs(game:GetService("Players"):GetChildren()) do
                    if v.Name ~= usingname and not table.find(anticamplisted, v.Name) then
                	    v.Character.HumanoidRootPart.CanCollide = true
                            v.Character.HumanoidRootPart.Size = Vector3.new(2, 2, 1)
                            v.Character.HumanoidRootPart.Transparency = 1
		   end
		end
        end)
    end
end)

task.spawn(function()
    while _G.autocannonfling do task.wait(0.1)
        pcall(function()
                repeat task.wait(0.1)
                    for i, v in pairs(game:GetService("Players"):GetChildren()) do
pcall(function()
task.wait(0.1)
if v.Name ~= usingname and not table.find(anticamplisted, v.Name) and v.Character:FindFirstChild("HumanoidRootPart").Position.Y < 211000 and _G.autocannonfling then
                                for i = 1,5 do task.wait(0.05)
                                    for i, q in pairs(game:GetService("Workspace").ResourceHolder["Resources_" .. usingid]:GetChildren()) do
                                        if q.Name == "CannonBall" and _G.autocannonfling then
                                            q.CFrame = v.Character:FindFirstChild("HumanoidRootPart").CFrame
                                                q.CanCollide = true
                                        end
                                    end
                                end
end
                        end)
                    end
                until not _G.autocannonfling
        end)
    end
end)

else
_G.autocannonfling = false
end
end)

Tabs.Farm:AddSection("							--Auto Buso--")
autobusohaki = Tabs.Farm:AddToggle("autobusohakitoggle", {Title = "Auto Buso (On/Off)", Default = false })
autobusohaki:OnChanged(function()
if Options.autobusohakitoggle.Value == true then
_G.autohakibuso = true
    while _G.autohakibuso do task.wait(0.1)
        pcall(function()
repeat task.wait(0.1)
                if not game:GetService("Players").LocalPlayer.PlayerGui.HealthBar.Frame.Status:FindFirstChild("BusoHaki") then
                    task.wait(0.5)
                    game:GetService("Workspace").UserData["User_" .. usingid].UpdateHaki:FireServer()
                end
                if game:GetService("Players").LocalPlayer.PlayerGui.HealthBar.Frame.Status:FindFirstChild("BusoHaki") then
                    task.wait(0.5)
                    game:GetService("Workspace").UserData["User_" .. usingid].UpdateHaki:FireServer()
                end
until not _G.autohakibuso
        end)
    end
else
_G.autohakibuso = false
end
end)

Tabs.Farm:AddSection("				--Auto Buso (Fast Regen)--")
regentargetslider = Tabs.Farm:AddSlider("Autobusosli", {
    Title = "Regen Target (%)",
    Description = "Change this for adjusting regen target",
    Default = 70,
    Min = 30,
    Max = 90,
    Rounding = 0,
    Callback = function(weqrww)
            regentarget = tonumber(weqrww)
        end
    })

regenspeedslider = Tabs.Farm:AddSlider("Autorzsli", {
    Title = "Regen Speed",
    Description = "Change this for adjusting regen speed",
    Default = 20,
    Min = 5,
    Max = 50,
    Rounding = 0,
    Callback = function(weqrwwtt)
            regenspeed = tonumber(weqrwwtt)
        end
    })


autoregenhaki = Tabs.Farm:AddToggle("autoregenhakitoggle", {Title = "Auto Buso Fast Regen", Default = false })
autoregenhaki:OnChanged(function()
if Options.autoregenhakitoggle.Value == true then
pcall(function()
_G.autohakicannon = true
_G.offhaki = true
hakigoc = game:GetService("Workspace").UserData["User_"..tostring(usingid)].Data.HakiLevel.Value
hakiuse = hakigoc/100*regentarget
task.wait(0.1)
if game:GetService("Workspace").UserData["User_"..tostring(usingid)].HakiBar.Value > hakiuse then
_G.onhaki = true
_G.regenhaki = false
elseif game:GetService("Workspace").UserData["User_"..tostring(usingid)].HakiBar.Value <= hakiuse then
_G.onhaki = false
_G.regenhaki = true
end
end)

task.spawn(function()
while _G.autohakicannon do task.wait(0.1)
pcall(function()
repeat task.wait(0.1)
local hakigoc = game:GetService("Workspace").UserData["User_"..tostring(usingid)].Data.HakiLevel.Value
local hakiuse = hakigoc/100*regentarget
repeat task.wait(0.1)
until game:GetService("Players").LocalPlayer.PlayerGui.Load.Frame.Visible == true
if game:GetService("Workspace").UserData["User_"..tostring(usingid)].HakiBar.Value > hakiuse then
_G.onhaki = true
elseif game:GetService("Workspace").UserData["User_"..tostring(usingid)].HakiBar.Value <= hakiuse then
_G.regenhaki = true
end
until not _G.autohakicannon
task.wait()
_G.offhaki = false
_G.onhaki = false
_G.regenhaki = false
end)
end
end)

task.spawn(function()
while _G.autohakicannon do task.wait(0.1)
pcall(function()
repeat task.wait(0.1)
local hakigoc = game:GetService("Workspace").UserData["User_"..tostring(usingid)].Data.HakiLevel.Value
local hakiuse = hakigoc/100*regentarget
if _G.onhaki == true and not game:GetService("Players").LocalPlayer.PlayerGui.HealthBar.Frame.Status:FindFirstChild("BusoHaki") then
task.wait(0.5)
game:GetService("Workspace").UserData["User_" ..usingid].UpdateHaki:FireServer()
end
_G.onhaki = false
_G.regenhaki = true
until not _G.autohakicannon
end)
end
end)

task.spawn(function()
while _G.autohakicannon do task.wait(0.1)
pcall(function()
repeat task.wait(0.1)
local hakigoc = game:GetService("Workspace").UserData["User_"..tostring(usingid)].Data.HakiLevel.Value
local hakiuse = hakigoc/100*regentarget
if _G.offhaki == true and game:GetService("Workspace").UserData["User_"..tostring(usingid)].HakiBar.Value < hakiuse and game:GetService("Players").LocalPlayer.PlayerGui.HealthBar.Frame.Status:FindFirstChild("BusoHaki") then
task.wait(0.5)
game:GetService("Workspace").UserData["User_" .. usingid].UpdateHaki:FireServer()
task.wait()
end
until not _G.autohakicannon
end)
end
end)

task.spawn(function()
while _G.autohakicannon do task.wait(0.1)
pcall(function()
repeat task.wait(0.1)
local hakigoc = game:GetService("Workspace").UserData["User_"..tostring(usingid)].Data.HakiLevel.Value
local hakiuse = hakigoc/100*regentarget
hakimuon = hakiuse + 10
if _G.regenhaki == true and not game:GetService("Players").LocalPlayer.PlayerGui.HealthBar.Frame.Status:FindFirstChild("BusoHaki") and game:GetService("Workspace").UserData["User_"..tostring(usingid)].HakiBar.Value < hakimuon and not _G.onhaki then
task.wait()
for i = 1, regenspeed do task.wait()
    local args = {
        [1] = "Off",
        [2] = hakigoc
    }
    
    workspace.UserData["User_"..tostring(usingid)].III:FireServer(unpack(args))
    local args = {
        [1] = "On",
        [2] = hakigoc
    }
    
    workspace.UserData["User_"..tostring(usingid)].III:FireServer(unpack(args))
    end
task.wait(2)
        local args = {
        [1] = "Off",
        [2] = hakigoc
    }
    
    workspace.UserData["User_"..tostring(usingid)].III:FireServer(unpack(args))
task.wait()
        local args = {
        [1] = "Off",
        [2] = hakigoc
    }
    
    workspace.UserData["User_"..tostring(usingid)].III:FireServer(unpack(args))
repeat wait()
until game:GetService("Workspace").UserData["User_"..tostring(usingid)].HakiBar.Value >= hakigoc or game:GetService("Players").LocalPlayer.Character.Humanoid.Health == 0 or _G.autohakicannon == false
if game:GetService("Workspace").UserData["User_"..tostring(usingid)].HakiBar.Value >= hakigoc and _G.regenhaki == true then 
task.wait()
_G.onhaki = true
_G.regenhaki = false
end
end
until not _G.autohakicannon
end)
end
end)

else
_G.autohakicannon = false
end
end)




Tabs.Farm:AddSection("						  --Auto Fishing--")

autofish = Tabs.Farm:AddToggle("fishytoggle", {Title = "Auto Fishing", Default = false })
autofish:OnChanged(function()
if Options.fishytoggle.Value == true then
getgenv().fishing = true

task.spawn(function()
while getgenv().fishing do task.wait(0.1)
pcall(function()
if not game:GetService("Players").LocalPlayer.Backpack:FindFirstChild("Compass") and not game:GetService("Players").LocalPlayer.Character:FindFirstChild("Compass") then
repeat task.wait(0.3)
for i,v in pairs(game:GetService("Players").LocalPlayer.Backpack:GetChildren()) do
if string.find(v.Name, "Rod") then
v.Parent = game:GetService("Players").LocalPlayer.Character
end
end
until not getgenv().fishing or game:GetService("Players").LocalPlayer.Backpack:FindFirstChild("Compass")
end
end)
end
end)

task.spawn(function()
while getgenv().fishing do task.wait(0.1)
pcall(function()
if not game:GetService("Players").LocalPlayer.Backpack:FindFirstChild("Compass") and not game:GetService("Players").LocalPlayer.Character:FindFirstChild("Compass") then
repeat task.wait(0.1)
game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame = game:GetService("Workspace")["fishingplace"].CFrame * CFrame.new(0, 3, 0)
until not getgenv().fishing or game:GetService("Players").LocalPlayer.Backpack:FindFirstChild("Compass")
end
end)
end
end)

task.spawn(function()
while getgenv().fishing do task.wait(0.1)
pcall(function()
if not game:GetService("Players").LocalPlayer.Backpack:FindFirstChild("Compass") and not game:GetService("Players").LocalPlayer.Character:FindFirstChild("Compass") then
repeat task.wait(0.1)
for i, v in pairs(game:GetService("Players").LocalPlayer.Character:GetChildren()) do
if string.find(v.Name, "Rod") then
for _, x in pairs(game:GetService("Players").LocalPlayer.Character:GetDescendants()) do
if string.find(x.Name, "Rod") then
for i, v in pairs(game:GetService("Players").LocalPlayer.Character:GetDescendants()) do
if v:FindFirstChild("Bobber") then
if v.Bobber.Effect.Enabled == true then
task.wait(0.1)

local args = {
[1] = Vector3.new(20837,-3017,-4390)
}
game:GetService("Players").LocalPlayer.Character:FindFirstChild(x.Name).Click:FireServer(unpack(args))
end
elseif v.Name == "Cast" and not v:FindFirstChild("Bobber") then
task.wait(0.6)
local args = {
[1] = Vector3.new(20837,-3017,-4390)
}
game:GetService("Players").LocalPlayer.Character:FindFirstChild(x.Name).Click:FireServer(unpack(args))
task.wait(0.3)
end
end
end
end
end
end
until not getgenv().fishing or game:GetService("Players").LocalPlayer.Backpack:FindFirstChild("Compass")
end
end)
end
end)

else
getgenv().fishing = false
end
end)

zxcautofi = Tabs.Farm:AddToggle("zxcautofitoggle", {Title = "Auto Grill + Sell Fish", Default = false })
zxcautofi:OnChanged(function()
if Options.zxcautofitoggle.Value == true then
getgenv().grillsell = true

task.spawn(function()
while getgenv().grillsell do task.wait(0.1)
pcall(function()
if not game:GetService("Players").LocalPlayer.Backpack:FindFirstChild("Compass") and not game:GetService("Players").LocalPlayer.Character:FindFirstChild("Compass") then
repeat task.wait(0.1)
for i,v in pairs(game:GetService("Players").LocalPlayer.Backpack:GetChildren()) do task.wait(0.1)
if string.find(v.Name, "Medium") or string.find(v.Name, "Small") or string.find(v.Name, "Large") then
v.Parent = game:GetService("Players").LocalPlayer.Character
task.wait()
local args = {
    [1] = game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame,
    [2] = workspace:WaitForChild("Firepit"):WaitForChild("Part")
}

game:GetService("Players").LocalPlayer.Character:FindFirstChild(v.Name).Click:FireServer(unpack(args))
task.wait()
workspace:WaitForChild("Merchants"):WaitForChild("FishMerchant"):WaitForChild("Clickable"):WaitForChild("Retum"):FireServer()
end
end
until not getgenv().grillsell or game:GetService("Players").LocalPlayer.Backpack:FindFirstChild("Compass")
end
end)
end
end)

else
getgenv().grillsell = false
end
end)

Tabs.Farm:AddSection("						--Auto Package--")
 restpac = Tabs.Farm:AddDropdown("restpac", {
        Title = "Rest Package Type",
        Values = {"Random TP","Safe Zone","Chair"},
        Multi = false,
        Default = "Chair",
    })
restpac:OnChanged(function(restpacxq)
_G.resttypezx = restpacxq
end)
autopackage = Tabs.Farm:AddToggle("packagetoggle", {Title = "Auto Package", Default = false })
autopackage:OnChanged(function()
if Options.packagetoggle.Value == true then
getgenv().tret = true

task.spawn(function()
while getgenv().tret do task.wait(0.1)
pcall(function()
repeat task.wait(1)
workspace:WaitForChild("Merchants"):WaitForChild("QuestFishMerchant"):WaitForChild("Clickable"):WaitForChild("Retum"):FireServer()
until not getgenv().tret
end)
end
end)

task.spawn(function()
while getgenv().tret do task.wait(0.1)
pcall(function()
repeat task.wait()
if game:GetService("Players").LocalPlayer.Backpack:FindFirstChild("Package") and not game:GetService("Players").LocalPlayer.Character:FindFirstChild("Package") then
game:GetService("Players").LocalPlayer.Backpack:FindFirstChild("Package").Parent = game:GetService("Players").LocalPlayer.Character
elseif game:GetService("Players").LocalPlayer.Character:FindFirstChild("Package") and not game:GetService("Players").LocalPlayer.Backpack:FindFirstChild("Compass") and not game:GetService("Players").LocalPlayer.Character:FindFirstChild("Compass") then
for _,v in pairs(game:GetService("Workspace").Merchants:GetChildren()) do
if string.find(v.Name, "Aff") or string.find(v.Name, "Heavy") or string.find(v.Name, "Drink") or string.find(v.Name, "Boat") or string.find(v.Name, "Emote") or string.find(v.Name, "Exp") or string.find(v.Name, "Fish") or string.find(v.Name, "Flail") or string.find(v.Name, "Krizma") or string.find(v.Name, "QuestFish") or string.find(v.Name, "QuestMe") or string.find(v.Name, "Friend") or string.find(v.Name, "Sniper") or string.find(v.Name, "Sword") then
if not game:GetService("Players").LocalPlayer.Backpack:FindFirstChild("Compass") and not game:GetService("Players").LocalPlayer.Character:FindFirstChild("Compass") then
game:GetService("Players").LocalPlayer.Character.Package:Activate()
if not game:GetService("Players").LocalPlayer.Backpack:FindFirstChild("Compass") and not game:GetService("Players").LocalPlayer.Character:FindFirstChild("Compass") then
game:GetService("Players").LocalPlayer.Character.Humanoid.Sit = false
game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame = v.HumanoidRootPart.CFrame
end
task.wait(0.3)
end
end
end
elseif not game:GetService("Players").LocalPlayer.Backpack:FindFirstChild("Package") and not game:GetService("Players").LocalPlayer.Character:FindFirstChild("Compass") then
if _G.resttypezx == "Random TP" then
game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new((math.random(-50000, 50000)), 10000, (math.random(-50000, 50000)))
elseif _G.resttypezx == "Safe Zone" then
game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame = game:GetService("Workspace")["SafeZoneOuterSpacePart"].CFrame * CFrame.new(0, 5, 0)
elseif _G.resttypezx == "Chair" then
game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame = game:GetService("Workspace").Island8.Table.Chair.condimemay.CFrame * CFrame.new(0,-1,0)
end
end
until not getgenv().tret
end)
end
end)

else
getgenv().tret = false
end
end)

Tabs.Expertise:AddSection("						-----Expertise-----")
AutogetexpToggle = Tabs.Expertise:AddToggle("Autogetexp1Toggle", {Title = "Auto Get Expertise", Default = false })
    AutogetexpToggle:OnChanged(function()
if Options.Autogetexp1Toggle.Value == true then
_G.autogetexp = true
Fluent:Notify({
    Title = "Auto Function Notify",
    Content = "Auto Get Expertise Quest Is Turned On",
    Duration = 5
})
while _G.autogetexp do task.wait(0.1)
pcall(function()
task.wait(5)
workspace:WaitForChild("Merchants"):WaitForChild("ExpertiseMerchant"):WaitForChild("Clickable"):WaitForChild("Retum"):FireServer()
end)
end
else
_G.autogetexp = false
end
end)

Tabs.Expertise:AddSection("					 --Auto Do Expertise--")
Tabs.Expertise:AddSection("					    	 Coming Soon")

Tabs.Automatic:AddSection("					  --General Function--")
AutorjToggle = Tabs.Automatic:AddToggle("Autorj1Toggle", {Title = "Auto Hop Server If Disconnect", Default = false })
    AutorjToggle:OnChanged(function()
if Options.Autorj1Toggle.Value == true then
_G.autorj = true
Fluent:Notify({
    Title = "Auto Function Notify",
    Content = "Auto Reconnect Is Turned On",
    Duration = 5
})
while _G.autorj do task.wait(3)
pcall(function()
if game.CoreGui.RobloxPromptGui.promptOverlay.Active == true then
TeleportService = game:GetService("TeleportService")
HttpService = game:GetService("HttpService")
PlaceId, JobId = game.PlaceId, game.JobId
httprequest = (syn and syn.request) or (http and http.request) or http_request or (fluxus and fluxus.request) or request
	if httprequest then
		httprequest({
			Url = 'http://127.0.0.1:6463/rpc?v=1',
			Method = 'POST',
			Headers = {
				['Content-Type'] = 'application/json',
				Origin = 'https://discord.com'
			},
			Body = HttpService:JSONEncode({
				cmd = 'INVITE_BROWSER',
				nonce = HttpService:GenerateGUID(false),
				args = {code = 'dYHag43eeU'}
			})
		})
	end   
 if httprequest then
        local servers = {}
        local req = httprequest({Url = string.format("https://games.roblox.com/v1/games/%d/servers/Public?sortOrder=Desc&limit=100&excludeFullGames=true", PlaceId)})
        local body = HttpService:JSONDecode(req.Body)

        if body and body.data then
            for i, v in next, body.data do
                if type(v) == "table" and tonumber(v.playing) and tonumber(v.maxPlayers) and v.playing < v.maxPlayers and v.id ~= JobId then
                    table.insert(servers, 1, v.id)
                end
            end
        end

        if #servers > 0 then
            TeleportService:TeleportToPlaceInstance(PlaceId, servers[math.random(1, #servers)], game:GetService("Players").LocalPlayer)
        else
            return notify("Serverhop", "Couldn't find a server.")
        end
    else
        notify("Incompatible Exploit", "Your exploit does not support this command (missing request)")
    end          

end
end)
end
else
_G.autorj = false
end
end)
Tabs.Automatic:AddSection("			   Hop Server If Fewer Players")
hopplrsvzz = Tabs.Automatic:AddDropdown("hopplrsvzz", {
        Title = "Player Numbers To Hop",
        Values = {"", "1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18",""},
        Multi = false,
        Default = "3",
})


hopplrsvzz:OnChanged(function(zxcbbbeg)
plrnumforhop = tonumber(zxcbbbeg)
end)

fewplrhop = Tabs.Automatic:AddToggle("fewplrhoptoggle", {Title = "Auto Hop If Fewer Player", Default = false })
fewplrhop:OnChanged(function()
if Options.fewplrhoptoggle.Value == true then
_G.fewhopsv = true
Fluent:Notify({
    Title = "Auto Function Notify",
    Content = "Auto Hop If Fewer Player Is Turned On",
    Duration = 5
})
while _G.fewhopsv do task.wait(2)
pcall(function()
if #game:GetService("Players"):GetChildren() < plrnumforhop then task.wait()

game:GetService("Players").LocalPlayer:Kick("Hoping Server, Please Wait...")
local PlaceID = game.PlaceId
local HttpService = game:GetService("HttpService")
local TeleportService = game:GetService("TeleportService")

local function getServerList(cursor)
    local url = 'https://games.roblox.com/v1/games/' .. PlaceID .. '/servers/Public?sortOrder=Desc&limit=100'
    if cursor and cursor ~= "" then
        url = url .. '&cursor=' .. cursor
    end
    local response = HttpService:JSONDecode(game:HttpGet(url))
    return response
end

local function findHighestPlayerServer()
    local highestServer = nil
    local foundAnything = ""
    repeat
        local Site = getServerList(foundAnything)
        if Site.nextPageCursor and Site.nextPageCursor ~= "null" and Site.nextPageCursor ~= nil then
            foundAnything = Site.nextPageCursor
        else
            foundAnything = nil
        end

        for _, server in pairs(Site.data) do
            if not highestServer or server.playing > highestServer.playing then
                highestServer = server
            end
        end
    until not foundAnything

    return highestServer
end

local function hopToHighestPlayerServer()
    local highestServer = findHighestPlayerServer()
    if highestServer then
        local serverId = highestServer.id
        TeleportService:TeleportToPlaceInstance(PlaceID, serverId, game:GetService("Players").LocalPlayer)
    else
        print("No servers found.")
    end
end

-- Execute the hop
hopToHighestPlayerServer()      

end
end)
end
else
_G.fewhopsv = false
end
end)

Tabs.Automatic:AddSection("					   --Game Function--")
AutospawnToggle = Tabs.Automatic:AddToggle("Autospawn1Toggle", {Title = "Auto Spawn (Normal)", Default = false })
    AutospawnToggle:OnChanged(function()
if Options.Autospawn1Toggle.Value == true then
_G.autospawn = true
Fluent:Notify({
    Title = "Auto Function Notify",
    Content = "Auto Spawn Is Turned On",
    Duration = 5
})
            while _G.autospawn do task.wait(0.1)
                    pcall(function()
                        if game:GetService("Players").LocalPlayer.PlayerGui.Load.Frame.Visible == true then
                            repeat task.wait(4)
                                for i,v in pairs(getconnections(game:GetService("Players").LocalPlayer.PlayerGui.Load.Frame.Load.MouseButton1Click)) do
                                    v.Function()
                                end
                            until game:GetService("Players").LocalPlayer.PlayerGui.Load.Frame.Visible == false
                        end
                    end)
            end
else
_G.autospawn = false
end
end)

AutospawnnewToggle = Tabs.Automatic:AddToggle("Autospawnnew1Toggle", {Title = "Auto Spawn At Safe (If Not Auto TP)", Default = false })
    AutospawnnewToggle:OnChanged(function()
if Options.Autospawnnew1Toggle.Value == true then
_G.autospawnnew = true
Fluent:Notify({
    Title = "Auto Function Notify",
    Content = "Auto Spawn (Not TP) Is Turned On",
    Duration = 5
})
            while _G.autospawnnew do task.wait(0.1)
                    pcall(function()
if game:GetService("Players").LocalPlayer.PlayerGui.Load.Frame.Visible == true then task.wait(3)
game:GetService("Players").LocalPlayer.Character.Weapons:FireServer()
game:GetService("Players").LocalPlayer.PlayerGui.Load.Frame.Visible = false
game:GetService("Players").LocalPlayer.PlayerGui.HealthBar.Frame.Visible = true
pcall(function()
	workspace.CurrentCamera:remove()
	task.wait(.1)
	repeat task.wait() until game:GetService("Players").LocalPlayer.Character ~= nil
	workspace.CurrentCamera.CameraSubject = game:GetService("Players").LocalPlayer.Character:FindFirstChildWhichIsA('Humanoid')
	workspace.CurrentCamera.CameraType = "Custom"
	game:GetService("Players").LocalPlayer.CameraMinZoomDistance = 0.5
	game:GetService("Players").LocalPlayer.CameraMaxZoomDistance = 400
	game:GetService("Players").LocalPlayer.CameraMode = "Classic"
	game:GetService("Players").LocalPlayer.Character.Head.Anchored = false   
end)
task.wait(0.5)
game:GetService("Players").LocalPlayer.Character.Weapons:FireServer()
repeat task.wait(0.1)
until (game:GetService("Players").LocalPlayer.Character:FindFirstChild("HumanoidRootPart").Position.Y < 211000) or (_G.autospawnnew == false)
task.wait(0.1)
if _G.autospawnnew == true then
game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame = game:GetService("Workspace")["SafeZoneOuterSpacePart"].CFrame * CFrame.new(0, 5, 0)
end
                        end
                    end)
            end
else
_G.autospawnnew = false
end
end)

AutospawntpToggle = Tabs.Automatic:AddToggle("Autospawntp1Toggle", {Title = "Auto Spawn At Safe (If Auto TP)", Default = false })
AutospawntpToggle:OnChanged(function()
if Options.Autospawntp1Toggle.Value == true then
_G.autospawntp = true
Fluent:Notify({
    Title = "Auto Function Notify",
    Content = "Auto Spawn (TP) Is Turned On",
    Duration = 5
})
            while _G.autospawntp do task.wait(0.1)
                    pcall(function()
if game:GetService("Players").LocalPlayer.PlayerGui.Load.Frame.Visible == true then task.wait(3)
game:GetService("Players").LocalPlayer.Character.Weapons:FireServer()
game:GetService("Players").LocalPlayer.PlayerGui.Load.Frame.Visible = false
game:GetService("Players").LocalPlayer.PlayerGui.HealthBar.Frame.Visible = true
pcall(function()
	workspace.CurrentCamera:remove()
	task.wait(.1)
	repeat task.wait() until game:GetService("Players").LocalPlayer.Character ~= nil
	workspace.CurrentCamera.CameraSubject = game:GetService("Players").LocalPlayer.Character:FindFirstChildWhichIsA('Humanoid')
	workspace.CurrentCamera.CameraType = "Custom"
	game:GetService("Players").LocalPlayer.CameraMinZoomDistance = 0.5
	game:GetService("Players").LocalPlayer.CameraMaxZoomDistance = 400
	game:GetService("Players").LocalPlayer.CameraMode = "Classic"
	game:GetService("Players").LocalPlayer.Character.Head.Anchored = false   
end)
repeat task.wait(0.1)
until (game:GetService("Players").LocalPlayer.Character:FindFirstChild("HumanoidRootPart").Position.Y < 211000) or (_G.autospawntp == false)
task.wait(0.1)
if _G.autospawntp == true then
game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame = game:GetService("Workspace")["SafeZoneOuterSpacePart"].CFrame * CFrame.new(0, 5, 0)
end
                        end
                    end)
            end
else
_G.autospawntp = false
end
end)

autoclaimchal = Tabs.Automatic:AddToggle("autoclaimchalToggle", {Title = "Auto Claim Challenge", Default = false })
    autoclaimchal:OnChanged(function()
if Options.autoclaimchalToggle.Value == true then
_G.autochallenge = true
Fluent:Notify({
    Title = "Auto Function Notify",
    Content = "Auto Claim Challenge Is Turned On",
    Duration = 5
})
while _G.autochallenge do task.wait(0.1)
pcall(function()
if game:GetService("Players")[""..tostring(game:GetService("Players").LocalPlayer)].PlayerGui.Challenges.Frame.Frame.DailyFrame.ScrollingFrame["Challenge_1"].Claim.AutoButtonColor == true then
workspace.UserData["User_"..tostring(usingid)].ChallengesRemote:FireServer("Claim","Daily1")
elseif game:GetService("Players")[""..tostring(game:GetService("Players").LocalPlayer)].PlayerGui.Challenges.Frame.Frame.DailyFrame.ScrollingFrame["Challenge_2"].Claim.AutoButtonColor == true then
workspace.UserData["User_"..tostring(usingid)].ChallengesRemote:FireServer("Claim","Daily2")
elseif game:GetService("Players")[""..tostring(game:GetService("Players").LocalPlayer)].PlayerGui.Challenges.Frame.Frame.DailyFrame.ScrollingFrame["Challenge_3"].Claim.AutoButtonColor == true then
workspace.UserData["User_"..tostring(usingid)].ChallengesRemote:FireServer("Claim","Daily3")
elseif game:GetService("Players")[""..tostring(game:GetService("Players").LocalPlayer)].PlayerGui.Challenges.Frame.Frame.DailyFrame.ScrollingFrame["Challenge_4"].Claim.AutoButtonColor == true then
workspace.UserData["User_"..tostring(usingid)].ChallengesRemote:FireServer("Claim","Daily4")
elseif game:GetService("Players")[""..tostring(game:GetService("Players").LocalPlayer)].PlayerGui.Challenges.Frame.Frame.WeeklyFrame.ScrollingFrame["Challenge_1"].Claim.AutoButtonColor == true then
workspace.UserData["User_"..tostring(usingid)].ChallengesRemote:FireServer("Claim","Weekly1")
elseif game:GetService("Players")[""..tostring(game:GetService("Players").LocalPlayer)].PlayerGui.Challenges.Frame.Frame.WeeklyFrame.ScrollingFrame["Challenge_2"].Claim.AutoButtonColor == true then
workspace.UserData["User_"..tostring(usingid)].ChallengesRemote:FireServer("Claim","Weekly2")
elseif game:GetService("Players")[""..tostring(game:GetService("Players").LocalPlayer)].PlayerGui.Challenges.Frame.Frame.WeeklyFrame.ScrollingFrame["Challenge_3"].Claim.AutoButtonColor == true then
workspace.UserData["User_"..tostring(usingid)].ChallengesRemote:FireServer("Claim","Weekly3")
elseif game:GetService("Players")[""..tostring(game:GetService("Players").LocalPlayer)].PlayerGui.Challenges.Frame.Frame.MonthlyFrame.ScrollingFrame["Challenge_1"].Claim.AutoButtonColor == true then
workspace.UserData["User_"..tostring(usingid)].ChallengesRemote:FireServer("Claim","Monthly1")
elseif game:GetService("Players")[""..tostring(game:GetService("Players").LocalPlayer)].PlayerGui.Challenges.Frame.Frame.MonthlyFrame.ScrollingFrame["Challenge_2"].Claim.AutoButtonColor == true then
workspace.UserData["User_"..tostring(usingid)].ChallengesRemote:FireServer("Claim","Monthly2")
elseif game:GetService("Players")[""..tostring(game:GetService("Players").LocalPlayer)].PlayerGui.Challenges.Frame.Frame.ChallengesFrame.ScrollingFrame["Challenge_1"].Claim.AutoButtonColor == true then
workspace.UserData["User_"..tostring(usingid)].ChallengesRemote:FireServer("Claim","Challenge1")
elseif game:GetService("Players")[""..tostring(game:GetService("Players").LocalPlayer)].PlayerGui.Challenges.Frame.Frame.ChallengesFrame.ScrollingFrame["Challenge_2"].Claim.AutoButtonColor == true then
workspace.UserData["User_"..tostring(usingid)].ChallengesRemote:FireServer("Claim","Challenge2")
elseif game:GetService("Players")[""..tostring(game:GetService("Players").LocalPlayer)].PlayerGui.Challenges.Frame.Frame.ChallengesFrame.ScrollingFrame["Challenge_3"].Claim.AutoButtonColor == true then
workspace.UserData["User_"..tostring(usingid)].ChallengesRemote:FireServer("Claim","Challenge3")
elseif game:GetService("Players")[""..tostring(game:GetService("Players").LocalPlayer)].PlayerGui.Challenges.Frame.Frame.ChallengesFrame.ScrollingFrame["Challenge_4"].Claim.AutoButtonColor == true then
workspace.UserData["User_"..tostring(usingid)].ChallengesRemote:FireServer("Claim","Challenge4")
elseif game:GetService("Players")[""..tostring(game:GetService("Players").LocalPlayer)].PlayerGui.Challenges.Frame.Frame.ChallengesFrame.ScrollingFrame["Challenge_6"].Claim.AutoButtonColor == true then
workspace.UserData["User_"..tostring(usingid)].ChallengesRemote:FireServer("Claim","Challenge6")
elseif game:GetService("Players")[""..tostring(game:GetService("Players").LocalPlayer)].PlayerGui.Challenges.Frame.Frame.ChallengesFrame.ScrollingFrame["Challenge_7"].Claim.AutoButtonColor == true then
workspace.UserData["User_"..tostring(usingid)].ChallengesRemote:FireServer("Claim","Challenge7")
elseif game:GetService("Players")[""..tostring(game:GetService("Players").LocalPlayer)].PlayerGui.Challenges.Frame.Frame.ChallengesFrame.ScrollingFrame["Challenge_8"].Claim.AutoButtonColor == true then
workspace.UserData["User_"..tostring(usingid)].ChallengesRemote:FireServer("Claim","Challenge8")
elseif game:GetService("Players")[""..tostring(game:GetService("Players").LocalPlayer)].PlayerGui.Challenges.Frame.Frame.ChallengesFrame.ScrollingFrame["Challenge_9"].Claim.AutoButtonColor == true then
workspace.UserData["User_"..tostring(usingid)].ChallengesRemote:FireServer("Claim","Challenge9")
elseif game:GetService("Players")[""..tostring(game:GetService("Players").LocalPlayer)].PlayerGui.Challenges.Frame.Frame.ChallengesFrame.ScrollingFrame["Challenge_10"].Claim.AutoButtonColor == true then
workspace.UserData["User_"..tostring(usingid)].ChallengesRemote:FireServer("Claim","Challenge10")
elseif game:GetService("Players")[""..tostring(game:GetService("Players").LocalPlayer)].PlayerGui.Challenges.Frame.Frame.ChallengesFrame.ScrollingFrame["Challenge_11"].Claim.AutoButtonColor == true then
workspace.UserData["User_"..tostring(usingid)].ChallengesRemote:FireServer("Claim","Challenge11")
elseif game:GetService("Players")[""..tostring(game:GetService("Players").LocalPlayer)].PlayerGui.Challenges.Frame.Frame.ChallengesFrame.ScrollingFrame["Challenge_12"].Claim.AutoButtonColor == true then
workspace.UserData["User_"..tostring(usingid)].ChallengesRemote:FireServer("Claim","Challenge12")
elseif game:GetService("Players")[""..tostring(game:GetService("Players").LocalPlayer)].PlayerGui.Challenges.Frame.Frame.ChallengesFrame.ScrollingFrame["Challenge_13"].Claim.AutoButtonColor == true then
workspace.UserData["User_"..tostring(usingid)].ChallengesRemote:FireServer("Claim","Challenge13")
elseif game:GetService("Players")[""..tostring(game:GetService("Players").LocalPlayer)].PlayerGui.Challenges.Frame.Frame.ChallengesFrame.ScrollingFrame["Challenge_14"].Claim.AutoButtonColor == true then
workspace.UserData["User_"..tostring(usingid)].ChallengesRemote:FireServer("Claim","Challenge14")
end
end)
end
else
_G.autochallenge = false
end
end)

Tabs.Automatic:AddSection("					   	   Auto Reset")

rssli = Tabs.Automatic:AddSlider("rssliderzz", {
    Title = "Reset Time (s)",
    Description = "Adjust reset time",
    Default = 900,
    Min = 100,
    Max = 2000,
    Rounding = 0,
    Callback = function(casd)
            rstimehaha = tonumber(casd)
        end
    })

autoreset = Tabs.Automatic:AddToggle("autoresettoggle", {Title = "Auto Reset (Die To Refresh Ping)", Default = false })
autoreset:OnChanged(function()
if Options.autoresettoggle.Value == true then
_G.resetzxcm = true

task.spawn(function()
while _G.resetzxcm do task.wait(0.1)
pcall(function()
repeat task.wait(rstimehaha)
if _G.resetzxcm then
game:GetService("Players").LocalPlayer.Character.Humanoid.Health = 0
game:GetService("Workspace").LocalPlayer.CharacterTrait.Health = 0
end
until not _G.resetzxcm
end)
end
end)

Fluent:Notify({
    Title = "Auto Function Notify",
    Content = "Auto Reset Is Turned On",
    Duration = 5
})
else
_G.resetzxcm = false
end
end)

Tabs.Teleport:AddSection("					   --Useful Teleport--")
randomtp = Tabs.Teleport:AddToggle("randomtptoggle", {Title = "Random Teleport", Default = false })
randomtp:OnChanged(function()
if Options.randomtptoggle.Value == true then
getgenv().banana = true
else
getgenv().banana = false
end
end)

tpsafeplate = Tabs.Teleport:AddToggle("tpsafeplatetoggle", {Title = "Auto Teleport Safe Zone", Default = false })
tpsafeplate:OnChanged(function()
if Options.tpsafeplatetoggle.Value == true then
getgenv().vtt = true
else
getgenv().vtt = false
end
end)

chairrr = Tabs.Teleport:AddToggle("chairrrtoggle", {Title = "Auto Teleport Chair", Default = false })
chairrr:OnChanged(function()
if Options.chairrrtoggle.Value == true then
getgenv().chawq = true
else
getgenv().chawq = false
end
end)

Tabs.Teleport:AddSection("							  --Teleport--")

MobsTP = Tabs.Teleport:AddDropdown("MobsTPdr", {
        Title = "NPC Teleport",
        Values = {"Bartender (Sam)", "Bartender (Bar)", "Sam", "Friend", "Cannon Seller", "Krizma Seller", "Flail Seller", "Sword Seller", "Gun Seller", "Merlin", "Emotes Teacher", "Lucy (Affinity)", "Chef", "Expertise Giver"},
        Multi = false,
        Default = " ",
    })


    MobsTP:OnChanged(function(Mobbb)
if Mobbb == "Bartender (Sam)" then
game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame = game:GetService("Workspace").Merchants.DrinkMerchant.HumanoidRootPart.CFrame
Fluent:Notify({
    Title = "Teleport Notify",
    Content = "Teleported to " ..Mobbb,
    Duration = 1
})
elseif Mobbb == "Bartender (Bar)" then
game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame = game:GetService("Workspace").Merchants.BetterDrinkMerchant.HumanoidRootPart.CFrame
Fluent:Notify({
    Title = "Teleport Notify",
    Content = "Teleported to " ..Mobbb,
    Duration = 1
})
elseif Mobbb == "Sam" then
game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame = game:GetService("Workspace").Merchants.QuestMerchant.HumanoidRootPart.CFrame
Fluent:Notify({
    Title = "Teleport Notify",
    Content = "Teleported to " ..Mobbb,
    Duration = 1
})
elseif Mobbb == "Friend" then
game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame = game:GetService("Workspace").Merchants.FriendMerchant.HumanoidRootPart.CFrame
Fluent:Notify({
    Title = "Teleport Notify",
    Content = "Teleported to " ..Mobbb,
    Duration = 1
})
elseif Mobbb == "Cannon Seller" then
game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame = game:GetService("Workspace").Merchants.HeavyWeaponsMerchant.HumanoidRootPart.CFrame
Fluent:Notify({
    Title = "Teleport Notify",
    Content = "Teleported to " ..Mobbb,
    Duration = 1
})
elseif Mobbb == "Krizma Seller" then
game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame = game:GetService("Workspace").Merchants.KrizmaMerch.HumanoidRootPart.CFrame
Fluent:Notify({
    Title = "Teleport Notify",
    Content = "Teleported to " ..Mobbb,
    Duration = 1
})
elseif Mobbb == "Flail Seller" then
game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame = game:GetService("Workspace").Merchants.FlailMerchant.HumanoidRootPart.CFrame
Fluent:Notify({
    Title = "Teleport Notify",
    Content = "Teleported to " ..Mobbb,
    Duration = 1
})
elseif Mobbb == "Sword Seller" then
game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame = game:GetService("Workspace").Merchants.SwordMerchant.HumanoidRootPart.CFrame
Fluent:Notify({
    Title = "Teleport Notify",
    Content = "Teleported to " ..Mobbb,
    Duration = 1
})
elseif Mobbb == "Gun Seller" then
game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame = game:GetService("Workspace").Merchants.SniperMerchant.HumanoidRootPart.CFrame
Fluent:Notify({
    Title = "Teleport Notify",
    Content = "Teleported to " ..Mobbb,
    Duration = 1
})
elseif Mobbb == "Merlin" then
game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame = game:GetService("Workspace").Merchants.QuestFishMerchant.HumanoidRootPart.CFrame
Fluent:Notify({
    Title = "Teleport Notify",
    Content = "Teleported to " ..Mobbb,
    Duration = 1
})
elseif Mobbb == "Emotes Teacher" then
game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame = game:GetService("Workspace").Merchants.EmoteMerchant.HumanoidRootPart.CFrame
Fluent:Notify({
    Title = "Teleport Notify",
    Content = "Teleported to " ..Mobbb,
    Duration = 1
})
elseif Mobbb == "Lucy (Affinity)" then
game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame = game:GetService("Workspace").Merchants.AffinityMerchant.HumanoidRootPart.CFrame
Fluent:Notify({
    Title = "Teleport Notify",
    Content = "Teleported to " ..Mobbb,
    Duration = 1
})
elseif Mobbb == "Chef" then
game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame = game:GetService("Workspace").Merchants.FishMerchant.HumanoidRootPart.CFrame
Fluent:Notify({
    Title = "Teleport Notify",
    Content = "Teleported to " ..Mobbb,
    Duration = 1
})
elseif Mobbb == "Expertise Giver" then
game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame = game:GetService("Workspace").Merchants.ExpertiseMerchant.Head.CFrame
Fluent:Notify({
    Title = "Teleport Notify",
    Content = "Teleported to " ..Mobbb,
    Duration = 1
})
end
end)

IslandTP = Tabs.Teleport:AddDropdown("IslandTP", {
        Title = "Island Teleport",
        Values = {"Sam Island", "Sand/Windmill", "Cave", "Near-Bar Island", "Bar","Boss-5K/Tornado Island","Kaizu/Aura Boss Island","Krizma Island", "Sand Castle", "Purple Island", "Merlin/Boar Island","Flail Island","Snowy Island","Big Snow Mountain","Big Black Mountain","Marine Ford","Forest","Green Rock/Cannon Island","Race/New Island","Pyramid","Mansion","Moon Island","Vokun Island"},
        Multi = false,
        Default = " ",
    })


IslandTP:OnChanged(function(zxcrris)
if zxcrris == "Sam Island" then
game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(-1280.31726, 239.998398, -1326.91028, -0.999996781, 7.21743021e-08, -0.00254111853, 7.21170679e-08, 1, 2.26145023e-08, 0.00254111853, 2.24311716e-08, -0.999996781)
Fluent:Notify({
    Title = "Teleport Notify",
    Content = "Teleported to " ..zxcrris,
    Duration = 1
})
elseif zxcrris == "Sand/Windmill" then
game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(85.0743713, 282.310211, -36.9613533, 0.136958227, -1.5720218e-08, 0.990576804, 4.45528325e-09, 1, 1.52537698e-08, -0.990576804, 2.3241713e-09, 0.136958227)
Fluent:Notify({
    Title = "Teleport Notify",
    Content = "Teleported to " ..zxcrris,
    Duration = 1
})
elseif zxcrris == "Cave" then
game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(1.43468678, 306.999908, -927.490723, -0.0791061521, -1.76420407e-08, 0.996866226, -2.13624607e-09, 1, 1.75279791e-08, -0.996866226, -7.42980621e-10, -0.0791061521)
Fluent:Notify({
    Title = "Teleport Notify",
    Content = "Teleported to " ..zxcrris,
    Duration = 1
})
elseif zxcrris == "Near-Bar Island" then
game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(887.123474, 302.998199, 1218.83557, -0.00453962386, 6.63435955e-08, 0.999989688, -9.09009827e-08, 1, -6.67569395e-08, -0.999989688, -9.12030984e-08, -0.00453962386)
Fluent:Notify({
    Title = "Teleport Notify",
    Content = "Teleported to " ..zxcrris,
    Duration = 1
})
elseif zxcrris == "Bar" then
game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(1520.92224, 303.489471, 2138.15845, 0.996849716, 5.16282661e-09, -0.0793136358, -5.49105694e-09, 1, -3.92028143e-09, 0.0793136358, 4.34344694e-09, 0.996849716)
Fluent:Notify({
    Title = "Teleport Notify",
    Content = "Teleported to " ..zxcrris,
    Duration = 1
})
elseif zxcrris == "Boss-5K/Tornado Island" then
game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(4854.58057, 605.394287, -7281.04297, -0.969173074, -2.48229548e-10, 0.24638097, -1.49729756e-10, 1, 4.18520579e-10, -0.24638097, 3.68728326e-10, -0.969173074)
Fluent:Notify({
    Title = "Teleport Notify",
    Content = "Teleported to " ..zxcrris,
    Duration = 1
})
elseif zxcrris == "Kaizu/Aura Boss Island" then
game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(-1575.16821, 215.999954, 9946.87207, 0.980506063, -4.32691003e-08, 0.196488753, 3.53463392e-08, 1, 4.38284715e-08, -0.196488753, -3.60289221e-08, 0.980506063)
Fluent:Notify({
    Title = "Teleport Notify",
    Content = "Teleported to " ..zxcrris,
    Duration = 1
})
elseif zxcrris == "Krizma Island" then
game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(-1074.56641, 376.999908, 1667.55762, 0.999868512, -3.29602017e-08, 0.0162166674, 3.19331654e-08, 1, 6.35909743e-08, -0.0162166674, -6.30647605e-08, 0.999868512)
Fluent:Notify({
    Title = "Teleport Notify",
    Content = "Teleported to " ..zxcrris,
    Duration = 1
})
elseif zxcrris == "Sand Castle" then
game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(1078.84058, 245.200073, -3333.86084, 0.710731328, 4.62040433e-08, -0.703463554, -3.03972776e-08, 1, 3.49694673e-08, 0.703463554, -3.47051743e-09, 0.710731328)
Fluent:Notify({
    Title = "Teleport Notify",
    Content = "Teleported to " ..zxcrris,
    Duration = 1
})
elseif zxcrris == "Purple Island" then
game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(-5169.17529, 522.999817, -7776.02295, -0.999938011, 4.8491323e-08, 0.011133004, 4.95431145e-08, 1, 9.41995779e-08, -0.011133004, 9.47453032e-08, -0.999938011)
Fluent:Notify({
    Title = "Teleport Notify",
    Content = "Teleported to " ..zxcrris,
    Duration = 1
})
elseif zxcrris == "Merlin/Boar Island" then
game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(-1699.38147, 217.07135, -275.71048, -0.0825118199, 7.11512556e-08, 0.996590078, 3.90585164e-08, 1, -6.81608867e-08, -0.996590078, 3.33012515e-08, -0.0825118199)
Fluent:Notify({
    Title = "Teleport Notify",
    Content = "Teleported to " ..zxcrris,
    Duration = 1
})
elseif zxcrris == "Flail Island" then
game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(1133.75415, 230.999908, 3368.14087, -0.0550645292, -1.73162586e-08, 0.998482823, -2.23419292e-08, 1, 1.61104534e-08, -0.998482823, -2.14209184e-08, -0.0550645292)
Fluent:Notify({
    Title = "Teleport Notify",
    Content = "Teleported to " ..zxcrris,
    Duration = 1
})
elseif zxcrris == "Snowy Island" then
game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(-1892.50696, 224.999954, 3303.00659, 0.999911904, -2.22762928e-08, 0.0132755609, 2.16087255e-08, 1, 5.04288202e-08, -0.0132755609, -5.01375084e-08, 0.999911904)
Fluent:Notify({
    Title = "Teleport Notify",
    Content = "Teleported to " ..zxcrris,
    Duration = 1
})
elseif zxcrris == "Big Snow Mountain" then
game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(6225.76221, 485.999908, -1601.78601, -0.0377998017, 1.83320459e-09, 0.99928534, -5.03370901e-09, 1, -2.02492489e-09, -0.99928534, -5.10665332e-09, -0.0377998017)
Fluent:Notify({
    Title = "Teleport Notify",
    Content = "Teleported to " ..zxcrris,
    Duration = 1
})
elseif zxcrris == "Big Black Mountain" then
game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(2013.95776, 487.999908, -720.344543, 0.151551947, -7.72941178e-08, 0.988449275, -2.81923054e-08, 1, 8.25198825e-08, -0.988449275, -4.03727149e-08, 0.151551947)
Fluent:Notify({
    Title = "Teleport Notify",
    Content = "Teleported to " ..zxcrris,
    Duration = 1
})
elseif zxcrris == "Marine Ford" then
game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(-3133.93311, 275.901154, -3643.74341, -0.999911427, -3.90428356e-09, 0.0133108366, -4.18463797e-09, 1, -2.10342552e-08, -0.0133108366, -2.1088093e-08, -0.999911427)
Fluent:Notify({
    Title = "Teleport Notify",
    Content = "Teleported to " ..zxcrris,
    Duration = 1
})
elseif zxcrris == "Forest" then
game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(-6015.46631, 401.999908, 13.9106245, 0.726529002, 2.63533284e-08, 0.687135816, 4.80932307e-08, 1, -8.92028211e-08, -0.687135816, 9.78550219e-08, 0.726529002)
Fluent:Notify({
    Title = "Teleport Notify",
    Content = "Teleported to " ..zxcrris,
    Duration = 1
})
elseif zxcrris == "Green Rock/Cannon Island" then
game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(-2623.29224, 269.599915, 1090.10852, -0.642234623, -2.10928164e-08, 0.766508102, 4.81428373e-08, 1, 6.7855531e-08, -0.766508102, 8.04810441e-08, -0.642234623)
Fluent:Notify({
    Title = "Teleport Notify",
    Content = "Teleported to " ..zxcrris,
    Duration = 1
})
elseif zxcrris == "Race/New Island" then
game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(-6370.9834, 258.601776, 3841.90991, 1, 2.19709069e-08, 1.10745526e-13, -2.19709069e-08, 1, 8.39457854e-08, -1.08901156e-13, -8.39457854e-08, 1)
Fluent:Notify({
    Title = "Teleport Notify",
    Content = "Teleported to " ..zxcrris,
    Duration = 1
})
elseif zxcrris == "Pyramid" then
game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(118.847107, 309.999908, 4943.37939, 0.99994427, -1.68357115e-08, -0.0105592962, 1.60353579e-08, 1, -7.58807701e-08, 0.0105592962, 7.57072129e-08, 0.99994427)
Fluent:Notify({
    Title = "Teleport Notify",
    Content = "Teleported to " ..zxcrris,
    Duration = 1
})
elseif zxcrris == "Mansion" then
game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(1835.2124, 269.999908, 861.194275, -0.693691909, -5.51743398e-08, 0.720271826, 2.95930125e-09, 1, 7.94521995e-08, -0.720271826, 5.72468508e-08, -0.693691909)
Fluent:Notify({
    Title = "Teleport Notify",
    Content = "Teleported to " ..zxcrris,
    Duration = 1
})
elseif zxcrris == "Moon Island" then
game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(3188.60791, 356.999908, 1627.56262, 0.999993682, 7.89155479e-08, -0.0035616986, -7.86453924e-08, 1, 7.59900161e-08, 0.0035616986, -7.57094227e-08, 0.999993682)
Fluent:Notify({
    Title = "Teleport Notify",
    Content = "Teleported to " ..zxcrris,
    Duration = 1
})
elseif zxcrris == "Vokun Island" then
game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(4434.4165, 487.999908, 5735.77051, 0.967606544, 4.68326107e-08, -0.252463102, -5.17578975e-08, 1, -1.28679076e-08, 0.252463102, 2.55180304e-08, 0.967606544)
Fluent:Notify({
    Title = "Teleport Notify",
    Content = "Teleported to " ..zxcrris,
    Duration = 1
})
end
end)

Tabs.Teleport:AddSection("					  --Special Teleport--")

Tabs.Teleport:AddButton({
        Title = "Teleport To Safe Zone",
        Description = "(A high platform)",
        Callback = function()
game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame = game:GetService("Workspace")["SafeZoneOuterSpacePart"].CFrame * CFrame.new(0, 5, 0)
        end
    })

Tabs.Teleport:AddButton({
        Title = "Teleport To Fishing Place",
        Description = "(A place where you can go fishing)",
        Callback = function()
game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame = game:GetService("Workspace")["fishingplace"].CFrame * CFrame.new(0, 5, 0)
        end
    })

Tabs.Teleport:AddButton({
        Title = "Teleport To Rayleigh",
        Description = "Check and teleport to Rayleigh if he spawns",
        Callback = function()
if game:GetService("Workspace").Merchants.QuestHakiMerchant.Clickable.Available.Value == true then
game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame = game:GetService("Workspace").Merchants.QuestHakiMerchant.HumanoidRootPart.CFrame
else
Fluent:Notify({
    Title = "Rayleigh Notify",
    Content = "Rayleigh hasn't spawned yet",
    Duration = 4
})
end
        end
    })

Tabs.Teleport:AddButton({
        Title = "Teleport To Dark Atlas",
        Description = "(Legendary Pedestal)",
        Callback = function()
game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame = game:GetService("Workspace").Altar.RecepticalEffect.CFrame * CFrame.new(0, 0, 0)
        end
    })

Tabs.Weapon:AddSection("					   -----Equipment-----")
weapontype = Tabs.Weapon:AddDropdown("tanglunroie11", {
        Title = "Select Weapon Type",
        Values = {"Melee","Sniper","Sword","Utility"},
        Multi = false,
        Default = "",
    })


weapontype:OnChanged(function(wtypea)
_G.weponity = wtypea
end)

equipwe = Tabs.Weapon:AddToggle("equipwetoggle", {Title = "Auto Equip Weapon", Default = false })
equipwe:OnChanged(function()
if Options.equipwetoggle.Value == true then
getgenv().eqqqqq = true
else
getgenv().eqqqqq = false
end
while getgenv().eqqqqq do task.wait(0.1)
pcall(function()
if _G.weponity == "Melee" then
for _, c in pairs(MeleeTTT) do
if game:GetService("Players").LocalPlayer.Backpack:FindFirstChild(c) then
x = game:GetService("Players").LocalPlayer.Backpack:FindFirstChild(c)
x.Parent = game:GetService("Players").LocalPlayer.Character
end
end
elseif _G.weponity == "Sniper" then
for _, c in pairs(SniperTTT) do
if game:GetService("Players").LocalPlayer.Backpack:FindFirstChild(c) then
x = game:GetService("Players").LocalPlayer.Backpack:FindFirstChild(c)
x.Parent = game:GetService("Players").LocalPlayer.Character
end
end
elseif _G.weponity == "Sword" then
for _, c in pairs(SwordTTT) do
if game:GetService("Players").LocalPlayer.Backpack:FindFirstChild(c) then
x = game:GetService("Players").LocalPlayer.Backpack:FindFirstChild(c)
x.Parent = game:GetService("Players").LocalPlayer.Character
end
end
elseif _G.weponity == "Utility" then
for _, c in pairs(UtilityTTT) do
if game:GetService("Players").LocalPlayer.Backpack:FindFirstChild(c) then
x = game:GetService("Players").LocalPlayer.Backpack:FindFirstChild(c)
x.Parent = game:GetService("Players").LocalPlayer.Character
end
end
end
end)
end
end)

attackweapon = Tabs.Weapon:AddToggle("attackweapontoggle", {Title = "Auto Use Weapon", Default = false })
attackweapon:OnChanged(function()
if Options.attackweapontoggle.Value == true then
getgenv().useweapon = true
else
getgenv().useweapon = false
end
while getgenv().useweapon do task.wait(0.1)
pcall(function()
for i,v in pairs(game:GetService("Players").LocalPlayer.Character:GetChildren()) do
for i,c in pairs(MeleeTTT) do
if v.Name == c then
v:Activate()
end
end
for i,d in pairs(SniperTTT) do
if v.Name == d then
v:Activate()
end
end
for i,e in pairs(SwordTTT) do
if v.Name == e then
v:Activate()
end
end
for i,f in pairs(UtilityTTT) do
if v.Name == f then
v:Activate()
end
end
end
end)
end
end)

Tabs.Weapon:AddSection("				  -----Instant Weapon-----")
Tabs.Weapon:AddSection("							--Yoru Spam--")
yorusmazz = Tabs.Weapon:AddSlider("yorusmazz", {
    Title = "Yoru Speed",
    Description = "Recommend: \nCamp:15 ; Farm:25->50",
    Default = 50,
    Min = 1,
    Max = 500,
    Rounding = 0,
    Callback = function(zxceyoz)
            yoruspeedzx = tonumber(zxceyoz)
        end
    })

tyoru = Tabs.Weapon:AddToggle("tyorutoggle", {Title = "Yoru Spamming", Default = false })
tyoru:OnChanged(function()
if Options.tyorutoggle.Value == true then
_G.yoruonrt = true
while _G.yoruonrt do task.wait(0.1)
pcall(function()
if game:GetService("Players").LocalPlayer.Backpack:FindFirstChild("Yoru") then
for i,v in pairs(getconnections(game:GetService("Players").LocalPlayer.Backpack:FindFirstChild("Yoru").RequestAnimation.OnClientEvent)) do 
yorucode = getsenv(game:GetService("Players").LocalPlayer.Backpack:FindFirstChild("Yoru").AnimationController).PlaceId
end
elseif game:GetService("Players").LocalPlayer.Character:FindFirstChild("Yoru") then
for i,v in pairs(getconnections(game:GetService("Players").LocalPlayer.Character:FindFirstChild("Yoru").RequestAnimation.OnClientEvent)) do 
yorucode = getsenv(game:GetService("Players").LocalPlayer.Character:FindFirstChild("Yoru").AnimationController).PlaceId
end
end
if yorucode ~= "" and yorucode ~= nil then
repeat task.wait(0.1)
for i = 1, yoruspeedzx do
local args = {
[1] = yorucode
}

game:GetService("Players").LocalPlayer.Character.Yoru.RequestAnimation:FireServer(unpack(args))
end
until not _G.yoruonrt or game:GetService("Players").LocalPlayer.PlayerGui.Load.Frame.Visible == true or game:GetService("Players").LocalPlayer.Character.Humanoid.Health == 0
end
yorucode = ""
end)
end

else
_G.yoruonrt = false
end
end)

Tabs.Weapon:AddSection("						 --Cestus Spam--")
cestussmazz = Tabs.Weapon:AddSlider("cestussmazz", {
    Title = "Cestus Speed",
    Description = "Recommend: \nCamp:15 ; Farm:25->50",
    Default = 50,
    Min = 1,
    Max = 500,
    Rounding = 0,
    Callback = function(zxceyoz)
            cestusspeedzx = tonumber(zxceyoz)
        end
    })

tcestus = Tabs.Weapon:AddToggle("tcestustoggle", {Title = "Cestus Spamming", Default = false })
tcestus:OnChanged(function()
if Options.tcestustoggle.Value == true then
_G.cestusonrt = true
while _G.cestusonrt do task.wait(0.1)
pcall(function()
if game:GetService("Players").LocalPlayer.Backpack:FindFirstChild("Seastone Cestus") then
for i,v in pairs(getconnections(game:GetService("Players").LocalPlayer.Backpack:FindFirstChild("Seastone Cestus").RequestAnimation.OnClientEvent)) do 
cestuscode = getsenv(game:GetService("Players").LocalPlayer.Backpack:FindFirstChild("Seastone Cestus").AnimationController).PlaceId
end
elseif game:GetService("Players").LocalPlayer.Character:FindFirstChild("Seastone Cestus") then
for i,v in pairs(getconnections(game:GetService("Players").LocalPlayer.Character:FindFirstChild("Seastone Cestus").RequestAnimation.OnClientEvent)) do 
cestuscode = getsenv(game:GetService("Players").LocalPlayer.Character:FindFirstChild("Seastone Cestus").AnimationController).PlaceId
end
end
repeat task.wait(0.1)
for i = 1, cestusspeedzx do
local args = {
[1] = cestuscode
}

game:GetService("Players").LocalPlayer.Character["Seastone Cestus"].RequestAnimation:FireServer(unpack(args))
end
until not _G.cestusonrt or game:GetService("Players").LocalPlayer.PlayerGui.Load.Frame.Visible == true
cestuscode = ""
end)
end
else
_G.cestusonrt = false
end
end)

Tabs.Main:AddSection("					     --Stats Farming--")
statsfarm = Tabs.Main:AddToggle("statstoggle", {Title = "Auto Farm Mixer (Fast)", Default = false })
statsfarm:OnChanged(function()
if Options.statstoggle.Value == true then
getgenv().farmstats = true

task.spawn(function()
while getgenv().farmstats do task.wait(0.1)
pcall(function()
repeat task.wait()
for i,v in pairs(game:GetService("Workspace").Barrels.Barrels:GetDescendants()) do
if v.Name == "Barrel" and getgenv().farmstats == true and not game:GetService("Players").LocalPlayer.Backpack:FindFirstChild("Compass") and not game:GetService("Players").LocalPlayer.Character:FindFirstChild("Compass") then
game:GetService("Workspace")[""..usingname].HumanoidRootPart.CFrame = v.CFrame + Vector3.new(0, 5, 0)
task.wait()
amongus()
end
end
for i,v in pairs(game:GetService("Workspace").Barrels:GetDescendants()) do
if v.Name == "Crate" and getgenv().farmstats == true and not game:GetService("Players").LocalPlayer.Backpack:FindFirstChild("Compass") and not game:GetService("Players").LocalPlayer.Character:FindFirstChild("Compass") then
game:GetService("Workspace")[""..usingname].HumanoidRootPart.CFrame = v.CFrame + Vector3.new(0, 5, 0)
task.wait()
amongus()
end
end
if getgenv().farmstats == true and not game:GetService("Players").LocalPlayer.Backpack:FindFirstChild("Compass") and not game:GetService("Players").LocalPlayer.Character:FindFirstChild("Compass") then
game:GetService("Workspace")[""..usingname].HumanoidRootPart.CFrame = game:GetService("Workspace")["SafeZoneOuterSpacePart"].CFrame * CFrame.new(0, 5, 0)
task.wait()
amongus()
workspace:WaitForChild("Merchants"):WaitForChild("FishMerchant"):WaitForChild("Clickable"):WaitForChild("Retum"):FireServer()
end
task.wait(15)
until not getgenv().farmstats or game:GetService("Players").LocalPlayer.Character.Humanoid.Health == 0
end)
end
end)

else
getgenv().farmstats = false
end
end)

statsfarmslow = Tabs.Main:AddToggle("statsfarmslowtoggle", {Title = "Auto Farm Mixer (Normal)", Default = false })
statsfarmslow:OnChanged(function()
if Options.statsfarmslowtoggle.Value == true then
getgenv().farmslowstats = true

task.spawn(function()
while getgenv().farmslowstats do task.wait(0.1)
pcall(function()
repeat
for i,v in pairs(game:GetService("Workspace").Barrels.Barrels:GetDescendants()) do
if v.Name == "Barrel" and getgenv().farmslowstats == true and not game:GetService("Players").LocalPlayer.Backpack:FindFirstChild("Compass") and not game:GetService("Players").LocalPlayer.Character:FindFirstChild("Compass") then
game:GetService("Workspace")[""..usingname].HumanoidRootPart.CFrame = v.CFrame + Vector3.new(0, 5, 0)
task.wait()
amongus()
task.wait(0.05)
end
end
for i,v in pairs(game:GetService("Workspace").Barrels:GetDescendants()) do
if v.Name == "Crate" and getgenv().farmslowstats == true and not game:GetService("Players").LocalPlayer.Backpack:FindFirstChild("Compass") and not game:GetService("Players").LocalPlayer.Character:FindFirstChild("Compass") then
game:GetService("Workspace")[""..usingname].HumanoidRootPart.CFrame = v.CFrame + Vector3.new(0, 5, 0)
task.wait()
amongus()
task.wait(0.05)
end
end
if getgenv().farmslowstats == true and not game:GetService("Players").LocalPlayer.Backpack:FindFirstChild("Compass") and not game:GetService("Players").LocalPlayer.Character:FindFirstChild("Compass") then task.wait()
game:GetService("Workspace")[""..usingname].HumanoidRootPart.CFrame = game:GetService("Workspace")["SafeZoneOuterSpacePart"].CFrame * CFrame.new(0, 5, 0)
task.wait()
amongus()
workspace:WaitForChild("Merchants"):WaitForChild("FishMerchant"):WaitForChild("Clickable"):WaitForChild("Retum"):FireServer()
end
task.wait(15)
until not getgenv().farmslowstats or game:GetService("Players").LocalPlayer.Character.Humanoid.Health == 0
end)
end
end)

else
getgenv().farmslowstats = false
end
end)

Tabs.Main:AddSection("                                    Drink")

statsdrink = Tabs.Main:AddToggle("statsdrinktoggle", {Title = "Auto Drink Mixer", Default = false })
statsdrink:OnChanged(function()
if Options.statsdrinktoggle.Value == true then
getgenv().autodrinkmixer = true
else
getgenv().autodrinkmixer = false
end

while getgenv().autodrinkmixer do task.wait(2)
pcall(function()
for i,v in pairs(game:GetService("Players").LocalPlayer.Backpack:GetChildren()) do
if string.find(v.Name, "Juice") or string.find(v.Name, "Milk") or string.find(v.Name, "Cider") or string.find(v.Name, "Lemonade") or string.find(v.Name, "Smoothie") or string.find(v.Name, "Golden") then
v.Parent = game:GetService("Players").LocalPlayer.Character
end
end
for i,v in pairs(game:GetService("Players").LocalPlayer.Character:GetChildren()) do
if string.find(v.Name, "Juice") or string.find(v.Name, "Milk") or string.find(v.Name, "Cider") or string.find(v.Name, "Lemonade") or string.find(v.Name, "Smoothie") or string.find(v.Name, "Golden") then
v:Activate()
v:Activate()
v:Activate()
v:Activate()
v:Activate()
v:Activate()
v:Destroy()
end
end
for i,c in pairs(game:GetService("Players").LocalPlayer.Backpack:GetChildren()) do
if string.find(c.Name, "Crab") then
c:Destroy()
end
end
end)
end
end)

Tabs.Mobs:AddSection("						    --Bring Mobs--")

mobbakaak = Tabs.Mobs:AddDropdown("mobbakaak", {
        Title = "Select Mobs",
        Description = "Select Mobs To Bring.",
        Values = {"Crab","Boar","Bandit","Thief","Thug","Fr","Angry Bob","Gunslinger","Cave Demon","Guard","Vokun","Bruno","Buster","Bucky","Gunner Captain"},
        Multi = true,
        Default = {},
})

mobbakaak:OnChanged(function(mobfrepz)
table.clear(Mobsszz)
task.wait(0.1)
for mobfrepz, State in next, mobfrepz do
table.insert(Mobsszz, mobfrepz)
end
end)

disbringmz = Tabs.Mobs:AddSlider("disbriasdngmz", {
    Title = "Bring Distance",
    Description = "Adjust bring distance",
    Default = 10,
    Min = -20,
    Max = 20,
    Rounding = 0,
    Callback = function(asdqwezxsd)
            mobbringdis = tonumber(asdqwezxsd)*(-1)
        end
    })

bringmzos = Tabs.Mobs:AddToggle("bringmzostoggle", {Title = "Auto Bring Mobs", Default = false })
bringmzos:OnChanged(function()
if Options.bringmzostoggle.Value == true then
_G.bringmzowpa = true
while _G.bringmzowpa do task.wait()
pcall(function()
for _, mobs in pairs(Mobsszz) do
for _, bringz in pairs(game:GetService("Workspace").Enemies:GetChildren()) do
if string.find(bringz.Name, mobs) and bringz:FindFirstChild("HumanoidRootPart") then
bringz.HumanoidRootPart.CanCollide = false
bringz.HumanoidRootPart.Size = Vector3.new(5, 5, 5)
bringz:FindFirstChild("HumanoidRootPart").Anchored = true
bringz:FindFirstChild("HumanoidRootPart").CFrame = game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame * CFrame.new(0,0,mobbringdis)
bringz.HumanoidRootPart.Color = Color3.fromRGB(0, 255, 127)
bringz.HumanoidRootPart.Transparency = 0.9
if bringz.Humanoid.Health == 0 then
bringz.HumanoidRootPart.Size = Vector3.new(0, 0, 0)
bringz:Destroy()
end
end
end
end
end)
end
else
_G.bringmzowpa = false
end
end)

Tabs.Mobs:AddSection("				  --Mobs Farming (Fruit)--")

mobsfarmse = Tabs.Mobs:AddDropdown("mobsfarmse", {
        Title = "Select Mobs",
        Description = "Select Mobs To Farm.",
        Values = {"Crab","Boar","Bandit","Thief","Thug","Fr","Angry Bob","Gunslinger","Cave Demon","Guard","Vokun","Bruno","Buster","Bucky","Gunner Captain"},
        Multi = true,
        Default = {},
})

mobsfarmse:OnChanged(function(mobsfarmseww)
table.clear(Mobsfarmz)
task.wait(0.1)
for mobsfarmseww, State in next, mobsfarmseww do
table.insert(Mobsfarmz, mobsfarmseww)
end
end)

jmkoertz = Tabs.Mobs:AddDropdown("jmkoertz", {
        Title = "Select Fruit",
        Values = {"Light","Magma","Gravity","Rumble","Bomb"},
        Multi = false,
        Default = "",
    })


jmkoertz:OnChanged(function(asdwqeasda)
_G.fruitfarmz = asdwqeasda
end)

fruitfarmfr = Tabs.Mobs:AddToggle("fruitfarmfrtoggle", {Title = "Auto Farm Mobs 1-Shot (Fruit)", Default = false })
fruitfarmfr:OnChanged(function()
if Options.fruitfarmfrtoggle.Value == true then
_G.farmfruit = true

task.spawn(function()
while _G.farmfruit do task.wait(0.1)
pcall(function()
repeat task.wait()
if _G.fruitfarmz == "Light" and _G.farmfruit == true then
repeat task.wait()
for _,moblist in pairs(Mobsfarmz) do
for _,mobalive in pairs(game:GetService("Workspace").Enemies:GetChildren()) do
if string.find(mobalive.Name,moblist) then
if _G.farmfruit == true and _G.fruitfarmz == "Light" and mobalive.Humanoid.Health ~= 0 and not game:GetService("Players").LocalPlayer.Backpack:FindFirstChild("Compass") and not game:GetService("Players").LocalPlayer.Character:FindFirstChild("Compass") then 
if string.find(mobalive.Name,"Gun") or string.find(mobalive.Name,"Cave") or string.find(mobalive.Name,"Bruno") or string.find(mobalive.Name,"Bucky") or string.find(mobalive.Name,"Buster") or string.find(mobalive.Name,"Vokun") then 
game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame = mobalive.HumanoidRootPart.CFrame * CFrame.new(0,5,0)
mobalive:FindFirstChild("HumanoidRootPart").Anchored = false
mobalive.HumanoidRootPart.CanCollide = true
mobalive:FindFirstChild("Humanoid").Health = 0
mobalive.Head:Destroy()
mobalive:FindFirstChildOfClass("Humanoid"):ChangeState(Enum.HumanoidStateType.Dead)
task.wait(0.5)
local args = {
    [1] = getsenv(game:GetService("Players").LocalPlayer.Character.Powers.Light).VTCrv,
    [2] = "LightPower2",
    [3] = "StartCharging",
    [4] = CFrame.new(0,0,0),
    [5] = workspace.IslandCaver.Stones.Stone,
    [9] = "Right"
}

game:GetService("Players").LocalPlayer.Character.Powers.Light.RemoteEvent:FireServer(unpack(args))
task.wait()
local args = {
    [1] = getsenv(game:GetService("Players").LocalPlayer.Character.Powers.Light).VTCrv,
    [2] = "LightPower2",
    [3] = "StopCharging",
    [4] = mobalive.HumanoidRootPart.CFrame,
    [5] = workspace.IslandCaver.Stones.Stone,
    [6] = 100
}

game:GetService("Players").LocalPlayer.Character.Powers.Light.RemoteEvent:FireServer(unpack(args))
task.wait(0.2)
else
task.wait(0.05)
game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame = mobalive.HumanoidRootPart.CFrame * CFrame.new(0,5,0)
task.wait(0.05)
local args = {
    [1] = getsenv(game:GetService("Players").LocalPlayer.Character.Powers.Light).VTCrv,
    [2] = "LightPower2",
    [3] = "StartCharging",
    [4] = CFrame.new(0,0,0),
    [5] = workspace.IslandCaver.Stones.Stone,
    [9] = "Right"
}

game:GetService("Players").LocalPlayer.Character.Powers.Light.RemoteEvent:FireServer(unpack(args))
task.wait()
local args = {
    [1] = getsenv(game:GetService("Players").LocalPlayer.Character.Powers.Light).VTCrv,
    [2] = "LightPower2",
    [3] = "StopCharging",
    [4] = mobalive.HumanoidRootPart.CFrame,
    [5] = workspace.IslandCaver.Stones.Stone,
    [6] = 100
}

game:GetService("Players").LocalPlayer.Character.Powers.Light.RemoteEvent:FireServer(unpack(args))
task.wait(0.09)
local args = {
    [1] = getsenv(game:GetService("Players").LocalPlayer.Character.Powers.Light).VTCrv,
    [2] = "LightPower2",
    [3] = "StartCharging",
    [4] = CFrame.new(0,0,0),
    [5] = workspace.IslandCaver.Stones.Stone,
    [9] = "Right"
}

game:GetService("Players").LocalPlayer.Character.Powers.Light.RemoteEvent:FireServer(unpack(args))
task.wait()
local args = {
    [1] = getsenv(game:GetService("Players").LocalPlayer.Character.Powers.Light).VTCrv,
    [2] = "LightPower2",
    [3] = "StopCharging",
    [4] = mobalive.HumanoidRootPart.CFrame,
    [5] = workspace.IslandCaver.Stones.Stone,
    [6] = 100
}

game:GetService("Players").LocalPlayer.Character.Powers.Light.RemoteEvent:FireServer(unpack(args))
end
end
end
end
end
until _G.fruitfarmz ~= "Light" or _G.farmfruit == false
elseif _G.fruitfarmz == "Magma" and _G.farmfruit == true then
repeat task.wait()
for _,moblist in pairs(Mobsfarmz) do
for _,mobalive in pairs(game:GetService("Workspace").Enemies:GetChildren()) do
if string.find(mobalive.Name,moblist) then
if _G.farmfruit == true and _G.fruitfarmz == "Magma" and mobalive.Humanoid.Health ~= 0 and not game:GetService("Players").LocalPlayer.Backpack:FindFirstChild("Compass") and not game:GetService("Players").LocalPlayer.Character:FindFirstChild("Compass") then 
if string.find(mobalive.Name,"Gun") or string.find(mobalive.Name,"Cave") or string.find(mobalive.Name,"Bruno") or string.find(mobalive.Name,"Bucky") or string.find(mobalive.Name,"Buster") or string.find(mobalive.Name,"Vokun") then 
game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame = mobalive.HumanoidRootPart.CFrame * CFrame.new(0,5,0)
mobalive:FindFirstChild("HumanoidRootPart").Anchored = false
mobalive.HumanoidRootPart.CanCollide = true
mobalive:FindFirstChild("Humanoid").Health = 0
mobalive.Head:Destroy()
mobalive:FindFirstChildOfClass("Humanoid"):ChangeState(Enum.HumanoidStateType.Dead)
task.wait(0.5)
local args = {
    [1] = getsenv(game:GetService("Players").LocalPlayer.Character.Powers.Magma).VTCmel,
    [2] = "MagmaPower1",
    [3] = "StartCharging",
    [4] = CFrame.new(0,0,0),
    [5] = workspace:WaitForChild("IslandTown"):WaitForChild("Beach"):WaitForChild("Beach"),
    [7] = "Right"
}

game:GetService("Players").LocalPlayer.Character.Powers.Magma.RemoteEvent:FireServer(unpack(args))
task.wait()
local args = {
    [1] = getsenv(game:GetService("Players").LocalPlayer.Character.Powers.Magma).VTCmel,
    [2] = "MagmaPower1",
    [3] = "StopCharging",
    [4] = mobalive.HumanoidRootPart.CFrame,
    [5] = workspace:WaitForChild("IslandTown"):WaitForChild("Beach"):WaitForChild("Beach"),
    [6] = 100
}

game:GetService("Players").LocalPlayer.Character.Powers.Magma.RemoteEvent:FireServer(unpack(args))
task.wait(0.2)
else
task.wait(0.05)
game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame = mobalive.HumanoidRootPart.CFrame * CFrame.new(0,5,0)
task.wait(0.05)
local args = {
    [1] = getsenv(game:GetService("Players").LocalPlayer.Character.Powers.Magma).VTCmel,
    [2] = "MagmaPower1",
    [3] = "StartCharging",
    [4] = CFrame.new(0,0,0),
    [5] = workspace:WaitForChild("IslandTown"):WaitForChild("Beach"):WaitForChild("Beach"),
    [7] = "Right"
}

game:GetService("Players").LocalPlayer.Character.Powers.Magma.RemoteEvent:FireServer(unpack(args))
task.wait()
local args = {
    [1] = getsenv(game:GetService("Players").LocalPlayer.Character.Powers.Magma).VTCmel,
    [2] = "MagmaPower1",
    [3] = "StopCharging",
    [4] = mobalive.HumanoidRootPart.CFrame,
    [5] = workspace:WaitForChild("IslandTown"):WaitForChild("Beach"):WaitForChild("Beach"),
    [6] = 100
}

game:GetService("Players").LocalPlayer.Character.Powers.Magma.RemoteEvent:FireServer(unpack(args))
task.wait(0.09)
local args = {
    [1] = getsenv(game:GetService("Players").LocalPlayer.Character.Powers.Magma).VTCmel,
    [2] = "MagmaPower1",
    [3] = "StartCharging",
    [4] = CFrame.new(0,0,0),
    [5] = workspace:WaitForChild("IslandTown"):WaitForChild("Beach"):WaitForChild("Beach"),
    [7] = "Right"
}

game:GetService("Players").LocalPlayer.Character.Powers.Magma.RemoteEvent:FireServer(unpack(args))
task.wait()
local args = {
    [1] = getsenv(game:GetService("Players").LocalPlayer.Character.Powers.Magma).VTCmel,
    [2] = "MagmaPower1",
    [3] = "StopCharging",
    [4] = mobalive.HumanoidRootPart.CFrame,
    [5] = workspace:WaitForChild("IslandTown"):WaitForChild("Beach"):WaitForChild("Beach"),
    [6] = 100
}

game:GetService("Players").LocalPlayer.Character.Powers.Magma.RemoteEvent:FireServer(unpack(args))
end
end
end
end
end
until _G.fruitfarmz ~= "Magma" or _G.farmfruit == false
elseif _G.fruitfarmz == "Bomb" and _G.farmfruit == true then
repeat task.wait()
for _,moblist in pairs(Mobsfarmz) do
for _,mobalive in pairs(game:GetService("Workspace").Enemies:GetChildren()) do
if string.find(mobalive.Name,moblist) then
if _G.farmfruit == true and _G.fruitfarmz == "Bomb" and mobalive.Humanoid.Health ~= 0 and not game:GetService("Players").LocalPlayer.Backpack:FindFirstChild("Compass") and not game:GetService("Players").LocalPlayer.Character:FindFirstChild("Compass") then 
if string.find(mobalive.Name,"Gun") or string.find(mobalive.Name,"Cave") or string.find(mobalive.Name,"Bruno") or string.find(mobalive.Name,"Bucky") or string.find(mobalive.Name,"Buster") or string.find(mobalive.Name,"Vokun") then 
game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame = mobalive.HumanoidRootPart.CFrame * CFrame.new(0,5,0)
mobalive:FindFirstChild("HumanoidRootPart").Anchored = false
mobalive.HumanoidRootPart.CanCollide = true
mobalive:FindFirstChild("Humanoid").Health = 0
mobalive.Head:Destroy()
mobalive:FindFirstChildOfClass("Humanoid"):ChangeState(Enum.HumanoidStateType.Dead)
task.wait(0.5)
local args = {
    [1] = getsenv(game:GetService("Players").LocalPlayer.Character.Powers.Bomb).VTCcpkghc,
    [2] = "BombPower8",
    [3] = "StartCharging",
    [4] = CFrame.new(0,0,0),
    [5] = workspace:WaitForChild("IslandGrassy"):WaitForChild("Base"):WaitForChild("DirtGrass"):WaitForChild("Grass"):WaitForChild("Grass"),
    [7] = "Left"
}

game:GetService("Players").LocalPlayer.Character.Powers.Bomb.RemoteEvent:FireServer(unpack(args))
task.wait()
local args = {
    [1] = getsenv(game:GetService("Players").LocalPlayer.Character.Powers.Bomb).VTCcpkghc,
    [2] = "BombPower8",
    [3] = "StopCharging",
    [4] = CFrame.new(0,0,0),
    [5] = workspace:WaitForChild("IslandGrassy"):WaitForChild("Base"):WaitForChild("Path"):WaitForChild("Wedge"),
    [6] = 100
}

game:GetService("Players").LocalPlayer.Character.Powers.Bomb.RemoteEvent:FireServer(unpack(args))
task.wait(0.2)
else
task.wait(0.05)
game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame = mobalive.HumanoidRootPart.CFrame * CFrame.new(0,5,0)
task.wait(0.05)
local args = {
    [1] = getsenv(game:GetService("Players").LocalPlayer.Character.Powers.Bomb).VTCcpkghc,
    [2] = "BombPower8",
    [3] = "StartCharging",
    [4] = CFrame.new(0,0,0),
    [5] = workspace:WaitForChild("IslandGrassy"):WaitForChild("Base"):WaitForChild("DirtGrass"):WaitForChild("Grass"):WaitForChild("Grass"),
    [7] = "Left"
}

game:GetService("Players").LocalPlayer.Character.Powers.Bomb.RemoteEvent:FireServer(unpack(args))
task.wait()
local args = {
    [1] = getsenv(game:GetService("Players").LocalPlayer.Character.Powers.Bomb).VTCcpkghc,
    [2] = "BombPower8",
    [3] = "StopCharging",
    [4] = CFrame.new(0,0,0),
    [5] = workspace:WaitForChild("IslandGrassy"):WaitForChild("Base"):WaitForChild("Path"):WaitForChild("Wedge"),
    [6] = 100
}

game:GetService("Players").LocalPlayer.Character.Powers.Bomb.RemoteEvent:FireServer(unpack(args))
task.wait(0.09)
local args = {
    [1] = getsenv(game:GetService("Players").LocalPlayer.Character.Powers.Bomb).VTCcpkghc,
    [2] = "BombPower8",
    [3] = "StartCharging",
    [4] = CFrame.new(0,0,0),
    [5] = workspace:WaitForChild("IslandGrassy"):WaitForChild("Base"):WaitForChild("DirtGrass"):WaitForChild("Grass"):WaitForChild("Grass"),
    [7] = "Left"
}

game:GetService("Players").LocalPlayer.Character.Powers.Bomb.RemoteEvent:FireServer(unpack(args))
task.wait()
local args = {
    [1] = getsenv(game:GetService("Players").LocalPlayer.Character.Powers.Bomb).VTCcpkghc,
    [2] = "BombPower8",
    [3] = "StopCharging",
    [4] = CFrame.new(0,0,0),
    [5] = workspace:WaitForChild("IslandGrassy"):WaitForChild("Base"):WaitForChild("Path"):WaitForChild("Wedge"),
    [6] = 100
}

game:GetService("Players").LocalPlayer.Character.Powers.Bomb.RemoteEvent:FireServer(unpack(args))
end
end
end
end
end
until _G.fruitfarmz ~= "Bomb" or _G.farmfruit == false
elseif _G.fruitfarmz == "Gravity" and _G.farmfruit == true then
repeat task.wait()
for _,moblist in pairs(Mobsfarmz) do
for _,mobalive in pairs(game:GetService("Workspace").Enemies:GetChildren()) do
if string.find(mobalive.Name,moblist) then
if _G.farmfruit == true and _G.fruitfarmz == "Gravity" and mobalive.Humanoid.Health ~= 0 and not game:GetService("Players").LocalPlayer.Backpack:FindFirstChild("Compass") and not game:GetService("Players").LocalPlayer.Character:FindFirstChild("Compass") then 
game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame = mobalive.HumanoidRootPart.CFrame * CFrame.new(0,5,0)
mobalive:FindFirstChild("HumanoidRootPart").Anchored = false
mobalive.HumanoidRootPart.CanCollide = true
mobalive:FindFirstChild("Humanoid").Health = 0
mobalive.Head:Destroy()
mobalive:FindFirstChildOfClass("Humanoid"):ChangeState(Enum.HumanoidStateType.Dead)
task.wait(0.5)
local args = {
[1] = getsenv(game:GetService("Players").LocalPlayer.Character.Powers.Gravity).VTCjh,
[2] = "GravityPower4",
[3] = "StartCharging"
}

game:GetService("Players").LocalPlayer.Character.Powers.Gravity.RemoteEvent:FireServer(unpack(args))
task.wait()
local args = {
[1] = getsenv(game:GetService("Players").LocalPlayer.Character.Powers.Gravity).VTCjh,
[2] = "GravityPower4",
[3] = "StartCharging",
[4] = CFrame.new(game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.Position),
[5] = game:GetService("Players").LocalPlayer.Character.HumanoidRootPart
}
                        
game:GetService("Players").LocalPlayer.Character.Powers.Gravity.RemoteEvent:FireServer(unpack(args))
task.wait()
local args = {
[1] = getsenv(game:GetService("Players").LocalPlayer.Character.Powers.Gravity).VTCjh,
[2] = "GravityPower4",
[3] = "StopCharging",
[4] = CFrame.new(game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.Position),
[5] = game:GetService("Players").LocalPlayer.Character.HumanoidRootPart,
[6] = 300
}

game:GetService("Players").LocalPlayer.Character.Powers.Gravity.RemoteEvent:FireServer(unpack(args))
task.wait(0.2)
end
end
end
end
until _G.fruitfarmz ~= "Gravity" or _G.farmfruit == false
elseif _G.fruitfarmz == "Rumble" and _G.farmfruit == true then
repeat task.wait()
for _,moblist in pairs(Mobsfarmz) do
for _,mobalive in pairs(game:GetService("Workspace").Enemies:GetChildren()) do
if string.find(mobalive.Name,moblist) then
if _G.farmfruit == true and _G.fruitfarmz == "Rumble" and mobalive.Humanoid.Health ~= 0 and not game:GetService("Players").LocalPlayer.Backpack:FindFirstChild("Compass") and not game:GetService("Players").LocalPlayer.Character:FindFirstChild("Compass") then 
game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame = mobalive.HumanoidRootPart.CFrame * CFrame.new(0,5,0)
mobalive:FindFirstChild("HumanoidRootPart").Anchored = false
mobalive.HumanoidRootPart.CanCollide = true
mobalive:FindFirstChild("Humanoid").Health = 0
mobalive.Head:Destroy()
mobalive:FindFirstChildOfClass("Humanoid"):ChangeState(Enum.HumanoidStateType.Dead)
task.wait(0.5)
local args = {
    [1] = getsenv(game:GetService("Players").LocalPlayer.Character.Powers.Rumble).VTCzyhf,
    [2] = "RumblePower4",
    [3] = "Create"
}

game:GetService("Players").LocalPlayer.Character.Powers.Rumble.RemoteEvent:FireServer(unpack(args))
task.wait(0.2)
end
end
end
end
until _G.fruitfarmz ~= "Rumble" or _G.farmfruit == false
end
until _G.farmfruit == false
end)
end
end)

else
_G.farmfruit = false
end
end)

Tabs.Haki:AddSection("						  ---Haki Stuff---")
gethaki = Tabs.Haki:AddToggle("hakiget", {Title = "Auto get haki (1k lvl)", Default = false })
gethaki:OnChanged(function()
if Options.hakiget.Value == true then
_G.gethakiqwe = true
while _G.gethakiqwe do task.wait(0.1)
pcall(function()
workspace:WaitForChild("Merchants"):WaitForChild("QuestHakiMerchant"):WaitForChild("Clickable"):WaitForChild("Retum"):FireServer()
task.wait(3)
end)
end
else
_G.gethakiqwe = false
end
end)

hakirjoin = Tabs.Haki:AddToggle("hakirjointoggle", {Title = "Rejoin If 0% Haki", Default = false })
hakirjoin:OnChanged(function()
if Options.hakirjointoggle.Value == true then
_G.rejoinifhaki0 = true
while _G.rejoinifhaki0 do task.wait(0.1)
pcall(function()
repeat task.wait(0.1)
local zxm = game:GetService("Workspace").UserData["User_"..tostring(usingid)].Data.HakiLevel.Value
local zcc = zxm/100*2
if game:GetService("Workspace").UserData["User_"..tostring(usingid)].HakiBar.Value < zcc then
if #game.Players:GetChildren() > 1 then
game:GetService("Players").LocalPlayer:Kick("Rejoing Server, Please Wait...")
game:GetService("TeleportService"):TeleportToPlaceInstance(game.PlaceId, game.JobId, game:GetService("Players").LocalPlayer)
else
TeleportService = game:GetService("TeleportService")
HttpService = game:GetService("HttpService")
PlaceId, JobId = game.PlaceId, game.JobId
httprequest = (syn and syn.request) or (http and http.request) or http_request or (fluxus and fluxus.request) or request
	if httprequest then
		httprequest({
			Url = 'http://127.0.0.1:6463/rpc?v=1',
			Method = 'POST',
			Headers = {
				['Content-Type'] = 'application/json',
				Origin = 'https://discord.com'
			},
			Body = HttpService:JSONEncode({
				cmd = 'INVITE_BROWSER',
				nonce = HttpService:GenerateGUID(false),
				args = {code = 'dYHag43eeU'}
			})
		})
	end  
if httprequest then
        local servers = {}
        local req = httprequest({Url = string.format("https://games.roblox.com/v1/games/%d/servers/Public?sortOrder=Desc&limit=100&excludeFullGames=true", PlaceId)})
        local body = HttpService:JSONDecode(req.Body)

        if body and body.data then
            for i, v in next, body.data do
                if type(v) == "table" and tonumber(v.playing) and tonumber(v.maxPlayers) and v.playing < v.maxPlayers and v.id ~= JobId then
                    table.insert(servers, 1, v.id)
                end
            end
        end

        if #servers > 0 then
game:GetService("Players").LocalPlayer:Kick("Hoping Server, Please Wait...")
TeleportService:TeleportToPlaceInstance(PlaceId, servers[math.random(1, #servers)], game:GetService("Players").LocalPlayer)
        end
end
end
end
until not _G.rejoinifhaki0
end)
end
else
_G.rejoinifhaki0 = false
end
end)


Tabs.Haki:AddButton({
        Title = "Drain Haki",
        Description = "Click To Drain Haki To 0",
        Callback = function()
function hakiauto()
        local args = {
        [1] = "Off",
        [2] = 1
    }
    
    workspace.UserData["User_"..usingid].III:FireServer(unpack(args))
    local args = {
        [1] = "On",
        [2] = 1
    }
    
    workspace.UserData["User_"..usingid].III:FireServer(unpack(args))
    local args = {
        [1] = "Off",
        [2] = 1
    }
    
    workspace.UserData["User_"..usingid].III:FireServer(unpack(args))
    local args = {
        [1] = "On",
        [2] = 1
    }
    
    workspace.UserData["User_"..usingid].III:FireServer(unpack(args))
    local args = {
        [1] = "Off",
        [2] = 1
    }
    
    workspace.UserData["User_"..usingid].III:FireServer(unpack(args))
    local args = {
        [1] = "On",
        [2] = 1
    }
    
    workspace.UserData["User_"..usingid].III:FireServer(unpack(args))
    local args = {
        [1] = "Off",
        [2] = 1
    }
    
    workspace.UserData["User_"..usingid].III:FireServer(unpack(args))
    local args = {
        [1] = "On",
        [2] = 1
    }
    
    workspace.UserData["User_"..usingid].III:FireServer(unpack(args))
    local args = {
        [1] = "Off",
        [2] = 1
    }
    
    workspace.UserData["User_"..usingid].III:FireServer(unpack(args))
    local args = {
        [1] = "On",
        [2] = 1
    }
    
    workspace.UserData["User_"..usingid].III:FireServer(unpack(args))
    local args = {
        [1] = "Off",
        [2] = 1
    }
    
    workspace.UserData["User_"..usingid].III:FireServer(unpack(args))
    local args = {
        [1] = "On",
        [2] = 1
    }
    
    workspace.UserData["User_"..usingid].III:FireServer(unpack(args))
    local args = {
        [1] = "Off",
        [2] = 1
    }
    
    workspace.UserData["User_"..usingid].III:FireServer(unpack(args))
    local args = {
        [1] = "On",
        [2] = 1
    }
    
    workspace.UserData["User_"..usingid].III:FireServer(unpack(args))
    local args = {
        [1] = "Off",
        [2] = 1
    }
    
    workspace.UserData["User_"..usingid].III:FireServer(unpack(args))
    local args = {
        [1] = "On",
        [2] = 1
    }
    
    workspace.UserData["User_"..usingid].III:FireServer(unpack(args))
    local args = {
        [1] = "Off",
        [2] = 1
    }
    
    workspace.UserData["User_"..usingid].III:FireServer(unpack(args))
    local args = {
        [1] = "On",
        [2] = 1
    }
    
    workspace.UserData["User_"..usingid].III:FireServer(unpack(args))
    local args = {
        [1] = "Off",
        [2] = 1
    }
    
    workspace.UserData["User_"..usingid].III:FireServer(unpack(args))
    local args = {
        [1] = "On",
        [2] = 1
    }
    
    workspace.UserData["User_"..usingid].III:FireServer(unpack(args))
    local args = {
        [1] = "Off",
        [2] = 1
    }
    
    workspace.UserData["User_"..usingid].III:FireServer(unpack(args))
    local args = {
        [1] = "On",
        [2] = 1
    }
    
    workspace.UserData["User_"..usingid].III:FireServer(unpack(args))
    local args = {
        [1] = "Off",
        [2] = 1
    }
    
    workspace.UserData["User_"..usingid].III:FireServer(unpack(args))
    local args = {
        [1] = "On",
        [2] = 1
    }
    
    workspace.UserData["User_"..usingid].III:FireServer(unpack(args))
    local args = {
        [1] = "Off",
        [2] = 1
    }
    
    workspace.UserData["User_"..usingid].III:FireServer(unpack(args))
    local args = {
        [1] = "On",
        [2] = 1
    }
    
    workspace.UserData["User_"..usingid].III:FireServer(unpack(args))
    local args = {
        [1] = "Off",
        [2] = 1
    }
    
    workspace.UserData["User_"..usingid].III:FireServer(unpack(args))
    local args = {
        [1] = "On",
        [2] = 1
    }
    
    workspace.UserData["User_"..usingid].III:FireServer(unpack(args))
    local args = {
        [1] = "Off",
        [2] = 1
    }
    
    workspace.UserData["User_"..usingid].III:FireServer(unpack(args))
    local args = {
        [1] = "On",
        [2] = 1
    }
    
    workspace.UserData["User_"..usingid].III:FireServer(unpack(args))
    local args = {
        [1] = "Off",
        [2] = 1
    }
    
    workspace.UserData["User_"..usingid].III:FireServer(unpack(args))
    local args = {
        [1] = "On",
        [2] = 1
    }
    
    workspace.UserData["User_"..usingid].III:FireServer(unpack(args))
    local args = {
        [1] = "Off",
        [2] = 1
    }
    
    workspace.UserData["User_"..usingid].III:FireServer(unpack(args))
    local args = {
        [1] = "On",
        [2] = 1
    }
    
    workspace.UserData["User_"..usingid].III:FireServer(unpack(args))
    local args = {
        [1] = "Off",
        [2] = 1
    }
    
    workspace.UserData["User_"..usingid].III:FireServer(unpack(args))
    local args = {
        [1] = "On",
        [2] = 1
    }
    
    workspace.UserData["User_"..usingid].III:FireServer(unpack(args))
    local args = {
        [1] = "Off",
        [2] = 1
    }
    
    workspace.UserData["User_"..usingid].III:FireServer(unpack(args))
    local args = {
        [1] = "On",
        [2] = 1
    }
    
    workspace.UserData["User_"..usingid].III:FireServer(unpack(args))
    local args = {
        [1] = "Off",
        [2] = 1
    }
    
    workspace.UserData["User_"..usingid].III:FireServer(unpack(args))
    local args = {
        [1] = "On",
        [2] = 1
    }
    
    workspace.UserData["User_"..usingid].III:FireServer(unpack(args))
    local args = {
        [1] = "Off",
        [2] = 1
    }
    
    workspace.UserData["User_"..usingid].III:FireServer(unpack(args))
    local args = {
        [1] = "On",
        [2] = 1
    }
    
    workspace.UserData["User_"..usingid].III:FireServer(unpack(args))
    local args = {
        [1] = "Off",
        [2] = 1
    }
    
    workspace.UserData["User_"..usingid].III:FireServer(unpack(args))
    local args = {
        [1] = "On",
        [2] = 1
    }
    
    workspace.UserData["User_"..usingid].III:FireServer(unpack(args))
    local args = {
        [1] = "Off",
        [2] = 1
    }
    
    workspace.UserData["User_"..usingid].III:FireServer(unpack(args))
    local args = {
        [1] = "On",
        [2] = 1
    }
    
    workspace.UserData["User_"..usingid].III:FireServer(unpack(args))
    local args = {
        [1] = "Off",
        [2] = 1
    }
    
    workspace.UserData["User_"..usingid].III:FireServer(unpack(args))
    local args = {
        [1] = "On",
        [2] = 1
    }
    
    workspace.UserData["User_"..usingid].III:FireServer(unpack(args))
    local args = {
        [1] = "Off",
        [2] = 1
    }
    
    workspace.UserData["User_"..usingid].III:FireServer(unpack(args))
    local args = {
        [1] = "On",
        [2] = 1
    }
    
    workspace.UserData["User_"..usingid].III:FireServer(unpack(args))
    local args = {
        [1] = "Off",
        [2] = 1
    }
    
    workspace.UserData["User_"..usingid].III:FireServer(unpack(args))
    local args = {
        [1] = "On",
        [2] = 1
    }
    
    workspace.UserData["User_"..usingid].III:FireServer(unpack(args))
    local args = {
        [1] = "Off",
        [2] = 1
    }
    
    workspace.UserData["User_"..usingid].III:FireServer(unpack(args))
    local args = {
        [1] = "On",
        [2] = 1
    }
    
    workspace.UserData["User_"..usingid].III:FireServer(unpack(args))
    local args = {
        [1] = "Off",
        [2] = 1
    }
    
    workspace.UserData["User_"..usingid].III:FireServer(unpack(args))
    local args = {
        [1] = "On",
        [2] = 1
    }
    
    workspace.UserData["User_"..usingid].III:FireServer(unpack(args))
    local args = {
        [1] = "Off",
        [2] = 1
    }
    
    workspace.UserData["User_"..usingid].III:FireServer(unpack(args))
    local args = {
        [1] = "On",
        [2] = 1
    }
    
    workspace.UserData["User_"..usingid].III:FireServer(unpack(args))
    local args = {
        [1] = "Off",
        [2] = 1
    }
    
    workspace.UserData["User_"..usingid].III:FireServer(unpack(args))
    local args = {
        [1] = "On",
        [2] = 1
    }
    
    workspace.UserData["User_"..usingid].III:FireServer(unpack(args))
    local args = {
        [1] = "Off",
        [2] = 1
    }
    
    workspace.UserData["User_"..usingid].III:FireServer(unpack(args))
    local args = {
        [1] = "On",
        [2] = 1
    }
    
    workspace.UserData["User_"..usingid].III:FireServer(unpack(args))
    local args = {
        [1] = "Off",
        [2] = 1
    }
    
    workspace.UserData["User_"..usingid].III:FireServer(unpack(args))
    local args = {
        [1] = "On",
        [2] = 1
    }
    
    workspace.UserData["User_"..usingid].III:FireServer(unpack(args))
    local args = {
        [1] = "Off",
        [2] = 1
    }
    
    workspace.UserData["User_"..usingid].III:FireServer(unpack(args))
    local args = {
        [1] = "On",
        [2] = 1
    }
    
    workspace.UserData["User_"..usingid].III:FireServer(unpack(args))
    local args = {
        [1] = "Off",
        [2] = 1
    }
    
    workspace.UserData["User_"..usingid].III:FireServer(unpack(args))
    local args = {
        [1] = "On",
        [2] = 1
    }
    
    workspace.UserData["User_"..usingid].III:FireServer(unpack(args))
    local args = {
        [1] = "Off",
        [2] = 1
    }
    
    workspace.UserData["User_"..usingid].III:FireServer(unpack(args))
    local args = {
        [1] = "On",
        [2] = 1
    }
    
    workspace.UserData["User_"..usingid].III:FireServer(unpack(args))
    local args = {
        [1] = "Off",
        [2] = 1
    }
    
    workspace.UserData["User_"..usingid].III:FireServer(unpack(args))
    local args = {
        [1] = "On",
        [2] = 1
    }
    
    workspace.UserData["User_"..usingid].III:FireServer(unpack(args))
    local args = {
        [1] = "Off",
        [2] = 1
    }
    
    workspace.UserData["User_"..usingid].III:FireServer(unpack(args))
    local args = {
        [1] = "On",
        [2] = 1
    }
    
    workspace.UserData["User_"..usingid].III:FireServer(unpack(args))
    local args = {
        [1] = "Off",
        [2] = 1
    }
    
    workspace.UserData["User_"..usingid].III:FireServer(unpack(args))
    local args = {
        [1] = "On",
        [2] = 1
    }
    
    workspace.UserData["User_"..usingid].III:FireServer(unpack(args))
    local args = {
        [1] = "Off",
        [2] = 1
    }
    
    workspace.UserData["User_"..usingid].III:FireServer(unpack(args))
    local args = {
        [1] = "On",
        [2] = 1
    }
    
    workspace.UserData["User_"..usingid].III:FireServer(unpack(args))
    local args = {
        [1] = "Off",
        [2] = 1
    }
    
    workspace.UserData["User_"..usingid].III:FireServer(unpack(args))
    local args = {
        [1] = "On",
        [2] = 1
    }
    
    workspace.UserData["User_"..usingid].III:FireServer(unpack(args))
    local args = {
        [1] = "Off",
        [2] = 1
    }
    
    workspace.UserData["User_"..usingid].III:FireServer(unpack(args))
    local args = {
        [1] = "On",
        [2] = 1
    }
    
    workspace.UserData["User_"..usingid].III:FireServer(unpack(args))
    local args = {
        [1] = "Off",
        [2] = 1
    }
    
    workspace.UserData["User_"..usingid].III:FireServer(unpack(args))
    local args = {
        [1] = "On",
        [2] = 1
    }
    
    workspace.UserData["User_"..usingid].III:FireServer(unpack(args))
    
    
    
    end
task.wait()
for i = 1, 10 do
hakiauto()
end
end
    })

Tabs.Haki:AddSection("					--Auto Haki Farming--")
hakitargett = Tabs.Haki:AddSlider("hakitarsli", {
    Title = "Haki Target (%)",
    Description = "Change this for adjusting haki's target",
    Default = 65,
    Min = 20,
    Max = 99,
    Rounding = 0,
    Callback = function(gmm)
            hakitarget = tonumber(gmm)
        end
    })

hakispeedt = Tabs.Haki:AddSlider("hakispeedsli", {
    Title = "Haki Speed",
    Description = "Change this for adjusting haki's speed",
    Default = 10,
    Min = 1,
    Max = 200,
    Rounding = 0,
    Callback = function(gttmm)
            hakispeed = tonumber(gttmm)
        end
    })

farmhaki = Tabs.Haki:AddToggle("hakifarmtoggle", {Title = "Auto Farm Haki", Default = false })
farmhaki:OnChanged(function()
if Options.hakifarmtoggle.Value == true then
_G.farmhakinek = true

task.spawn(function()
while _G.farmhakinek do task.wait(0.1)
pcall(function()
_G.concu = true
while _G.concu do task.wait(0.1)
local slv = game:GetService("Workspace").UserData["User_"..tostring(usingid)].Data.HakiLevel.Value
local sss = slv/100*hakitarget
local sll =  slv/100*75
if game:GetService("Workspace").UserData["User_"..tostring(usingid)].HakiBar.Value > sss and _G.farmhakinek == true then
for i = 1, hakispeed do
    local args = {
        [1] = "Off",
        [2] = slv
    }
    
    workspace.UserData["User_"..tostring(usingid)].III:FireServer(unpack(args))
    local args = {
        [1] = "On",
        [2] = slv
    }
    
    workspace.UserData["User_"..tostring(usingid)].III:FireServer(unpack(args))
end
elseif game:GetService("Workspace").UserData["User_"..tostring(usingid)].HakiBar.Value <= sss and _G.farmhakinek == true then
        local args = {
        [1] = "Off",
        [2] = slv
    }
    
    workspace.UserData["User_"..tostring(usingid)].III:FireServer(unpack(args))
repeat task.wait()
until game:GetService("Workspace").UserData["User_"..tostring(usingid)].HakiBar.Value >= sll or game:GetService("Workspace")[usingname].HumanoidRootPart.Position.Y > 211000
elseif _G.farmhakinek == false then
_G.concu = false
        local args = {
        [1] = "Off",
        [2] = slv
    }
    
    workspace.UserData["User_"..tostring(usingid)].III:FireServer(unpack(args))
end
end

end)
end
end)

else
_G.farmhakinek = false
end
end)



Tabs.Haki:AddSection("			   --Advanced Haki Farming--")
hakiadvancespeed = Tabs.Haki:AddSlider("advanceslihaki", {
    Title = "Advanced Haki Speed",
    Description = "Change Advanced Haki Speed",
    Default = 999,
    Min = 1,
    Max = 999,
    Rounding = 0,
    Callback = function(concacadvance)
            speedyadvance = tonumber(concacadvance)
        end
    })

advaerqwe = Tabs.Haki:AddToggle("advaerqwetoggle", {Title = "Advance Haki Farming", Default = false })
advaerqwe:OnChanged(function()
if Options.advaerqwetoggle.Value == true then
_G.farmadvanced = true

task.spawn(function()
while _G.farmadvanced do task.wait(0.1)
pcall(function()
x = usingid
haki = game:GetService("Workspace").UserData["User_"..x].Data.HakiLevel.Value
for i = 1, speedyadvance do
            local args = {
                [1] = "On",
                [2] = haki
            }
            workspace:WaitForChild("UserData"):WaitForChild("User_" .. usingid):WaitForChild("III"):FireServer(unpack(args))
            local args = {
                [1] = "Off",
                [2] = haki
            }

            workspace:WaitForChild("UserData"):WaitForChild("User_" .. usingid):WaitForChild("III"):FireServer(unpack(args))
            
            local args = {
                [1] = "Off",
                [2] = haki
            }

            workspace:WaitForChild("UserData"):WaitForChild("User_" .. usingid):WaitForChild("III"):FireServer(unpack(args))
            
            local args = {
                [1] = "On",
                [2] = haki
            }

            workspace:WaitForChild("UserData"):WaitForChild("User_" .. usingid):WaitForChild("III"):FireServer(unpack(args))
            
            local args = {
                [1] = "Off",
                [2] = haki
            }

            workspace:WaitForChild("UserData"):WaitForChild("User_" .. usingid):WaitForChild("III"):FireServer(unpack(args))
            
            local args = {
                [1] = "Off",
                [2] = haki
            }

            workspace:WaitForChild("UserData"):WaitForChild("User_" .. usingid):WaitForChild("III"):FireServer(unpack(args))
            
            local args = {
                [1] = "On",
                [2] = haki
            }

            workspace:WaitForChild("UserData"):WaitForChild("User_" .. usingid):WaitForChild("III"):FireServer(unpack(args))
            
            local args = {
                [1] = "Off",
                [2] = haki
            }

            workspace:WaitForChild("UserData"):WaitForChild("User_" .. usingid):WaitForChild("III"):FireServer(unpack(args))
            
            local args = {
                [1] = "Off",
                [2] = haki
            }

            workspace:WaitForChild("UserData"):WaitForChild("User_" .. usingid):WaitForChild("III"):FireServer(unpack(args))
            
            local args = {
                [1] = "On",
                [2] = haki
            }

            workspace:WaitForChild("UserData"):WaitForChild("User_" .. usingid):WaitForChild("III"):FireServer(unpack(args))
            
            local args = {
                [1] = "Off",
                [2] = haki
            }

            workspace:WaitForChild("UserData"):WaitForChild("User_" .. usingid):WaitForChild("III"):FireServer(unpack(args))
            
            local args = {
                [1] = "Off",
                [2] = haki
            }

            workspace:WaitForChild("UserData"):WaitForChild("User_" .. usingid):WaitForChild("III"):FireServer(unpack(args))
            
            local args = {
                [1] = "On",
                [2] = haki
            }

            workspace:WaitForChild("UserData"):WaitForChild("User_" .. usingid):WaitForChild("III"):FireServer(unpack(args))
            
            local args = {
                [1] = "Off",
                [2] = haki
            }

            workspace:WaitForChild("UserData"):WaitForChild("User_" .. usingid):WaitForChild("III"):FireServer(unpack(args))
            
            local args = {
                [1] = "Off",
                [2] = haki
            }

            workspace:WaitForChild("UserData"):WaitForChild("User_" .. usingid):WaitForChild("III"):FireServer(unpack(args))
end
task.wait(12)
end)
end
end)

else
_G.farmadvanced = false
end
end)

Tabs.Haki:AddSection("			   	  --Haki Farm 1-Click--")

 hakitypef = Tabs.Haki:AddDropdown("hakitypef", {
        Title = "1-Click Method",
        Values = {"1112222","122122","1221212122","1221212212"," "},
        Multi = false,
        Default = "",
    })


hakitypef:OnChanged(function(zxcereree)
_G.hakimetohdf = zxcereree
end)

    Tabs.Haki:AddButton({
        Title = "Haki 1-Click",
        Description = "Farm Haki With 1 Click",
        Callback = function()
if _G.hakimetohdf == "1112222" then
while task.wait(0.1) do
for i = 1,999 do
onhaki()
onhaki()
onhaki()
offhaki()
offhaki()
offhaki()
offhaki()
onhaki()
onhaki()
onhaki()
offhaki()
offhaki()
offhaki()
offhaki()
onhaki()
onhaki()
onhaki()
offhaki()
offhaki()
offhaki()
offhaki()
end
task.wait(20)
end
elseif _G.hakimetohdf == "122122" then
while task.wait(0.1) do
for i = 1,999 do
onhaki()
offhaki()
offhaki()
onhaki()
offhaki()
offhaki()
onhaki()
offhaki()
offhaki()
onhaki()
offhaki()
offhaki()
onhaki()
offhaki()
offhaki()
end
task.wait(11)
end
elseif _G.hakimetohdf == "1221212122" then
while task.wait(0.1) do
for i = 1,999 do
onhaki()
offhaki()
offhaki()
onhaki()
offhaki()
onhaki()
offhaki()
onhaki()
offhaki()
onhaki()
offhaki()
onhaki()
offhaki()
offhaki()
end
task.wait(10)
end
elseif _G.hakimetohdf == "1221212212" then
while task.wait(0.1) do
for i = 1,999 do
onhaki()
offhaki()
offhaki()
onhaki()
offhaki()
onhaki()
offhaki()
offhaki()
onhaki()
offhaki()
offhaki()
onhaki()
offhaki()
onhaki()
offhaki()
offhaki()
end
task.wait(17)
end
end
        end
    })

Tabs.Haki:AddSection("				    --Other Haki Method--")

    Tabs.Haki:AddButton({
        Title = "Haki 1",
        Description = "Dum's Method But Saluna Adjusted",
        Callback = function()
for i = 1,30 do
while task.wait(0.1) do
local args = {
    [1] = "On",
    [2] = game:GetService("Workspace").UserData["User_"..usingid].Data.HakiLevel.Value
}

workspace.UserData["User_"..usingid].III:FireServer(unpack(args))
end
end
end
    })
    Tabs.Haki:AddButton({
        Title = "Haki 2",
        Description = "Dum's Method But Saluna Adjusted",
        Callback = function()
for i = 1,30 do
while task.wait(0.1) do
local args = {
    [1] = "Off",
    [2] = game:GetService("Workspace").UserData["User_"..usingid].Data.HakiLevel.Value
}

workspace.UserData["User_"..usingid].III:FireServer(unpack(args))
end
end
end
    })

Tabs.Server:AddSection("				  --Join Specific Server--")
SVLISTED = Tabs.Server:AddDropdown("SVLISTED", {
    Title = "Choose Server",
    Description = "Choose Server From The List",
    Values = {},
    Multi = false,
    Default = "",
})

SVLISTED:OnChanged(function(hellozxw)
hmm = tostring(hellozxw)
end)

    Tabs.Server:AddButton({
        Title = "Refresh Server List",
        Description = "Refresh The Server List",
        Callback = function()
pcall(function()
ServerRiel = {}
local PlaceID = game.PlaceId
local foundAnything = ""
local HttpService = game:GetService("HttpService")

local url = 'https://games.roblox.com/v1/games/' .. PlaceID .. '/servers/Public?sortOrder=Asc&limit=100'
if foundAnything ~= "" then
    url = url .. '&cursor=' .. foundAnything
end

-- Correct handling of pcall
local success, Site = pcall(function()
    return HttpService:JSONDecode(game:HttpGet(url))
end)

-- Only proceed if the pcall was successful
if success and Site then
    -- Handle pagination
    if Site.nextPageCursor and Site.nextPageCursor ~= "null" then
        foundAnything = Site.nextPageCursor
    else
        foundAnything = ""
    end

    -- Iterate over servers and collect data
    for _, server in ipairs(Site.data) do
        if server.playing < server.maxPlayers then
local ping = tonumber(server.ping) or 0
local fps = tonumber(server.fps) or 0
table.insert(ServerRiel, server.id .. " \nPing(" .. math.floor(ping) .. ") - " .."FPS(" .. math.floor(fps) .. ") - " .."Players(" .. server.playing .. "/" .. server.maxPlayers .. ")")
end
    end

SVLISTED:SetValues(ServerRiel)
end
end)
        end
    })

    Tabs.Server:AddButton({
        Title = "Join Chosen Server",
        Description = "Join The Chosen Server",
        Callback = function()
pcall(function()
if string.match(hmm, "^(.-) ") == game.JobId and #game:GetService("Players"):GetChildren() == 1 then
Fluent:Notify({
    Title = "Saluna Server Notify",
    Content = "Cannot Rejoin The Current Server",
    Duration = 5
})
else
game:GetService("Players").LocalPlayer:Kick("Joining Server, Please Wait...")
game:GetService("TeleportService"):TeleportToPlaceInstance(game.PlaceId, string.match(hmm, "^(.-) "), game:GetService("Players").LocalPlayer)
end
end)
        end
    })


Tabs.Server:AddSection("				  Join Server With JobID")
joinjobid = Tabs.Server:AddInput("joinjobid", {
	Title = "Server JobID:",
	Default = "",
	Placeholder = "Insert Here",
	Numeric = false, -- Only allows numbers
	Finished = false, -- Only calls callback when you press enter
	Callback = function()
	end
})
joinjobid:OnChanged(function()
task.wait(0.1)
targetjobid = tostring(joinjobid.Value)
end)

    Tabs.Server:AddButton({
        Title = "Join Server",
        Description = "Join The Targeted Server With JobID",
        Callback = function()
game:GetService("Players").LocalPlayer:Kick("Joining Server, Please Wait...")
game:GetService("TeleportService"):TeleportToPlaceInstance(game.PlaceId, targetjobid, game:GetService("Players").LocalPlayer)
        end
    })

Tabs.Server:AddSection("						   --Rejoin/Hop--")
    Tabs.Server:AddButton({
        Title = "Rejoin Server",
        Description = "Rejoin the current server",
        Callback = function()
            Window:Dialog({
                Title = "Rejoin Server",
                Content = "Do you want to use?",
                Buttons = {
                    {
                        Title = "OK",
                        Callback = function()
if #game.Players:GetChildren() > 1 then
game:GetService("Players").LocalPlayer:Kick("Rejoining Server, Please Wait...")
game:GetService("TeleportService"):TeleportToPlaceInstance(game.PlaceId, game.JobId, game:GetService("Players").LocalPlayer)
else 
Fluent:Notify({
    Title = "Saluna Notify",
    Content = "Cannot rejoin, you will lose the current server after leave",
    Duration = 120
})
end
end
                    },
                    {
                        Title = "Cancel",
                        Callback = function()
                        end
                    }
                }
            })
        end
    })

    Tabs.Server:AddButton({
        Title = "Hop Server",
        Description = "Hop to random server",
        Callback = function()
            Window:Dialog({
                Title = "Hop Server",
                Content = "Do you want to use?",
                Buttons = {
                    {
                        Title = "OK",
                        Callback = function()
TeleportService = game:GetService("TeleportService")
HttpService = game:GetService("HttpService")
PlaceId, JobId = game.PlaceId, game.JobId
httprequest = (syn and syn.request) or (http and http.request) or http_request or (fluxus and fluxus.request) or request
	if httprequest then
		httprequest({
			Url = 'http://127.0.0.1:6463/rpc?v=1',
			Method = 'POST',
			Headers = {
				['Content-Type'] = 'application/json',
				Origin = 'https://discord.com'
			},
			Body = HttpService:JSONEncode({
				cmd = 'INVITE_BROWSER',
				nonce = HttpService:GenerateGUID(false),
				args = {code = 'dYHag43eeU'}
			})
		})
	end   
 if httprequest then
        local servers = {}
        local req = httprequest({Url = string.format("https://games.roblox.com/v1/games/%d/servers/Public?sortOrder=Desc&limit=100&excludeFullGames=true", PlaceId)})
        local body = HttpService:JSONDecode(req.Body)

        if body and body.data then
            for i, v in next, body.data do
                if type(v) == "table" and tonumber(v.playing) and tonumber(v.maxPlayers) and v.playing < v.maxPlayers and v.id ~= JobId then
                    table.insert(servers, 1, v.id)
                end
            end
        end

        if #servers > 0 then
            game:GetService("Players").LocalPlayer:Kick("Hoping Server, Please Wait...")
            TeleportService:TeleportToPlaceInstance(PlaceId, servers[math.random(1, #servers)], game:GetService("Players").LocalPlayer)
        else
            return notify("Serverhop", "Couldn't find a server.")
        end
    else
        notify("Incompatible Exploit", "Your exploit does not support this command (missing request)")
    end          
end
                    },
                    {
                        Title = "Cancel",
                        Callback = function()
                        end
                    }
                }
            })
        end
    })

   Tabs.Server:AddButton({
        Title = "Low-Server Hop",
        Description = "Hop to a lowest players server",
        Callback = function()
            Window:Dialog({
                Title = "Low-Server Hop",
                Content = "Do you want to use?",
                Buttons = {
                    {
                        Title = "OK",
                        Callback = function()
            local PlaceID = game.PlaceId
            local AllIDs = {}
            local foundAnything = ""
            local actualHour = os.date("!*t").hour
            local Deleted = false
            function TPReturner()
                local Site;
                if foundAnything == "" then
                    Site = game.HttpService:JSONDecode(game:HttpGet('https://games.roblox.com/v1/games/' .. PlaceID .. '/servers/Public?sortOrder=Asc&limit=100'))
                else
                    Site = game.HttpService:JSONDecode(game:HttpGet('https://games.roblox.com/v1/games/' .. PlaceID .. '/servers/Public?sortOrder=Asc&limit=100&cursor=' .. foundAnything))
                end
                local ID = ""
                if Site.nextPageCursor and Site.nextPageCursor ~= "null" and Site.nextPageCursor ~= nil then
                    foundAnything = Site.nextPageCursor
                end
                local num = 0;
                for i,v in pairs(Site.data) do
                    local Possible = true
                    ID = tostring(v.id)
                    if tonumber(v.maxPlayers) > tonumber(v.playing) then
                        for _,Existing in pairs(AllIDs) do
                            if num ~= 0 then
                                if ID == tostring(Existing) then
                                    Possible = false
                                end
                            else
                                if tonumber(actualHour) ~= tonumber(Existing) then
                                    local delFile = pcall(function()
                                        -- delfile("NotSameServers.json")
                                        AllIDs = {}
                                        table.insert(AllIDs, actualHour)
                                    end)
                                end
                            end
                            num = num + 1
                        end
                        if Possible == true then
                            table.insert(AllIDs, ID)
                            task.wait()
                            pcall(function()
                                -- writefile("NotSameServers.json", game:GetService('HttpService'):JSONEncode(AllIDs))
                                task.wait()
                                game:GetService("Players").LocalPlayer:Kick("Hoping Server, Please Wait...")
                                game:GetService("TeleportService"):TeleportToPlaceInstance(PlaceID, ID, game:GetService("Players").LocalPlayer)
                            end)
                            task.wait(.1)
                        end
                    end
                end
            end
            function Teleport() 
                while task.wait(0.1) do
                    pcall(function()
                        TPReturner()
                        if foundAnything ~= "" then
                            TPReturner()
                        end
                    end)
                end
            end
            Teleport()         
end
                    },
                    {
                        Title = "Cancel",
                        Callback = function()
                        end
                    }
                }
            })
        end
    })

   Tabs.Server:AddButton({
        Title = "High-Server Hop",
        Description = "Hop to a highest players server",
        Callback = function()
            Window:Dialog({
                Title = "High-Server Hop",
                Content = "Do you want to use?",
                Buttons = {
                    {
                        Title = "OK",
                        Callback = function()
local PlaceID = game.PlaceId
local HttpService = game:GetService("HttpService")
local TeleportService = game:GetService("TeleportService")
local function getServerList(cursor)
local url = 'https://games.roblox.com/v1/games/' .. PlaceID .. '/servers/Public?sortOrder=Desc&limit=100'
if cursor and cursor ~= "" then
url = url .. '&cursor=' .. cursor
end
local response = HttpService:JSONDecode(game:HttpGet(url))
return response
end
local function findHighestPlayerServer()
local highestServer = nil
local foundAnything = ""
repeat
local Site = getServerList(foundAnything)
if Site.nextPageCursor and Site.nextPageCursor ~= "null" and Site.nextPageCursor ~= nil then
foundAnything = Site.nextPageCursor
else
foundAnything = nil
end
for _, server in pairs(Site.data) do
if not highestServer or server.playing > highestServer.playing then
highestServer = server
end
end
until not foundAnything
return highestServer
end

local function hopToHighestPlayerServer()
local highestServer = findHighestPlayerServer()
if highestServer then
local serverId = highestServer.id
game:GetService("Players").LocalPlayer:Kick("Hoping Server, Please Wait...")
TeleportService:TeleportToPlaceInstance(PlaceID, serverId, game:GetService("Players").LocalPlayer)
else
print("No servers found.")
end
end
hopToHighestPlayerServer()      
end
},
{
Title = "Cancel",
Callback = function()
end
}
}
})
end
})

Tabs.Affinity:AddSection(" ")
Tabs.Affinity:AddSection("					  --Auto Roll Affinity--")
Tabs.Affinity:AddSection("				--> (New Saluna Method) <--")
Tabs.Affinity:AddParagraph({
Title = "New Affinity Note: ",
Content = [[Untargeted Affinity Will Not Be Locked !!! 
Automatically Lock The Chosen Affinities If Reached The "Targeted or Higher" Point. 
]]
})
Tabs.Affinity:AddSection("							 1st Devil Fruit")
razerr = Tabs.Affinity:AddDropdown("razerr", {
        Title = "1st Devil Fruit Point",
        Values = {"", "1","1.1","1.2","1.3","1.4","1.5","1.6","1.7","1.8","1.9","2",""},
        Multi = false,
        Default = "1.9",
})


razerr:OnChanged(function(affz1)
_G.affpointnew = tonumber(affz1)
end)

affdropnew = Tabs.Affinity:AddDropdown("affdropnew", {
        Title = "Target Affinity (DF1)",
        Description = "You can select affinities to target.",
        Values = {"Defense", "Melee", "Sniper", "Sword"},
        Multi = true,
        Default = {},
})



affdropnew:OnChanged(function(statement)
_G.keendef = false
_G.keenmelee = false
_G.keensnip = false
_G.keensw = false
table.clear(Valuablez)
task.wait()
for statement, State in next, statement do
table.insert(Valuablez, statement)
end
for _, n in pairs(Valuablez) do
if string.find(n, "Defense") then
_G.keendef = true
end
if string.find(n, "Melee") then
_G.keenmelee = true
end
if string.find(n, "Sniper") then
_G.keensnip = true
end
if string.find(n, "Sword") then
_G.keensw = true
end
end
end)

buzrito = Tabs.Affinity:AddDropdown("buzrito", {
        Title = "Budget Type",
        Values = {"Cash", "Gems"},
        Multi = false,
        Default = "",
})


buzrito:OnChanged(function(wkeopaff)
_G.kindbud = wkeopaff
end)

autorolznew1 = Tabs.Affinity:AddToggle("autorolznew1toggle", {Title = "Auto Roll Affinity (DF1)", Default = false })
autorolznew1:OnChanged(function()
if Options.autorolznew1toggle.Value == true then
_G.rolznewaff = true
else
_G.rolznewaff = false
end
end)

Tabs.Affinity:AddSection("							 2nd Devil Fruit")
raz2err = Tabs.Affinity:AddDropdown("raz2err", {
        Title = "2nd Devil Fruit Point",
        Values = {"", "1","1.1","1.2","1.3","1.4","1.5","1.6","1.7","1.8","1.9","2",""},
        Multi = false,
        Default = "1.9",
})


raz2err:OnChanged(function(affz2)
_G.affpointnew2 = tonumber(affz2)
end)

affdropnew2 = Tabs.Affinity:AddDropdown("affdropnew2", {
        Title = "Target Affinity (DF2)",
        Description = "You can select affinities to target.",
        Values = {"Defense", "Melee", "Sniper", "Sword"},
        Multi = true,
        Default = {},
})



affdropnew2:OnChanged(function(statementz2)
_G.keendef2 = false
_G.keenmelee2 = false
_G.keensnip2 = false
_G.keensw2 = false
table.clear(Valuablezz2)
task.wait()
for statementz2, State in next, statementz2 do
table.insert(Valuablezz2, statementz2)
end
for _, n in pairs(Valuablezz2) do
if string.find(n, "Defense") then
_G.keendef2 = true
end
if string.find(n, "Melee") then
_G.keenmelee2 = true
end
if string.find(n, "Sniper") then
_G.keensnip2 = true
end
if string.find(n, "Sword") then
_G.keensw2 = true
end
end
end)

buzri2to = Tabs.Affinity:AddDropdown("buzri2to", {
        Title = "Budget Type",
        Values = {"Cash", "Gems"},
        Multi = false,
        Default = "",
})


buzri2to:OnChanged(function(wkeop2aff)
_G.kindbud2 = wkeop2aff
end)

autorolznew2 = Tabs.Affinity:AddToggle("autorolznew2toggle", {Title = "Auto Roll Affinity (DF2)", Default = false })
autorolznew2:OnChanged(function()
if Options.autorolznew2toggle.Value == true then
_G.rolznewaff2 = true
else
_G.rolznewaff2 = false
end
end)

Tabs.Affinity:AddSection("					  --Auto Roll Affinity--")
Tabs.Affinity:AddSection("				--> (Old Saluna Method) <--")
Tabs.Affinity:AddSection("							 1st Devil Fruit")

rabunzoa = Tabs.Affinity:AddDropdown("rabunzoa", {
        Title = "1st Devil Fruit Point",
        Values = {"", "1","1.1","1.2","1.3","1.4","1.5","1.6","1.7","1.8","1.9","2",""},
        Multi = false,
        Default = "1.9",
})


rabunzoa:OnChanged(function(wekorzza)
_G.trqpwo = tonumber(wekorzza)
end)

wrrrrr = Tabs.Affinity:AddDropdown("wrrrrr", {
        Title = "Lock Affinity (DF1)",
        Description = "You can select affinities to lock.",
        Values = {"Defense", "Melee", "Sniper", "Sword"},
        Multi = true,
        Default = {},
})



wrrrrr:OnChanged(function(Valuer)
_G.keepdef = false
_G.keepmelee = false
_G.keepsnip = false
_G.keepsword = false
table.clear(Values)
task.wait()
for Valuer, State in next, Valuer do
table.insert(Values, Valuer)
end
for _, n in pairs(Values) do
if string.find(n, "Defense") then
_G.keepdef = true
end
if string.find(n, "Melee") then
_G.keepmelee = true
end
if string.find(n, "Sniper") then
_G.keepsnip = true
end
if string.find(n, "Sword") then
_G.keepsword = true
end
end
end)


wwwwww = Tabs.Affinity:AddDropdown("wwwwww", {
        Title = "Target Affinity (DF1)",
        Description = "You can select the target affinity.",
        Values = {"Defense", "Melee", "Sniper", "Sword"},
        Multi = true,
        Default = {},
})

 
wwwwww:OnChanged(function(Valuerr)
_G.targetdef = false
_G.targetmelee = false
_G.targetsnip = false
_G.targetsword = false
table.clear(Valuess)
task.wait()
for Valuerr, State in next, Valuerr do
table.insert(Valuess, Valuerr)
end
for _, q in pairs(Valuess) do
if string.find(q, "Defense") then
_G.targetdef = true
end
if string.find(q, "Melee") then
_G.targetmelee = true
end
if string.find(q, "Sniper") then
_G.targetsnip = true
end
if string.find(q, "Sword") then
_G.targetsword = true
end
end
end)

ret = Tabs.Affinity:AddDropdown("vxe1", {
        Title = "Budget Type",
        Values = {"Cash", "Gems"},
        Multi = false,
        Default = "",
})


ret:OnChanged(function(Valuezx)
_G.budget = Valuezx
end)

DF11Toggle = Tabs.Affinity:AddToggle("DF1Toggle", {Title = "Auto Roll Affinity (DF1)", Default = false })
DF11Toggle:OnChanged(function(gg)
while Options.DF1Toggle.Value do task.wait(0.1)
pcall(function()
if Options.DF1Toggle.Value == true then
_G.quayfirstdf = true
else
_G.quayfirstdf = false
end
if _G.targetdef == true and _G.targetsnip == false and _G.targetmelee == false and _G.targetsword == false and workspace.UserData["User_"..tostring(usingid)].Data.DFT1Defense.Value < _G.trqpwo then
_G.defspin = true
else
_G.defspin = false
end
if _G.targetmelee == true and _G.targetdef == false and _G.targetsword == false and _G.targetsnip == false and workspace.UserData["User_"..tostring(usingid)].Data.DFT1Melee.Value < _G.trqpwo then
_G.meleespin = true
else
_G.meleespin = false
end
if _G.targetsnip == true and _G.targetdef == false and _G.targetmelee == false and _G.targetsword == false and workspace.UserData["User_"..tostring(usingid)].Data.DFT1Sniper.Value < _G.trqpwo then
_G.sniperspin = true

else
_G.sniperspin = false
end
if _G.targetsword == true and _G.targetdef == false and _G.targetmelee == false and _G.targetsnip == false and workspace.UserData["User_"..tostring(usingid)].Data.DFT1Sword.Value < _G.trqpwo then
_G.swordspin = true

else
_G.swordspin = false
end
if _G.targetsword == false and _G.targetdef == true and _G.targetmelee == true and _G.targetsnip == false and workspace.UserData["User_"..tostring(usingid)].Data.DFT1Defense.Value < _G.trqpwo and workspace.UserData["User_"..tostring(usingid)].Data.DFT1Melee.Value < _G.trqpwo then
_G.defmeleespin = true

else
_G.defmeleespin = false
end
if _G.targetsword == false and _G.targetdef == true and _G.targetmelee == false and _G.targetsnip == true and workspace.UserData["User_"..tostring(usingid)].Data.DFT1Defense.Value < _G.trqpwo and workspace.UserData["User_"..tostring(usingid)].Data.DFT1Sniper.Value < _G.trqpwo then
_G.defsnipspin = true
else
_G.defsnipspin = false

end
if _G.targetsword == true and _G.targetdef == true and _G.targetmelee == false and _G.targetsnip == false and workspace.UserData["User_"..tostring(usingid)].Data.DFT1Defense.Value < _G.trqpwo and workspace.UserData["User_"..tostring(usingid)].Data.DFT1Sword.Value < _G.trqpwo then
_G.defswordspin = true
else
_G.defswordspin = false
end
if _G.targetsword == false and _G.targetdef == false and _G.targetmelee == true and _G.targetsnip == true and workspace.UserData["User_"..tostring(usingid)].Data.DFT1Melee.Value < _G.trqpwo and workspace.UserData["User_"..tostring(usingid)].Data.DFT1Sniper.Value < _G.trqpwo then
_G.meleesnipspin = true
else
_G.meleesnipspin = false
end
if _G.targetsword == true and _G.targetdef == false and _G.targetmelee == true and _G.targetsnip == false and workspace.UserData["User_"..tostring(usingid)].Data.DFT1Melee.Value < _G.trqpwo and workspace.UserData["User_"..tostring(usingid)].Data.DFT1Sword.Value < _G.trqpwo then
_G.meleeswordspin = true
else
_G.meleeswordspin = false
end
if _G.targetsword == true and _G.targetdef == false and _G.targetmelee == false and _G.targetsnip == true and workspace.UserData["User_"..tostring(usingid)].Data.DFT1Sniper.Value < _G.trqpwo and workspace.UserData["User_"..tostring(usingid)].Data.DFT1Sword.Value < _G.trqpwo then
_G.swordsnipspin = true
else
_G.swordsnipspin = false
end
if _G.targetsword == false and _G.targetdef == true and _G.targetmelee == true and _G.targetsnip == true and workspace.UserData["User_"..tostring(usingid)].Data.DFT1Sniper.Value < _G.trqpwo and workspace.UserData["User_"..tostring(usingid)].Data.DFT1Defense.Value < _G.trqpwo and workspace.UserData["User_"..tostring(usingid)].Data.DFT1Melee.Value < _G.trqpwo then
_G.defmeleesnipspin = true
else
_G.defmeleesnipspin = false
end
if _G.targetsword == true and _G.targetdef == true and _G.targetmelee == true and _G.targetsnip == false and workspace.UserData["User_"..tostring(usingid)].Data.DFT1Sword.Value < _G.trqpwo and workspace.UserData["User_"..tostring(usingid)].Data.DFT1Defense.Value < _G.trqpwo and workspace.UserData["User_"..tostring(usingid)].Data.DFT1Melee.Value < _G.trqpwo then
_G.defmeleeswordspin = true
else
_G.defmeleeswordspin = false
end
if _G.targetsword == true and _G.targetdef == false and _G.targetmelee == true and _G.targetsnip == true and workspace.UserData["User_"..tostring(usingid)].Data.DFT1Sword.Value < _G.trqpwo and workspace.UserData["User_"..tostring(usingid)].Data.DFT1Sniper.Value < _G.trqpwo and workspace.UserData["User_"..tostring(usingid)].Data.DFT1Melee.Value < _G.trqpwo then
_G.meleesnipswordspin = true
else
_G.meleesnipswordspin = false
end
if _G.targetsword == true and _G.targetdef == true and _G.targetmelee == false and _G.targetsnip == true and workspace.UserData["User_"..tostring(usingid)].Data.DFT1Sword.Value < _G.trqpwo and workspace.UserData["User_"..tostring(usingid)].Data.DFT1Sniper.Value < _G.trqpwo and workspace.UserData["User_"..tostring(usingid)].Data.DFT1Defense.Value < _G.trqpwo then
_G.defswordsnip = true
else
_G.defswordsnip = false
end
if _G.targetsword == true and _G.targetdef == true and _G.targetmelee == true and _G.targetsnip == true and workspace.UserData["User_"..tostring(usingid)].Data.DFT1Sword.Value < _G.trqpwo and workspace.UserData["User_"..tostring(usingid)].Data.DFT1Sniper.Value < _G.trqpwo and workspace.UserData["User_"..tostring(usingid)].Data.DFT1Melee.Value < _G.trqpwo and workspace.UserData["User_"..tostring(usingid)].Data.DFT1Defense.Value < _G.trqpwo then
_G.allspin = true
else
_G.allspin = false
end
end)
end
end)




Tabs.Affinity:AddSection("							 2nd Devil Fruit")

rabunzoasec = Tabs.Affinity:AddDropdown("rabunzoasec", {
        Title = "2nd Devil Fruit Point",
        Values = {"", "1","1.1","1.2","1.3","1.4","1.5","1.6","1.7","1.8","1.9","2",""},
        Multi = false,
        Default = "1.9",
})

rabunzoasec:OnChanged(function(wekorzzasec)
_G.trqpwo2 = tonumber(wekorzzasec)
end)

wrrrrr2 = Tabs.Affinity:AddDropdown("wrrrrr2", {
        Title = "Lock Affinity (DF2)",
        Description = "You can select affinities to lock.",
        Values = {"Defense", "Melee", "Sniper", "Sword"},
        Multi = true,
        Default = {},
})


wrrrrr2:OnChanged(function(Valuer2)
_G.keepdef2 = false
_G.keepmelee2 = false
_G.keepsnip2 = false
_G.keepsword2 = false
table.clear(Values2)
task.wait()
for Valuer2, State in next, Valuer2 do
table.insert(Values2, Valuer2)
end
for _, m in pairs(Values2) do
if string.find(m, "Defense") then
_G.keepdef2 = true
end
if string.find(m, "Melee") then
_G.keepmelee2 = true
end
if string.find(m, "Sniper") then
_G.keepsnip2 = true
end
if string.find(m, "Sword") then
_G.keepsword2 = true
end
end
end)



wwrwwww2 = Tabs.Affinity:AddDropdown("wwrwwww2", {
        Title = "Target Affinity (DF2)",
        Description = "You can select the target affinity.",
        Values = {"Defense", "Melee", "Sniper", "Sword"},
        Multi = true,
        Default = {},
})


wwrwwww2:OnChanged(function(Valuerr2)
_G.targetdef2 = false
_G.targetmelee2 = false
_G.targetsnip2 = false
_G.targetsword2 = false
table.clear(Valuess2)
task.wait()
for Valuerr2, State in next, Valuerr2 do
table.insert(Valuess2, Valuerr2)
end
for _, r in pairs(Valuess2) do
if string.find(r, "Defense") then
_G.targetdef2 = true
end
if string.find(r, "Melee") then
_G.targetmelee2 = true
end
if string.find(r, "Sniper") then
_G.targetsnip2 = true
end
if string.find(r, "Sword") then
_G.targetsword2 = true
end
end
end)


retw2 = Tabs.Affinity:AddDropdown("ccas24ff", {
        Title = "Budget Type",
        Values = {"Cash", "Gems"},
        Multi = false,
        Default = "",
})


retw2:OnChanged(function(Valuezx2)
_G.budget2 = Valuezx2
end)

DF22Toggle = Tabs.Affinity:AddToggle("DF2Toggle", {Title = "Auto Roll Affinity (DF2)", Default = false })
DF22Toggle:OnChanged(function(tt)
while Options.DF2Toggle.Value do task.wait(0.1)
pcall(function()
if Options.DF2Toggle.Value == true then
_G.quayfirstdf2 = true
else
_G.quayfirstdf2 = false
end
if _G.targetdef2 == true and _G.targetsnip2 == false and _G.targetmelee2 == false and _G.targetsword2 == false and workspace.UserData["User_"..tostring(usingid)].Data.DFT2Defense.Value < _G.trqpwo2 then
_G.defspin2 = true
else
_G.defspin2 = false
end
if _G.targetmelee2 == true and _G.targetdef2 == false and _G.targetsword2 == false and _G.targetsnip2 == false and workspace.UserData["User_"..tostring(usingid)].Data.DFT2Melee.Value < _G.trqpwo2 then
_G.meleespin2 = true
else
_G.meleespin2 = false
end
if _G.targetsnip2 == true and _G.targetdef2 == false and _G.targetmelee2 == false and _G.targetsword2 == false and workspace.UserData["User_"..tostring(usingid)].Data.DFT2Sniper.Value < _G.trqpwo2 then
_G.sniperspin2 = true
else
_G.sniperspin2 = false
end
if _G.targetsword2 == true and _G.targetdef2 == false and _G.targetmelee2 == false and _G.targetsnip2 == false and workspace.UserData["User_"..tostring(usingid)].Data.DFT2Sword.Value < _G.trqpwo2 then
_G.swordspin2 = true
else
_G.swordspin2 = false
end
if _G.targetsword2 == false and _G.targetdef2 == true and _G.targetmelee2 == true and _G.targetsnip2 == false and workspace.UserData["User_"..tostring(usingid)].Data.DFT2Defense.Value < _G.trqpwo2 and workspace.UserData["User_"..tostring(usingid)].Data.DFT2Melee.Value < _G.trqpwo2 then
_G.defmeleespin2 = true
else
_G.defmeleespin2 = false
end
if _G.targetsword2 == false and _G.targetdef2 == true and _G.targetmelee2 == false and _G.targetsnip2 == true and workspace.UserData["User_"..tostring(usingid)].Data.DFT2Defense.Value < _G.trqpwo2 and workspace.UserData["User_"..tostring(usingid)].Data.DFT2Sniper.Value < _G.trqpwo2 then
_G.defsnipspin2 = true
else
_G.defsnipspin2 = false
end
if _G.targetsword2 == true and _G.targetdef2 == true and _G.targetmelee2 == false and _G.targetsnip2 == false and workspace.UserData["User_"..tostring(usingid)].Data.DFT2Defense.Value < _G.trqpwo2 and workspace.UserData["User_"..tostring(usingid)].Data.DFT2Sword.Value < _G.trqpwo2 then
_G.defswordspin2 = true
else
_G.defswordspin2 = false
end
if _G.targetsword2 == false and _G.targetdef2 == false and _G.targetmelee2 == true and _G.targetsnip2 == true and workspace.UserData["User_"..tostring(usingid)].Data.DFT2Melee.Value < _G.trqpwo2 and workspace.UserData["User_"..tostring(usingid)].Data.DFT2Sniper.Value < _G.trqpwo2 then
_G.meleesnipspin2 = true
else
_G.meleesnipspin2 = false
end
if _G.targetsword2 == true and _G.targetdef2 == false and _G.targetmelee2 == true and _G.targetsnip2 == false and workspace.UserData["User_"..tostring(usingid)].Data.DFT2Melee.Value < _G.trqpwo2 and workspace.UserData["User_"..tostring(usingid)].Data.DFT2Sword.Value < _G.trqpwo2 then
_G.meleeswordspin2 = true
else
_G.meleeswordspin2 = false
end
if _G.targetsword2 == true and _G.targetdef2 == false and _G.targetmelee2 == false and _G.targetsnip2 == true and workspace.UserData["User_"..tostring(usingid)].Data.DFT2Sniper.Value < _G.trqpwo2 and workspace.UserData["User_"..tostring(usingid)].Data.DFT2Sword.Value < _G.trqpwo2 then
_G.swordsnipspin2 = true
else
_G.swordsnipspin2 = false
end
if _G.targetsword2 == false and _G.targetdef2 == true and _G.targetmelee2 == true and _G.targetsnip2 == true and workspace.UserData["User_"..tostring(usingid)].Data.DFT2Sniper.Value < _G.trqpwo2 and workspace.UserData["User_"..tostring(usingid)].Data.DFT2Defense.Value < _G.trqpwo2 and workspace.UserData["User_"..tostring(usingid)].Data.DFT2Melee.Value < _G.trqpwo2 then
_G.defmeleesnipspin2 = true
else
_G.defmeleesnipspin2 = false
end
if _G.targetsword2 == true and _G.targetdef2 == true and _G.targetmelee2 == true and _G.targetsnip2 == false and workspace.UserData["User_"..tostring(usingid)].Data.DFT2Sword.Value < _G.trqpwo2 and workspace.UserData["User_"..tostring(usingid)].Data.DFT2Defense.Value < _G.trqpwo2 and workspace.UserData["User_"..tostring(usingid)].Data.DFT2Melee.Value < _G.trqpwo2 then
_G.defmeleeswordspin2 = true
else
_G.defmeleeswordspin2 = false
end
if _G.targetsword2 == true and _G.targetdef2 == false and _G.targetmelee2 == true and _G.targetsnip2 == true and workspace.UserData["User_"..tostring(usingid)].Data.DFT2Sword.Value < _G.trqpwo2 and workspace.UserData["User_"..tostring(usingid)].Data.DFT2Sniper.Value < _G.trqpwo2 and workspace.UserData["User_"..tostring(usingid)].Data.DFT2Melee.Value < _G.trqpwo2 then
_G.meleesnipswordspin2 = true
else
_G.meleesnipswordspin2 = false
end
if _G.targetsword2 == true and _G.targetdef2 == true and _G.targetmelee2 == false and _G.targetsnip2 == true and workspace.UserData["User_"..tostring(usingid)].Data.DFT2Sword.Value < _G.trqpwo2 and workspace.UserData["User_"..tostring(usingid)].Data.DFT2Sniper.Value < _G.trqpwo2 and workspace.UserData["User_"..tostring(usingid)].Data.DFT2Defense.Value < _G.trqpwo2 then
_G.defswordsnip2 = true
else
_G.defswordsnip2 = false
end
if _G.targetsword2 == true and _G.targetdef2 == true and _G.targetmelee2 == true and _G.targetsnip2 == true and workspace.UserData["User_"..tostring(usingid)].Data.DFT2Sword.Value < _G.trqpwo2 and workspace.UserData["User_"..tostring(usingid)].Data.DFT2Sniper.Value < _G.trqpwo2 and workspace.UserData["User_"..tostring(usingid)].Data.DFT2Melee.Value < _G.trqpwo2 and workspace.UserData["User_"..tostring(usingid)].Data.DFT2Defense.Value < _G.trqpwo2 then
_G.allspin2 = true
else
_G.allspin2 = false
end
end)
end
end)

Tabs.Skill:AddSection("					  --Auto Spam Fruit--")
skillldrop = Tabs.Skill:AddDropdown("skillldrop", {
        Title = "Fruit Spam",
        Values = {"Quake","Dark","Phoenix","Vampire","Light","Magma","Flare","Chilly","Candy","Gravity","Plasma","Venom","Hollow","Bomb"},
        Multi = false,
        Default = "",
    })


skillldrop:OnChanged(function(skillzxmdr)
_G.skilltype = skillzxmdr
end)

skillnumpo = Tabs.Skill:AddDropdown("skillnumpo", {
        Title = "Skill",
        Values = {"Power1","Power2","Power3","Power4","Power5","Power6"," "},
        Multi = false,
        Default = "",
    })

skillnumpo:OnChanged(function(skilzwqw)
_G.skillnumz = skilzwqw
end)

skillzmupoza = Tabs.Skill:AddSlider("skillzmupoza", {
    Title = "Charging Power (%)",
    Description = "Adjust charging power",
    Default = 100,
    Min = 0,
    Max = 100,
    Rounding = 0,
    Callback = function(asdkqwmz)
            _G.numcharg = tonumber(asdkqwmz)
        end
    })

spamskillz = Tabs.Skill:AddToggle("spamskillztoggle", {Title = "Auto Spam Fruit", Default = false })
spamskillz:OnChanged(function()
if Options.spamskillztoggle.Value == true then
_G.startspamskill = true

task.spawn(function()
while _G.startspamskill do task.wait(0.3)
pcall(function()
repeat task.wait(0.1)
if _G.skilltype == "Flare" and _G.skillnumz == "Power1" and _G.startspamskill == true then
repeat task.wait(0.15)
local args = {
    [1] = getsenv(game:GetService("Players").LocalPlayer.Character.Powers.Flare).VTCmgwcm,
    [2] = "FlarePower1",
    [3] = "Fly"
}

game:GetService("Players").LocalPlayer.Character.Powers.Flare.RemoteEvent:FireServer(unpack(args))
task.wait()
until _G.skilltype ~= "Flare" or _G.skillnumz ~= "Power1" or _G.startspamskill == false
elseif _G.skilltype == "Flare" and _G.skillnumz == "Power2" and _G.startspamskill == true then
repeat task.wait(0.15)
local args = {
    [1] = getsenv(game:GetService("Players").LocalPlayer.Character.Powers.Flare).VTCmgwcm,
    [2] = "FlarePower2",
    [3] = "StartCharging",
    [4] = CFrame.new(-143.0747833251953, 218, -994.1463012695312, 0.9986038208007812, -0.013327144086360931, 0.051116567105054855, 9.313225746154785e-10, 0.9676525592803955, 0.2522869408130646, -0.05282533913850784, -0.2519347071647644, 0.966301441192627),
    [5] = workspace:WaitForChild("IslandTown"):WaitForChild("GrassUplift"):WaitForChild("Union"),
    [7] = "Left"
}

game:GetService("Players").LocalPlayer.Character.Powers.Flare.RemoteEvent:FireServer(unpack(args))
task.wait()
local args = {
    [1] = getsenv(game:GetService("Players").LocalPlayer.Character.Powers.Flare).VTCmgwcm,
    [2] = "FlarePower2",
    [3] = "StopCharging",
    [4] = CFrame.new(Vector3.new(game:GetService("Players").LocalPlayer:GetMouse().Hit.X, game:GetService("Players").LocalPlayer:GetMouse().Hit.Y, game:GetService("Players").LocalPlayer:GetMouse().Hit.Z)),
    [5] = workspace:WaitForChild("IslandTown"):WaitForChild("GrassUplift"):WaitForChild("Union"),
    [6] = _G.numcharg
}

game:GetService("Players").LocalPlayer.Character.Powers.Flare.RemoteEvent:FireServer(unpack(args))
until _G.skilltype ~= "Flare" or _G.skillnumz ~= "Power2" or _G.startspamskill == false
elseif _G.skilltype == "Flare" and _G.skillnumz == "Power3" and _G.startspamskill == true then
repeat task.wait()
local args = {
    [1] = getsenv(game:GetService("Players").LocalPlayer.Character.Powers.Flare).VTCmgwcm,
    [2] = "FlarePower3",
    [3] = "Status",
    [4] = CFrame.new(Vector3.new(game:GetService("Players").LocalPlayer:GetMouse().Hit.X, game:GetService("Players").LocalPlayer:GetMouse().Hit.Y, game:GetService("Players").LocalPlayer:GetMouse().Hit.Z))
}

game:GetService("Players").LocalPlayer.Character.Powers.Flare.RemoteEvent:FireServer(unpack(args))
task.wait(1)
local args = {
    [1] = getsenv(game:GetService("Players").LocalPlayer.Character.Powers.Flare).VTCmgwcm,
    [2] = "FlarePower3",
    [3] = "Status",
    [4] = CFrame.new(Vector3.new(game:GetService("Players").LocalPlayer:GetMouse().Hit.X, game:GetService("Players").LocalPlayer:GetMouse().Hit.Y, game:GetService("Players").LocalPlayer:GetMouse().Hit.Z))
}

game:GetService("Players").LocalPlayer.Character.Powers.Flare.RemoteEvent:FireServer(unpack(args))
until _G.skilltype ~= "Flare" or _G.skillnumz ~= "Power3" or _G.startspamskill == false
elseif _G.skilltype == "Flare" and _G.skillnumz == "Power4" and _G.startspamskill == true then
repeat task.wait()
local args = {
    [1] = getsenv(game:GetService("Players").LocalPlayer.Character.Powers.Flare).VTCmgwcm,
    [2] = "FlarePower4"
}

game:GetService("Players").LocalPlayer.Character.Powers.Flare.RemoteEvent:FireServer(unpack(args))
task.wait(0.1)
until _G.skilltype ~= "Flare" or _G.skillnumz ~= "Power4" or _G.startspamskill == false
elseif _G.skilltype == "Flare" and _G.skillnumz == "Power5" and _G.startspamskill == true then
repeat task.wait(0.15)
local args = {
    [1] = getsenv(game:GetService("Players").LocalPlayer.Character.Powers.Flare).VTCmgwcm,
    [2] = "FlarePower5",
    [3] = "StartCharging",
    [4] = CFrame.new(722.184326171875, 238, 1204.1463623046875, -0.9409554600715637, 0.07911429554224014, -0.3291562795639038, 6.581859057774864e-09, 0.9723090529441833, 0.23369912803173065, 0.3385305404663086, 0.2199004739522934, -0.9148994088172913),
    [5] = workspace:WaitForChild("IslandGrassy"):WaitForChild("Base"):WaitForChild("DirtGrass"):WaitForChild("Grass"):WaitForChild("Grass"),
    [7] = "Right"
}

game:GetService("Players").LocalPlayer.Character.Powers.Flare.RemoteEvent:FireServer(unpack(args))
task.wait()
local args = {
    [1] = getsenv(game:GetService("Players").LocalPlayer.Character.Powers.Flare).VTCmgwcm,
    [2] = "FlarePower5",
    [3] = "StopCharging",
    [4] = CFrame.new(Vector3.new(game:GetService("Players").LocalPlayer:GetMouse().Hit.X, game:GetService("Players").LocalPlayer:GetMouse().Hit.Y, game:GetService("Players").LocalPlayer:GetMouse().Hit.Z)),
    [5] = workspace:WaitForChild("IslandGrassy"):WaitForChild("Base"):WaitForChild("DirtGrass"):WaitForChild("Grass"):WaitForChild("Grass"),
    [6] = _G.numcharg
}

game:GetService("Players").LocalPlayer.Character.Powers.Flare.RemoteEvent:FireServer(unpack(args))
until _G.skilltype ~= "Flare" or _G.skillnumz ~= "Power5" or _G.startspamskill == false
elseif _G.skilltype == "Magma" and _G.skillnumz == "Power1" and _G.startspamskill == true then
repeat task.wait(0.15)
local args = {
    [1] = getsenv(game:GetService("Players").LocalPlayer.Character.Powers.Magma).VTCmel,
    [2] = "MagmaPower1",
    [3] = "StartCharging",
    [4] = CFrame.new(-123.28974914550781, 213, -871.10595703125, 0.9992225766181946, -0.009072019718587399, 0.038368139415979385, -0, 0.9731666445732117, 0.23010201752185822, -0.03942607715725899, -0.22992312908172607, 0.9724099040031433),
    [5] = workspace:WaitForChild("IslandTown"):WaitForChild("Beach"):WaitForChild("Beach"),
    [7] = "Right"
}

game:GetService("Players").LocalPlayer.Character.Powers.Magma.RemoteEvent:FireServer(unpack(args))
task.wait()
local args = {
    [1] = getsenv(game:GetService("Players").LocalPlayer.Character.Powers.Magma).VTCmel,
    [2] = "MagmaPower1",
    [3] = "StopCharging",
    [4] = CFrame.new(Vector3.new(game:GetService("Players").LocalPlayer:GetMouse().Hit.X, game:GetService("Players").LocalPlayer:GetMouse().Hit.Y, game:GetService("Players").LocalPlayer:GetMouse().Hit.Z)),
    [5] = workspace:WaitForChild("IslandTown"):WaitForChild("Beach"):WaitForChild("Beach"),
    [6] = _G.numcharg
}

game:GetService("Players").LocalPlayer.Character.Powers.Magma.RemoteEvent:FireServer(unpack(args))
until _G.skilltype ~= "Magma" or _G.skillnumz ~= "Power1" or _G.startspamskill == false
elseif _G.skilltype == "Magma" and _G.skillnumz == "Power2" and _G.startspamskill == true then
repeat task.wait()
if game:GetService("Players").LocalPlayer.Character.UsingMagmaBody.Value == false then
local args = {
    [1] = getsenv(game:GetService("Players").LocalPlayer.Character.Powers.Magma).VTCmel,
    [2] = "MagmaPower8"
}

game:GetService("Players").LocalPlayer.Character.Powers.Magma.RemoteEvent:FireServer(unpack(args))
end
task.wait(0.2)
until _G.skilltype ~= "Magma" or _G.skillnumz ~= "Power2" or _G.startspamskill == false
elseif _G.skilltype == "Magma" and _G.skillnumz == "Power3" and _G.startspamskill == true then
repeat task.wait()
local args = {
    [1] = getsenv(game:GetService("Players").LocalPlayer.Character.Powers.Magma).VTCmel,
    [2] = "MagmaPower9",
    [3] = "Create",
    [4] = game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame,
    [5] = workspace:WaitForChild("IslandGrassy"):WaitForChild("Base"):WaitForChild("DirtGrass"):WaitForChild("Grass"):WaitForChild("Grass")
}

game:GetService("Players").LocalPlayer.Character.Powers.Magma.RemoteEvent:FireServer(unpack(args))
task.wait(0.2)
until _G.skilltype ~= "Magma" or _G.skillnumz ~= "Power3" or _G.startspamskill == false
elseif _G.skilltype == "Gravity" and _G.skillnumz == "Power1" and _G.startspamskill == true then
repeat task.wait(0.15)
local args = {
    [1] = getsenv(game:GetService("Players").LocalPlayer.Character.Powers.Gravity).VTCjh,
    [2] = "GravityPower7"
}

game:GetService("Players").LocalPlayer.Character.Powers.Gravity.RemoteEvent:FireServer(unpack(args))
until _G.skilltype ~= "Gravity" or _G.skillnumz ~= "Power1" or _G.startspamskill == false
elseif _G.skilltype == "Gravity" and _G.skillnumz == "Power4" and _G.startspamskill == true then
repeat task.wait()
local args = {
[1] = getsenv(game:GetService("Players").LocalPlayer.Character.Powers.Gravity).VTCjh,
[2] = "GravityPower4",
[3] = "StartCharging"
}

game:GetService("Players").LocalPlayer.Character.Powers.Gravity.RemoteEvent:FireServer(unpack(args))
task.wait()
local args = {
[1] = getsenv(game:GetService("Players").LocalPlayer.Character.Powers.Gravity).VTCjh,
[2] = "GravityPower4",
[3] = "StartCharging",
[4] = CFrame.new(game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.Position),
[5] = game:GetService("Players").LocalPlayer.Character.HumanoidRootPart
}
                        
game:GetService("Players").LocalPlayer.Character.Powers.Gravity.RemoteEvent:FireServer(unpack(args))
task.wait(0.15)
local args = {
[1] = getsenv(game:GetService("Players").LocalPlayer.Character.Powers.Gravity).VTCjh,
[2] = "GravityPower4",
[3] = "StopCharging",
[4] = CFrame.new(game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.Position),
[5] = game:GetService("Players").LocalPlayer.Character.HumanoidRootPart,
[6] = _G.numcharg * 3
}

game:GetService("Players").LocalPlayer.Character.Powers.Gravity.RemoteEvent:FireServer(unpack(args))
until _G.skilltype ~= "Gravity" or _G.skillnumz ~= "Power4" or _G.startspamskill == false
elseif _G.skilltype == "Gravity" and _G.skillnumz == "Power5" and _G.startspamskill == true then
repeat task.wait(0.15)
local args = {
    [1] = getsenv(game:GetService("Players").LocalPlayer.Character.Powers.Gravity).VTCjh,
    [2] = "GravityPower11",
    [3] = "StartCharging",
    [4] = CFrame.new(712.109130859375, 238, 1197.0052490234375, -0.9692574739456177, -0.12293502688407898, 0.21313606202602386, 3.651063451570735e-09, 0.8662350177764893, 0.49963682889938354, -0.24604877829551697, 0.48427674174308777, -0.8396047353744507),
    [5] = workspace:WaitForChild("IslandGrassy"):WaitForChild("Base"):WaitForChild("DirtGrass"):WaitForChild("Grass"):WaitForChild("Grass")
}

game:GetService("Players").LocalPlayer.Character.Powers.Gravity.RemoteEvent:FireServer(unpack(args))
task.wait()
local args = {
    [1] = getsenv(game:GetService("Players").LocalPlayer.Character.Powers.Gravity).VTCjh,
    [2] = "GravityPower11",
    [3] = "StopCharging",
    [4] = CFrame.new(717.3153686523438, 238, 1196.58447265625, -0.8449660539627075, 0.34548458456993103, -0.40825584530830383, -3.946096782669883e-09, 0.7633518576622009, 0.6459829211235046, 0.534820020198822, 0.5458336472511292, -0.6450063586235046),
    [5] = game:GetService("Players").LocalPlayer.Character.HumanoidRootPart,
    [6] = _G.numcharg * 1.5
}

game:GetService("Players").LocalPlayer.Character.Powers.Gravity.RemoteEvent:FireServer(unpack(args))
until _G.skilltype ~= "Gravity" or _G.skillnumz ~= "Power5" or _G.startspamskill == false
elseif _G.skilltype == "Gravity" and _G.skillnumz == "Power6" and _G.startspamskill == true then
repeat task.wait(0.15)
local args = {
    [1] = getsenv(game:GetService("Players").LocalPlayer.Character.Powers.Gravity).VTCjh,
    [2] = "GravityPower12",
    [3] = "StartCharging"
}

game:GetService("Players").LocalPlayer.Character.Powers.Gravity.RemoteEvent:FireServer(unpack(args))
task.wait()
local args = {
    [1] = getsenv(game:GetService("Players").LocalPlayer.Character.Powers.Gravity).VTCjh,
    [2] = "GravityPower12",
    [3] = "StartCharging",
    [4] = CFrame.new(726.8839111328125, 238.20001220703125, 1194.1475830078125, -0.5433058738708496, 0.19173738360404968, -0.8173466920852661, -3.00356317595174e-09, 0.9735709428787231, 0.22838526964187622, 0.8395348191261292, 0.12408305704593658, -0.5289468169212341),
    [5] = workspace:WaitForChild("IslandGrassy"):WaitForChild("Base"):WaitForChild("Path"):WaitForChild("Union")
}

game:GetService("Players").LocalPlayer.Character.Powers.Gravity.RemoteEvent:FireServer(unpack(args))
task.wait()
local args = {
    [1] = getsenv(game:GetService("Players").LocalPlayer.Character.Powers.Gravity).VTCjh,
    [2] = "GravityPower12",
    [3] = "StopCharging",
    [4] = CFrame.new(Vector3.new(game:GetService("Players").LocalPlayer:GetMouse().Hit.X, game:GetService("Players").LocalPlayer:GetMouse().Hit.Y, game:GetService("Players").LocalPlayer:GetMouse().Hit.Z)),
    [5] = game:GetService("Players").LocalPlayer.Character.HumanoidRootPart,
    [6] = _G.numcharg * 1.5
}

game:GetService("Players").LocalPlayer.Character.Powers.Gravity.RemoteEvent:FireServer(unpack(args))
until _G.skilltype ~= "Gravity" or _G.skillnumz ~= "Power6" or _G.startspamskill == false
elseif _G.skilltype == "Bomb" and _G.skillnumz == "Power1" and _G.startspamskill == true then
repeat task.wait(0.15)
local args = {
    [1] = getsenv(game:GetService("Players").LocalPlayer.Character.Powers.Bomb).VTCcpkghc,
    [2] = "BombPower7",
    [3] = "StartCharging",
    [4] = CFrame.new(727.8606567382812, 238, 1206.005859375, -0.7932435274124146, 0.36403170228004456, -0.4881042540073395, -7.20106996254799e-09, 0.8016104698181152, 0.5978468656539917, 0.6089046001434326, 0.47423815727233887, -0.6358722448348999),
    [5] = workspace:WaitForChild("IslandGrassy"):WaitForChild("Base"):WaitForChild("DirtGrass"):WaitForChild("Grass"):WaitForChild("Grass"),
    [7] = "Right"
}

game:GetService("Players").LocalPlayer.Character.Powers.Bomb.RemoteEvent:FireServer(unpack(args))
task.wait()
local args = {
    [1] = getsenv(game:GetService("Players").LocalPlayer.Character.Powers.Bomb).VTCcpkghc,
    [2] = "BombPower7",
    [3] = "StopCharging",
    [4] = CFrame.new(Vector3.new(game:GetService("Players").LocalPlayer:GetMouse().Hit.X, game:GetService("Players").LocalPlayer:GetMouse().Hit.Y, game:GetService("Players").LocalPlayer:GetMouse().Hit.Z)),
    [5] = workspace:WaitForChild("IslandGrassy"):WaitForChild("Base"):WaitForChild("DirtGrass"):WaitForChild("Grass"):WaitForChild("Grass"),
    [6] = _G.numcharg
}

game:GetService("Players").LocalPlayer.Character.Powers.Bomb.RemoteEvent:FireServer(unpack(args))
until _G.skilltype ~= "Bomb" or _G.skillnumz ~= "Power1" or _G.startspamskill == false
elseif _G.skilltype == "Bomb" and _G.skillnumz == "Power2" and _G.startspamskill == true then
repeat task.wait(0.15)
local args = {
    [1] = getsenv(game:GetService("Players").LocalPlayer.Character.Powers.Bomb).VTCcpkghc,
    [2] = "BombPower8",
    [3] = "StartCharging",
    [4] = CFrame.new(764.07861328125, 238, 1206.9749755859375, -0.3646012842655182, 0.5613641738891602, -0.742924153804779, 9.520264576678983e-09, 0.7978448271751404, 0.6028629541397095, 0.9311638474464417, 0.21980459988117218, -0.2908952236175537),
    [5] = workspace:WaitForChild("IslandGrassy"):WaitForChild("Base"):WaitForChild("DirtGrass"):WaitForChild("Grass"):WaitForChild("Grass"),
    [7] = "Left"
}

game:GetService("Players").LocalPlayer.Character.Powers.Bomb.RemoteEvent:FireServer(unpack(args))
task.wait()
local args = {
    [1] = getsenv(game:GetService("Players").LocalPlayer.Character.Powers.Bomb).VTCcpkghc,
    [2] = "BombPower8",
    [3] = "StopCharging",
    [4] = CFrame.new(Vector3.new(game:GetService("Players").LocalPlayer:GetMouse().Hit.X, game:GetService("Players").LocalPlayer:GetMouse().Hit.Y, game:GetService("Players").LocalPlayer:GetMouse().Hit.Z)),
    [5] = workspace:WaitForChild("IslandGrassy"):WaitForChild("Base"):WaitForChild("Path"):WaitForChild("Wedge"),
    [6] = _G.numcharg
}

game:GetService("Players").LocalPlayer.Character.Powers.Bomb.RemoteEvent:FireServer(unpack(args))
until _G.skilltype ~= "Bomb" or _G.skillnumz ~= "Power2" or _G.startspamskill == false
elseif _G.skilltype == "Bomb" and _G.skillnumz == "Power3" and _G.startspamskill == true then
repeat task.wait(0.15)
local args = {
    [1] = getsenv(game:GetService("Players").LocalPlayer.Character.Powers.Bomb).VTCcpkghc,
    [2] = "BombPower9",
    [3] = "StartCharging",
    [4] = CFrame.new(764.029541015625, 238, 1228.4931640625, 0.1461942344903946, 0.16408567130565643, -0.9755527973175049, -5.016764781373695e-11, 0.9861480593681335, 0.16586777567863464, 0.9892559051513672, -0.024248912930488586, 0.1441691666841507),
    [5] = workspace:WaitForChild("IslandGrassy"):WaitForChild("Base"):WaitForChild("DirtGrass"):WaitForChild("Grass"):WaitForChild("Grass"),
    [7] = "Left"
}

game:GetService("Players").LocalPlayer.Character.Powers.Bomb.RemoteEvent:FireServer(unpack(args))
task.wait()
local args = {
    [1] = getsenv(game:GetService("Players").LocalPlayer.Character.Powers.Bomb).VTCcpkghc,
    [2] = "BombPower9",
    [3] = "StopCharging",
    [4] = CFrame.new(Vector3.new(game:GetService("Players").LocalPlayer:GetMouse().Hit.X, game:GetService("Players").LocalPlayer:GetMouse().Hit.Y, game:GetService("Players").LocalPlayer:GetMouse().Hit.Z)),
    [5] = workspace:WaitForChild("IslandGrassy"):WaitForChild("Base"):WaitForChild("DirtGrass"):WaitForChild("Grass"):WaitForChild("Grass"),
    [6] = _G.numcharg
}

game:GetService("Players").LocalPlayer.Character.Powers.Bomb.RemoteEvent:FireServer(unpack(args))
until _G.skilltype ~= "Bomb" or _G.skillnumz ~= "Power3" or _G.startspamskill == false
elseif _G.skilltype == "Bomb" and _G.skillnumz == "Power4" and _G.startspamskill == true then
repeat task.wait(0.15)
local args = {
    [1] = getsenv(game:GetService("Players").LocalPlayer.Character.Powers.Bomb).VTCcpkghc,
    [2] = "BombPower10",
    [3] = "StartCharging",
    [4] = CFrame.new(777, 241.96307373046875, 1204.1689453125, -0.1765427589416504, 0.01790277659893036, -0.9841301441192627, -2.6789415130679117e-10, 0.9998345971107483, 0.018188463523983955, 0.9842929840087891, 0.0032110416796058416, -0.17651355266571045),
    [5] = workspace:WaitForChild("IslandGrassy"):WaitForChild("Base"):WaitForChild("DirtGrass"):WaitForChild("Grass"):WaitForChild("Grass"),
    [7] = "Right"
}

game:GetService("Players").LocalPlayer.Character.Powers.Bomb.RemoteEvent:FireServer(unpack(args))
task.wait()
local args = {
    [1] = getsenv(game:GetService("Players").LocalPlayer.Character.Powers.Bomb).VTCcpkghc,
    [2] = "BombPower10",
    [3] = "StopCharging",
    [4] = CFrame.new(Vector3.new(game:GetService("Players").LocalPlayer:GetMouse().Hit.X, game:GetService("Players").LocalPlayer:GetMouse().Hit.Y, game:GetService("Players").LocalPlayer:GetMouse().Hit.Z)),
    [5] = workspace:WaitForChild("IslandGrassy"):WaitForChild("Base"):WaitForChild("DirtGrass"):WaitForChild("Grass"):WaitForChild("Grass"),
    [6] = _G.numcharg
}

game:GetService("Players").LocalPlayer.Character.Powers.Bomb.RemoteEvent:FireServer(unpack(args))
until _G.skilltype ~= "Bomb" or _G.skillnumz ~= "Power4" or _G.startspamskill == false
elseif _G.skilltype == "Bomb" and _G.skillnumz == "Power5" and _G.startspamskill == true then
repeat task.wait(0.15)
local args = {
    [1] = getsenv(game:GetService("Players").LocalPlayer.Character.Powers.Bomb).VTCcpkghc,
    [2] = "BombPower11",
    [3] = "StartCharging",
    [4] = CFrame.new(802, 255.7018280029297, 1209.4305419921875, -0.18318389356136322, -0.10552715510129929, -0.9773984551429749, 1.4024177374949431e-09, 0.9942220449447632, -0.10734354704618454, 0.9830787181854248, -0.0196636114269495, -0.18212544918060303),
    [5] = workspace:WaitForChild("IslandGrassy"):WaitForChild("Base"):WaitForChild("DirtGrass"):WaitForChild("Dirt"):WaitForChild("Dirt"),
    [7] = "Right"
}

game:GetService("Players").LocalPlayer.Character.Powers.Bomb.RemoteEvent:FireServer(unpack(args))
task.wait()
local args = {
    [1] = getsenv(game:GetService("Players").LocalPlayer.Character.Powers.Bomb).VTCcpkghc,
    [2] = "BombPower11",
    [3] = "StopCharging",
    [4] = CFrame.new(Vector3.new(game:GetService("Players").LocalPlayer:GetMouse().Hit.X, game:GetService("Players").LocalPlayer:GetMouse().Hit.Y, game:GetService("Players").LocalPlayer:GetMouse().Hit.Z)),
    [5] = workspace:WaitForChild("IslandGrassy"):WaitForChild("Base"):WaitForChild("DirtGrass"):WaitForChild("Dirt"):WaitForChild("Dirt"),
    [6] = _G.numcharg
}

game:GetService("Players").LocalPlayer.Character.Powers.Bomb.RemoteEvent:FireServer(unpack(args))
until _G.skilltype ~= "Bomb" or _G.skillnumz ~= "Power5" or _G.startspamskill == false
elseif _G.skilltype == "Bomb" and _G.skillnumz == "Power6" and _G.startspamskill == true then
repeat task.wait(0.15)
local args = {
    [1] = getsenv(game:GetService("Players").LocalPlayer.Character.Powers.Bomb).VTCcpkghc,
    [2] = "BombPower6",
    [3] = "StartCharging",
    [4] = CFrame.new(736.8218994140625, 238.20001220703125, 1188.099609375, 0.21035535633563995, 0.1760607212781906, -0.9616410136222839, 2.9102698029248586e-09, 0.983650267124176, 0.18009023368358612, 0.9776250123977661, -0.03788295015692711, 0.20691607892513275),
    [5] = workspace:WaitForChild("IslandGrassy"):WaitForChild("Base"):WaitForChild("Path"):WaitForChild("Union"),
    [7] = "Right"
}

game:GetService("Players").LocalPlayer.Character.Powers.Bomb.RemoteEvent:FireServer(unpack(args))
task.wait()
local args = {
    [1] = getsenv(game:GetService("Players").LocalPlayer.Character.Powers.Bomb).VTCcpkghc,
    [2] = "BombPower6",
    [3] = "StopCharging",
    [4] = CFrame.new(736.8218994140625, 238.20001220703125, 1188.099609375, 0.21035535633563995, 0.1760607212781906, -0.9616410136222839, 2.9102698029248586e-09, 0.983650267124176, 0.18009023368358612, 0.9776250123977661, -0.03788295015692711, 0.20691607892513275),
    [5] = workspace:WaitForChild("IslandGrassy"):WaitForChild("Base"):WaitForChild("Path"):WaitForChild("Union"),
    [6] = _G.numcharg
}

game:GetService("Players").LocalPlayer.Character.Powers.Bomb.RemoteEvent:FireServer(unpack(args))
until _G.skilltype ~= "Bomb" or _G.skillnumz ~= "Power6" or _G.startspamskill == false
elseif _G.skilltype == "Quake" and _G.skillnumz == "Power1" and _G.startspamskill == true then
repeat task.wait(0.15)
            local args = {
                [1] = getsenv(game:GetService("Players").LocalPlayer.Character.Powers.Quake).VTCebvc,
                [2] = "QuakePower1",
                [3] = "StopCharging",
                [4] = workspace:WaitForChild("IslandGrassy"):WaitForChild("Base"):WaitForChild("Path"):WaitForChild("Union"),
                [5] = CFrame.new(Vector3.new(game:GetService("Players").LocalPlayer:GetMouse().Hit.X, game:GetService("Players").LocalPlayer:GetMouse().Hit.Y, game:GetService("Players").LocalPlayer:GetMouse().Hit.Z)),
                [6] = _G.numcharg,
                [7] = Vector3.new(game:GetService("Players").LocalPlayer:GetMouse().Hit.X, game:GetService("Players").LocalPlayer:GetMouse().Hit.Y, game:GetService("Players").LocalPlayer:GetMouse().Hit.Z)
            }

            game:GetService("Players").LocalPlayer.Character.Powers.Quake.RemoteEvent:FireServer(unpack(args))
until _G.skilltype ~= "Quake" or _G.skillnumz ~= "Power1" or _G.startspamskill == false
elseif _G.skilltype == "Quake" and _G.skillnumz == "Power2" and _G.startspamskill == true then
repeat task.wait(0.15)
local args = {
    [1] = getsenv(game:GetService("Players").LocalPlayer.Character.Powers.Quake).VTCebvc,
    [2] = "QuakePower2",
    [3] = "StopCharging",
    [4] = CFrame.new(Vector3.new(game:GetService("Players").LocalPlayer:GetMouse().Hit.X, game:GetService("Players").LocalPlayer:GetMouse().Hit.Y, game:GetService("Players").LocalPlayer:GetMouse().Hit.Z)),
    [6] = _G.numcharg,
    [7] = Vector3.new(game:GetService("Players").LocalPlayer:GetMouse().Hit.X, game:GetService("Players").LocalPlayer:GetMouse().Hit.Y, game:GetService("Players").LocalPlayer:GetMouse().Hit.Z),
    [8] = Vector3.new(game:GetService("Players").LocalPlayer:GetMouse().Hit.X, game:GetService("Players").LocalPlayer:GetMouse().Hit.Y, game:GetService("Players").LocalPlayer:GetMouse().Hit.Z)
}

game:GetService("Players").LocalPlayer.Character.Powers.Quake.RemoteEvent:FireServer(unpack(args))
until _G.skilltype ~= "Quake" or _G.skillnumz ~= "Power2" or _G.startspamskill == false
elseif _G.skilltype == "Quake" and _G.skillnumz == "Power3" and _G.startspamskill == true then
repeat task.wait(0.15)
local args = {
    [1] = getsenv(game:GetService("Players").LocalPlayer.Character.Powers.Quake).VTCebvc,
    [2] = "QuakePower3",
    [3] = "StopCharging",
    [4] = workspace:WaitForChild("IslandGrassy"):WaitForChild("Base"):WaitForChild("DirtGrass"):WaitForChild("Grass"):WaitForChild("Grass"),
    [5] = CFrame.new(Vector3.new(game:GetService("Players").LocalPlayer:GetMouse().Hit.X, game:GetService("Players").LocalPlayer:GetMouse().Hit.Y, game:GetService("Players").LocalPlayer:GetMouse().Hit.Z)),
    [6] = _G.numcharg,
    [7] = Vector3.new(game:GetService("Players").LocalPlayer:GetMouse().Hit.X, game:GetService("Players").LocalPlayer:GetMouse().Hit.Y, game:GetService("Players").LocalPlayer:GetMouse().Hit.Z)
}

game:GetService("Players").LocalPlayer.Character.Powers.Quake.RemoteEvent:FireServer(unpack(args))
until _G.skilltype ~= "Quake" or _G.skillnumz ~= "Power3" or _G.startspamskill == false
elseif _G.skilltype == "Quake" and _G.skillnumz == "Power4" and _G.startspamskill == true then
repeat task.wait(0.15)
local args = {
    [1] = getsenv(game:GetService("Players").LocalPlayer.Character.Powers.Quake).VTCebvc,
    [2] = "QuakePower4",
    [3] = "StopCharging",
    [4] = workspace:WaitForChild("IslandGrassy"):WaitForChild("Base"):WaitForChild("DirtGrass"):WaitForChild("Dirt"):WaitForChild("Dirt"),
    [5] = CFrame.new(Vector3.new(game:GetService("Players").LocalPlayer:GetMouse().Hit.X, game:GetService("Players").LocalPlayer:GetMouse().Hit.Y, game:GetService("Players").LocalPlayer:GetMouse().Hit.Z)),
    [6] = _G.numcharg,
    [7] = Vector3.new(game:GetService("Players").LocalPlayer:GetMouse().Hit.X, game:GetService("Players").LocalPlayer:GetMouse().Hit.Y, game:GetService("Players").LocalPlayer:GetMouse().Hit.Z)
}

game:GetService("Players").LocalPlayer.Character.Powers.Quake.RemoteEvent:FireServer(unpack(args))
until _G.skilltype ~= "Quake" or _G.skillnumz ~= "Power4" or _G.startspamskill == false
elseif _G.skilltype == "Dark" and _G.skillnumz == "Power1" and _G.startspamskill == true then
repeat task.wait()
local args = {
    [1] = getsenv(game:GetService("Players").LocalPlayer.Character.Powers.Dark).VTCjebaj,
    [2] = "DarkPower1",
    [3] = "Begin"
}

game:GetService("Players").LocalPlayer.Character.Powers.Dark.RemoteEvent:FireServer(unpack(args))
task.wait(0.5)
until _G.skilltype ~= "Dark" or _G.skillnumz ~= "Power1" or _G.startspamskill == false
elseif _G.skilltype == "Dark" and _G.skillnumz == "Power2" and _G.startspamskill == true then
repeat task.wait()
local args = {
    [1] = getsenv(game:GetService("Players").LocalPlayer.Character.Powers.Dark).VTCjebaj,
    [2] = "DarkPower2",
    [3] = "Create",
    [5] = CFrame.new(Vector3.new(game:GetService("Players").LocalPlayer:GetMouse().Hit.X, game:GetService("Players").LocalPlayer:GetMouse().Hit.Y, game:GetService("Players").LocalPlayer:GetMouse().Hit.Z)),
    [5] = workspace:WaitForChild("IslandGrassy"):WaitForChild("Base"):WaitForChild("DirtGrass"):WaitForChild("Grass"):WaitForChild("Grass")
}

game:GetService("Players").LocalPlayer.Character.Powers.Dark.RemoteEvent:FireServer(unpack(args))
task.wait(0.5)
until _G.skilltype ~= "Dark" or _G.skillnumz ~= "Power2" or _G.startspamskill == false
elseif _G.skilltype == "Dark" and _G.skillnumz == "Power3" and _G.startspamskill == true then
repeat task.wait()
local args = {
    [1] = getsenv(game:GetService("Players").LocalPlayer.Character.Powers.Dark).VTCjebaj,
    [2] = "DarkPower3",
    [3] = "Create",
    [5] = CFrame.new(Vector3.new(game:GetService("Players").LocalPlayer:GetMouse().Hit.X, game:GetService("Players").LocalPlayer:GetMouse().Hit.Y, game:GetService("Players").LocalPlayer:GetMouse().Hit.Z)),
    [5] = workspace:WaitForChild("IslandGrassy"):WaitForChild("Base"):WaitForChild("Path"):WaitForChild("Union")
}

game:GetService("Players").LocalPlayer.Character.Powers.Dark.RemoteEvent:FireServer(unpack(args))
task.wait(0.5)
until _G.skilltype ~= "Dark" or _G.skillnumz ~= "Power3" or _G.startspamskill == false
elseif _G.skilltype == "Dark" and _G.skillnumz == "Power4" and _G.startspamskill == true then
task.wait()
game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CanCollide = false
game:GetService("Players").LocalPlayer.Character.Torso.CanCollide = false
game:GetService("Players").LocalPlayer.Character.Head.CanCollide = false
game:GetService("Players").LocalPlayer.Character["Right Arm"].CanCollide = false
game:GetService("Players").LocalPlayer.Character["Left Arm"].CanCollide = false
game:GetService("Players").LocalPlayer.Character["Right Leg"].CanCollide = false
game:GetService("Players").LocalPlayer.Character["Left Leg"].CanCollide = false
repeat task.wait(0.15)
local args = {
    [1] = getsenv(game:GetService("Players").LocalPlayer.Character.Powers.Dark).VTCjebaj,
    [2] = "DarkPower4",
    [3] = "StartCharging",
    [5] = CFrame.new(Vector3.new(game:GetService("Players").LocalPlayer:GetMouse().Hit.X, game:GetService("Players").LocalPlayer:GetMouse().Hit.Y, game:GetService("Players").LocalPlayer:GetMouse().Hit.Z)),
    [5] = workspace:WaitForChild("IslandWindmill"):WaitForChild("OutterDune"):WaitForChild("Beach"),
    [7] = "Right"
}

game:GetService("Players").LocalPlayer.Character.Powers.Dark.RemoteEvent:FireServer(unpack(args))
task.wait()
local args = {
    [1] = getsenv(game:GetService("Players").LocalPlayer.Character.Powers.Dark).VTCjebaj,
    [2] = "DarkPower4",
    [3] = "StopCharging",
    [4] = CFrame.new(Vector3.new(game:GetService("Players").LocalPlayer:GetMouse().Hit.X, game:GetService("Players").LocalPlayer:GetMouse().Hit.Y, game:GetService("Players").LocalPlayer:GetMouse().Hit.Z)),
    [5] = workspace:WaitForChild("IslandGrassy"):WaitForChild("Base"):WaitForChild("Path"):WaitForChild("Union"),
    [6] = _G.numcharg
}

game:GetService("Players").LocalPlayer.Character.Powers.Dark.RemoteEvent:FireServer(unpack(args))
until _G.skilltype ~= "Dark" or _G.skillnumz ~= "Power4" or _G.startspamskill == false
task.wait()
game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CanCollide = true
game:GetService("Players").LocalPlayer.Character.Torso.CanCollide = true
game:GetService("Players").LocalPlayer.Character.Head.CanCollide = true
game:GetService("Players").LocalPlayer.Character["Right Arm"].CanCollide = true
game:GetService("Players").LocalPlayer.Character["Left Arm"].CanCollide = true
game:GetService("Players").LocalPlayer.Character["Right Leg"].CanCollide = true
game:GetService("Players").LocalPlayer.Character["Left Leg"].CanCollide = true
elseif _G.skilltype == "Phoenix" and _G.skillnumz == "Power1" and _G.startspamskill == true then
repeat task.wait(0.15)
local args = {
    [1] = getsenv(game:GetService("Players").LocalPlayer.Character.Powers.Phoenix).VTCytb,
    [2] = "PhoenixPower1",
    [3] = "Fly"
}

game:GetService("Players").LocalPlayer.Character.Powers.Phoenix.RemoteEvent:FireServer(unpack(args))
until _G.skilltype ~= "Phoenix" or _G.skillnumz ~= "Power1" or _G.startspamskill == false
elseif _G.skilltype == "Phoenix" and _G.skillnumz == "Power2" and _G.startspamskill == true then
repeat task.wait(0.15)
local args = {
    [1] = getsenv(game:GetService("Players").LocalPlayer.Character.Powers.Phoenix).VTCytb,
    [2] = "PhoenixPower2",
    [3] = "Off",
    [4] = CFrame.new(Vector3.new(game:GetService("Players").LocalPlayer:GetMouse().Hit.X, game:GetService("Players").LocalPlayer:GetMouse().Hit.Y, game:GetService("Players").LocalPlayer:GetMouse().Hit.Z)),
    [5] = workspace:WaitForChild("IslandGrassy"):WaitForChild("Base"):WaitForChild("DirtGrass"):WaitForChild("Grass"):WaitForChild("Grass")
}

game:GetService("Players").LocalPlayer.Character.Powers.Phoenix.RemoteEvent:FireServer(unpack(args))
task.wait()
until _G.skilltype ~= "Phoenix" or _G.skillnumz ~= "Power2" or _G.startspamskill == false
elseif _G.skilltype == "Phoenix" and _G.skillnumz == "Power3" and _G.startspamskill == true then
repeat task.wait(0.15)
local args = {
    [1] = getsenv(game:GetService("Players").LocalPlayer.Character.Powers.Phoenix).VTCytb,
    [2] = "PhoenixPower9",
    [3] = "StartCharging",
    [4] = CFrame.new(Vector3.new(game:GetService("Players").LocalPlayer:GetMouse().Hit.X, game:GetService("Players").LocalPlayer:GetMouse().Hit.Y, game:GetService("Players").LocalPlayer:GetMouse().Hit.Z)),
    [5] = workspace:WaitForChild("IslandGrassy"):WaitForChild("Base"):WaitForChild("Path"):WaitForChild("Union"),
    [7] = "Right"
}

game:GetService("Players").LocalPlayer.Character.Powers.Phoenix.RemoteEvent:FireServer(unpack(args))
task.wait()
local args = {
    [1] = getsenv(game:GetService("Players").LocalPlayer.Character.Powers.Phoenix).VTCytb,
    [2] = "PhoenixPower9",
    [3] = "StopCharging",
    [4] = CFrame.new(Vector3.new(game:GetService("Players").LocalPlayer:GetMouse().Hit.X, game:GetService("Players").LocalPlayer:GetMouse().Hit.Y, game:GetService("Players").LocalPlayer:GetMouse().Hit.Z)),
    [5] = workspace:WaitForChild("IslandGrassy"):WaitForChild("Base"):WaitForChild("Path"):WaitForChild("Union"),
    [6] = _G.numcharg
}

game:GetService("Players").LocalPlayer.Character.Powers.Phoenix.RemoteEvent:FireServer(unpack(args))
until _G.skilltype ~= "Phoenix" or _G.skillnumz ~= "Power3" or _G.startspamskill == false
elseif _G.skilltype == "Phoenix" and _G.skillnumz == "Power4" and _G.startspamskill == true then
repeat task.wait()
local args = {
    [1] = getsenv(game:GetService("Players").LocalPlayer.Character.Powers.Phoenix).VTCytb,
    [2] = "PhoenixPower4"
}

game:GetService("Players").LocalPlayer.Character.Powers.Phoenix.RemoteEvent:FireServer(unpack(args))
task.wait(0.5)
until _G.skilltype ~= "Phoenix" or _G.skillnumz ~= "Power4" or _G.startspamskill == false
elseif _G.skilltype == "Vampire" and _G.skillnumz == "Power1" and _G.startspamskill == true then
repeat task.wait()
local args = {
    [1] = getsenv(game:GetService("Players").LocalPlayer.Character.Powers.Vampire).VTCjwf,
    [2] = "VampirePower1",
    [3] = "",
    [4] = Vector3.new(game:GetService("Players").LocalPlayer:GetMouse().Hit.X, game:GetService("Players").LocalPlayer:GetMouse().Hit.Y, game:GetService("Players").LocalPlayer:GetMouse().Hit.Z)
}

game:GetService("Players").LocalPlayer.Character.Powers.Vampire.RemoteEvent:FireServer(unpack(args))
task.wait(0.5)
until _G.skilltype ~= "Vampire" or _G.skillnumz ~= "Power1" or _G.startspamskill == false
elseif _G.skilltype == "Vampire" and _G.skillnumz == "Power2" and _G.startspamskill == true then
repeat task.wait()
local args = {
    [1] = getsenv(game:GetService("Players").LocalPlayer.Character.Powers.Vampire).VTCjwf,
    [2] = "VampirePower2",
    [3] = "",
    [4] = Enum.UserInputState.Begin
}

game:GetService("Players").LocalPlayer.Character.Powers.Vampire.RemoteEvent:FireServer(unpack(args))
task.wait(0.5)
until _G.skilltype ~= "Vampire" or _G.skillnumz ~= "Power2" or _G.startspamskill == false
elseif _G.skilltype == "Vampire" and _G.skillnumz == "Power3" and _G.startspamskill == true then
repeat task.wait()
local args = {
    [1] = getsenv(game:GetService("Players").LocalPlayer.Character.Powers.Vampire).VTCjwf,
    [2] = "VampirePower3",
    [3] = "",
    [4] = Enum.UserInputState.Begin
}

game:GetService("Players").LocalPlayer.Character.Powers.Vampire.RemoteEvent:FireServer(unpack(args))
task.wait(0.5)
until _G.skilltype ~= "Vampire" or _G.skillnumz ~= "Power3" or _G.startspamskill == false
elseif _G.skilltype == "Vampire" and _G.skillnumz == "Power5" and _G.startspamskill == true then
repeat task.wait(0.15)
local args = {
    [1] = getsenv(game:GetService("Players").LocalPlayer.Character.Powers.Vampire).VTCjwf,
    [2] = "VampirePower5",
    [3] = "StartCharging",
    [4] = CFrame.new(Vector3.new(game:GetService("Players").LocalPlayer:GetMouse().Hit.X, game:GetService("Players").LocalPlayer:GetMouse().Hit.Y, game:GetService("Players").LocalPlayer:GetMouse().Hit.Z)),
    [5] = workspace:WaitForChild("IslandWindmill"):WaitForChild("Beach"):WaitForChild("Beach"),
    [9] = "Left"
}

game:GetService("Players").LocalPlayer.Character.Powers.Vampire.RemoteEvent:FireServer(unpack(args))
task.wait()
local args = {
    [1] = getsenv(game:GetService("Players").LocalPlayer.Character.Powers.Vampire).VTCjwf,
    [2] = "VampirePower5",
    [3] = "StopCharging",
    [4] = CFrame.new(Vector3.new(game:GetService("Players").LocalPlayer:GetMouse().Hit.X, game:GetService("Players").LocalPlayer:GetMouse().Hit.Y, game:GetService("Players").LocalPlayer:GetMouse().Hit.Z)),
    [5] = workspace:WaitForChild("IslandWindmill"):WaitForChild("OutterDune"):WaitForChild("Beach"),
    [6] = _G.numcharg
}

game:GetService("Players").LocalPlayer.Character.Powers.Vampire.RemoteEvent:FireServer(unpack(args))
until _G.skilltype ~= "Vampire" or _G.skillnumz ~= "Power5" or _G.startspamskill == false
elseif _G.skilltype == "Vampire" and _G.skillnumz == "Power6" and _G.startspamskill == true then
repeat task.wait()
local args = {
    [1] = getsenv(game:GetService("Players").LocalPlayer.Character.Powers.Vampire).VTCjwf,
    [2] = "VampirePower6",
    [3] = "",
    [4] = Enum.UserInputState.Begin
}

game:GetService("Players").LocalPlayer.Character.Powers.Vampire.RemoteEvent:FireServer(unpack(args))
task.wait(0.5)
until _G.skilltype ~= "Vampire" or _G.skillnumz ~= "Power6" or _G.startspamskill == false
elseif _G.skilltype == "Plasma" and _G.skillnumz == "Power1" and _G.startspamskill == true then
repeat task.wait()
local args = {
    [1] = getsenv(game:GetService("Players").LocalPlayer.Character.Powers.Plasma).VTCpwd,
    [2] = "PlasmaPower1"
}

game:GetService("Players").LocalPlayer.Character.Powers.Plasma.RemoteEvent:FireServer(unpack(args))
task.wait(0.5)
until _G.skilltype ~= "Plasma" or _G.skillnumz ~= "Power1" or _G.startspamskill == false
elseif _G.skilltype == "Plasma" and _G.skillnumz == "Power2" and _G.startspamskill == true then
local args = {
    [1] = getsenv(game:GetService("Players").LocalPlayer.Character.Powers.Plasma).VTCpwd,
    [2] = "PlasmaPower2",
    [3] = "TurnOn"
}

game:GetService("Players").LocalPlayer.Character.Powers.Plasma.RemoteEvent:FireServer(unpack(args))
repeat task.wait(0.15)
local args = {
    [1] = getsenv(game:GetService("Players").LocalPlayer.Character.Powers.Plasma).VTCpwd,
    [2] = "PlasmaPower2",
    [3] = "Attack",
    [4] = Vector3.new(game:GetService("Players").LocalPlayer:GetMouse().Hit.X, game:GetService("Players").LocalPlayer:GetMouse().Hit.Y, game:GetService("Players").LocalPlayer:GetMouse().Hit.Z),
    [5] = true
}

game:GetService("Players").LocalPlayer.Character.Powers.Plasma.RemoteEvent:FireServer(unpack(args))
until _G.skilltype ~= "Plasma" or _G.skillnumz ~= "Power2" or _G.startspamskill == false
local args = {
    [1] = getsenv(game:GetService("Players").LocalPlayer.Character.Powers.Plasma).VTCpwd,
    [2] = "PlasmaPower2",
    [3] = "TurnOff"
}

game:GetService("Players").LocalPlayer.Character.Powers.Plasma.RemoteEvent:FireServer(unpack(args))
elseif _G.skilltype == "Plasma" and _G.skillnumz == "Power3" and _G.startspamskill == true then
repeat task.wait()
local args = {
    [1] = getsenv(game:GetService("Players").LocalPlayer.Character.Powers.Plasma).VTCpwd,
    [2] = "PlasmaPower3",
    [3] = "Attack"
}

game:GetService("Players").LocalPlayer.Character.Powers.Plasma.RemoteEvent:FireServer(unpack(args))
task.wait(0.5)
until _G.skilltype ~= "Plasma" or _G.skillnumz ~= "Power3" or _G.startspamskill == false
elseif _G.skilltype == "Plasma" and _G.skillnumz == "Power4" and _G.startspamskill == true then
repeat task.wait()
                    local args = {
                        [1] = getsenv(game:GetService("Players").LocalPlayer.Character.Powers.Plasma).VTCpwd,
                        [2] = "PlasmaPower4",
                        [3] = "StartCharging",
   			[4] = Vector3.new(game:GetService("Players").LocalPlayer:GetMouse().Hit.X, game:GetService("Players").LocalPlayer:GetMouse().Hit.Y, game:GetService("Players").LocalPlayer:GetMouse().Hit.Z)
                    }
                    game:GetService("Players").LocalPlayer.Character.Powers.Plasma.RemoteEvent:FireServer(unpack(args))
task.wait(0.15)
                    local args = {
                        [1] = getsenv(game:GetService("Players").LocalPlayer.Character.Powers.Plasma).VTCpwd,
                        [2] = "PlasmaPower4",
                        [3] = "Attack",
   			[4] = Vector3.new(game:GetService("Players").LocalPlayer:GetMouse().Hit.X, game:GetService("Players").LocalPlayer:GetMouse().Hit.Y, game:GetService("Players").LocalPlayer:GetMouse().Hit.Z),
                        [5] = game:GetService("Players").LocalPlayer:GetMouse().Hit,
                        [6] = _G.numcharg
                    }
                    game:GetService("Players").LocalPlayer.Character.Powers.Plasma.RemoteEvent:FireServer(unpack(args))
task.wait()
                    local args = {
                        [1] = getsenv(game:GetService("Players").LocalPlayer.Character.Powers.Plasma).VTCpwd,
                        [2] = "PlasmaPower4",
                        [3] = "Attack",
   			[4] = Vector3.new(game:GetService("Players").LocalPlayer:GetMouse().Hit.X, game:GetService("Players").LocalPlayer:GetMouse().Hit.Y, game:GetService("Players").LocalPlayer:GetMouse().Hit.Z),
                        [5] = game:GetService("Players").LocalPlayer:GetMouse().Hit,
                        [6] = _G.numcharg
                    }
                    game:GetService("Players").LocalPlayer.Character.Powers.Plasma.RemoteEvent:FireServer(unpack(args))
task.wait()
                    local args = {
                        [1] = getsenv(game:GetService("Players").LocalPlayer.Character.Powers.Plasma).VTCpwd,
                        [2] = "PlasmaPower4",
                        [3] = "Attack",
   			[4] = Vector3.new(game:GetService("Players").LocalPlayer:GetMouse().Hit.X, game:GetService("Players").LocalPlayer:GetMouse().Hit.Y, game:GetService("Players").LocalPlayer:GetMouse().Hit.Z),
                        [5] = game:GetService("Players").LocalPlayer:GetMouse().Hit,
                        [6] = _G.numcharg
                    }
                    game:GetService("Players").LocalPlayer.Character.Powers.Plasma.RemoteEvent:FireServer(unpack(args))
until _G.skilltype ~= "Plasma" or _G.skillnumz ~= "Power4" or _G.startspamskill == false
elseif _G.skilltype == "Venom" and _G.skillnumz == "Power1" and _G.startspamskill == true then
repeat task.wait(0.15)
local args = {
    [1] = getsenv(game:GetService("Players").LocalPlayer.Character.Powers.Venom).VTCiuew,
    [2] = "VenomPower1",
    [3] = "Start",
    [4] = Vector3.new(game:GetService("Players").LocalPlayer:GetMouse().Hit.X, game:GetService("Players").LocalPlayer:GetMouse().Hit.Y, game:GetService("Players").LocalPlayer:GetMouse().Hit.Z)
}

game:GetService("Players").LocalPlayer.Character.Powers.Venom.RemoteEvent:FireServer(unpack(args))
task.wait()
local args = {
    [1] = getsenv(game:GetService("Players").LocalPlayer.Character.Powers.Venom).VTCiuew,
    [2] = "VenomPower1",
    [3] = "Fire",
    [4] = Vector3.new(game:GetService("Players").LocalPlayer:GetMouse().Hit.X, game:GetService("Players").LocalPlayer:GetMouse().Hit.Y, game:GetService("Players").LocalPlayer:GetMouse().Hit.Z)
}

game:GetService("Players").LocalPlayer.Character.Powers.Venom.RemoteEvent:FireServer(unpack(args))
until _G.skilltype ~= "Venom" or _G.skillnumz ~= "Power1" or _G.startspamskill == false
local args = {
    [1] = getsenv(game:GetService("Players").LocalPlayer.Character.Powers.Venom).VTCiuew,
    [2] = "VenomPower1",
    [3] = "Stop"
}

game:GetService("Players").LocalPlayer.Character.Powers.Venom.RemoteEvent:FireServer(unpack(args))
elseif _G.skilltype == "Venom" and _G.skillnumz == "Power2" and _G.startspamskill == true then
repeat task.wait()
if game:GetService("Players").LocalPlayer.Character.UsingVenomBody.Value == false then
local args = {
    [1] = getsenv(game:GetService("Players").LocalPlayer.Character.Powers.Venom).VTCiuew,
    [2] = "VenomPower8"
}

game:GetService("Players").LocalPlayer.Character.Powers.Venom.RemoteEvent:FireServer(unpack(args))
end
task.wait(0.2)
until _G.skilltype ~= "Venom" or _G.skillnumz ~= "Power2" or _G.startspamskill == false
elseif _G.skilltype == "Venom" and _G.skillnumz == "Power3" and _G.startspamskill == true then
repeat task.wait(0.15)
local args = {
    [1] = getsenv(game:GetService("Players").LocalPlayer.Character.Powers.Venom).VTCiuew,
    [2] = "VenomPower9",
    [3] = "StartCharging",
    [4] = CFrame.new(Vector3.new(game:GetService("Players").LocalPlayer:GetMouse().Hit.X, game:GetService("Players").LocalPlayer:GetMouse().Hit.Y, game:GetService("Players").LocalPlayer:GetMouse().Hit.Z)),
    [5] = workspace:WaitForChild("IslandGrassy"):WaitForChild("Base"):WaitForChild("DirtGrass"):WaitForChild("Grass"):WaitForChild("Grass"),
    [6] = "Left"
}

game:GetService("Players").LocalPlayer.Character.Powers.Venom.RemoteEvent:FireServer(unpack(args))
task.wait()
local args = {
    [1] = getsenv(game:GetService("Players").LocalPlayer.Character.Powers.Venom).VTCiuew,
    [2] = "VenomPower9",
    [3] = "StopCharging",
    [4] = CFrame.new(Vector3.new(game:GetService("Players").LocalPlayer:GetMouse().Hit.X, game:GetService("Players").LocalPlayer:GetMouse().Hit.Y, game:GetService("Players").LocalPlayer:GetMouse().Hit.Z)),
    [5] = workspace:WaitForChild("IslandGrassy"):WaitForChild("Base"):WaitForChild("DirtGrass"):WaitForChild("Grass"):WaitForChild("Grass"),
    [6] = _G.numcharg,
    [7] = 500,
    [8] = 500
}

game:GetService("Players").LocalPlayer.Character.Powers.Venom.RemoteEvent:FireServer(unpack(args))
until _G.skilltype ~= "Venom" or _G.skillnumz ~= "Power3" or _G.startspamskill == false
elseif _G.skilltype == "Venom" and _G.skillnumz == "Power4" and _G.startspamskill == true then
repeat task.wait(0.15)
local args = {
    [1] = getsenv(game:GetService("Players").LocalPlayer.Character.Powers.Venom).VTCiuew,
    [2] = "VenomPower10",
    [3] = "StartCharging",
    [4] = CFrame.new(Vector3.new(game:GetService("Players").LocalPlayer:GetMouse().Hit.X, game:GetService("Players").LocalPlayer:GetMouse().Hit.Y, game:GetService("Players").LocalPlayer:GetMouse().Hit.Z)),
    [5] = workspace:WaitForChild("IslandGrassy"):WaitForChild("Base"):WaitForChild("DirtGrass"):WaitForChild("Grass"):WaitForChild("Grass"),
    [6] = "Left"
}

game:GetService("Players").LocalPlayer.Character.Powers.Venom.RemoteEvent:FireServer(unpack(args))
task.wait()
local args = {
    [1] = getsenv(game:GetService("Players").LocalPlayer.Character.Powers.Venom).VTCiuew,
    [2] = "VenomPower10",
    [3] = "StopCharging",
    [4] = CFrame.new(Vector3.new(game:GetService("Players").LocalPlayer:GetMouse().Hit.X, game:GetService("Players").LocalPlayer:GetMouse().Hit.Y, game:GetService("Players").LocalPlayer:GetMouse().Hit.Z)),
    [5] = workspace:WaitForChild("IslandGrassy"):WaitForChild("Base"):WaitForChild("DirtGrass"):WaitForChild("Grass"):WaitForChild("Grass"),
    [6] = _G.numcharg
}

game:GetService("Players").LocalPlayer.Character.Powers.Venom.RemoteEvent:FireServer(unpack(args))
until _G.skilltype ~= "Venom" or _G.skillnumz ~= "Power4" or _G.startspamskill == false
elseif _G.skilltype == "Venom" and _G.skillnumz == "Power6" and _G.startspamskill == true then
repeat task.wait()
if game:GetService("Players").LocalPlayer.Character.UsingVenomDemon.Value == false then
local args = {
    [1] = getsenv(game:GetService("Players").LocalPlayer.Character.Powers.Venom).VTCiuew,
    [2] = "VenomPower12"
}

game:GetService("Players").LocalPlayer.Character.Powers.Venom.RemoteEvent:FireServer(unpack(args))
end
task.wait(0.2)
until _G.skilltype ~= "Venom" or _G.skillnumz ~= "Power6" or _G.startspamskill == false
elseif _G.skilltype == "Candy" and _G.skillnumz == "Power1" and _G.startspamskill == true then
local args = {
    [1] = getsenv(game:GetService("Players").LocalPlayer.Character.Powers.Candy).VTCdhabvd,
    [2] = "CandyPower7",
    [3] = true
}

game:GetService("Players").LocalPlayer.Character.Powers.Candy.RemoteEvent:FireServer(unpack(args))
repeat task.wait(0.15)
local args = {
    [1] = getsenv(game:GetService("Players").LocalPlayer.Character.Powers.Candy).VTCdhabvd,
    [2] = "CandyAnim1"
}

game:GetService("Players").LocalPlayer.Character.Powers.Candy.RemoteEvent:FireServer(unpack(args))
task.wait()
until _G.skilltype ~= "Candy" or _G.skillnumz ~= "Power1" or _G.startspamskill == false
local args = {
    [1] = getsenv(game:GetService("Players").LocalPlayer.Character.Powers.Candy).VTCdhabvd,
    [2] = "CandyPower7",
    [3] = false
}

game:GetService("Players").LocalPlayer.Character.Powers.Candy.RemoteEvent:FireServer(unpack(args))
elseif _G.skilltype == "Candy" and _G.skillnumz == "Power2" and _G.startspamskill == true then
repeat task.wait()
if game:GetService("Players").LocalPlayer.Character.UsingCandyBody.Value == false then
local args = {
    [1] = getsenv(game:GetService("Players").LocalPlayer.Character.Powers.Candy).VTCdhabvd,
    [2] = "CandyPower8"
}

game:GetService("Players").LocalPlayer.Character.Powers.Candy.RemoteEvent:FireServer(unpack(args))
end
task.wait(0.2)
until _G.skilltype ~= "Candy" or _G.skillnumz ~= "Power2" or _G.startspamskill == false
elseif _G.skilltype == "Candy" and _G.skillnumz == "Power3" and _G.startspamskill == true then
task.wait()
game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CanCollide = false
game:GetService("Players").LocalPlayer.Character.Torso.CanCollide = false
game:GetService("Players").LocalPlayer.Character.Head.CanCollide = false
game:GetService("Players").LocalPlayer.Character["Right Arm"].CanCollide = false
game:GetService("Players").LocalPlayer.Character["Left Arm"].CanCollide = false
game:GetService("Players").LocalPlayer.Character["Right Leg"].CanCollide = false
game:GetService("Players").LocalPlayer.Character["Left Leg"].CanCollide = false
repeat task.wait(0.15)
local args = {
    [1] = getsenv(game:GetService("Players").LocalPlayer.Character.Powers.Candy).VTCdhabvd,
    [2] = "CandyPower9",
    [3] = "StartCharging",
    [4] = CFrame.new(Vector3.new(game:GetService("Players").LocalPlayer:GetMouse().Hit.X, game:GetService("Players").LocalPlayer:GetMouse().Hit.Y, game:GetService("Players").LocalPlayer:GetMouse().Hit.Z)),
    [5] = workspace:WaitForChild("IslandGrassy"):WaitForChild("Base"):WaitForChild("DirtGrass"):WaitForChild("Grass"):WaitForChild("Grass"),
    [7] = "Right"
}

game:GetService("Players").LocalPlayer.Character.Powers.Candy.RemoteEvent:FireServer(unpack(args))
task.wait()
local args = {
    [1] = getsenv(game:GetService("Players").LocalPlayer.Character.Powers.Candy).VTCdhabvd,
    [2] = "CandyPower9",
    [3] = "StopCharging",
    [4] = CFrame.new(Vector3.new(game:GetService("Players").LocalPlayer:GetMouse().Hit.X, game:GetService("Players").LocalPlayer:GetMouse().Hit.Y, game:GetService("Players").LocalPlayer:GetMouse().Hit.Z)),
    [5] = workspace:WaitForChild("IslandGrassy"):WaitForChild("Base"):WaitForChild("DirtGrass"):WaitForChild("Grass"):WaitForChild("Grass"),
    [6] = _G.numcharg
}

game:GetService("Players").LocalPlayer.Character.Powers.Candy.RemoteEvent:FireServer(unpack(args))
until _G.skilltype ~= "Candy" or _G.skillnumz ~= "Power3" or _G.startspamskill == false
task.wait()
game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CanCollide = true
game:GetService("Players").LocalPlayer.Character.Torso.CanCollide = true
game:GetService("Players").LocalPlayer.Character.Head.CanCollide = true
game:GetService("Players").LocalPlayer.Character["Right Arm"].CanCollide = true
game:GetService("Players").LocalPlayer.Character["Left Arm"].CanCollide = true
game:GetService("Players").LocalPlayer.Character["Right Leg"].CanCollide = true
game:GetService("Players").LocalPlayer.Character["Left Leg"].CanCollide = true
elseif _G.skilltype == "Candy" and _G.skillnumz == "Power4" and _G.startspamskill == true then
repeat task.wait()
 local args = {
    [1] = getsenv(game:GetService("Players").LocalPlayer.Character.Powers.Candy).VTCdhabvd,
    [2] = "CandyPower4",
    [3] = "Start"
}

game:GetService("Players").LocalPlayer.Character.Powers.Candy.RemoteEvent:FireServer(unpack(args))
task.wait(0.2)
until _G.skilltype ~= "Candy" or _G.skillnumz ~= "Power4" or _G.startspamskill == false
elseif _G.skilltype == "Candy" and _G.skillnumz == "Power5" and _G.startspamskill == true then
repeat task.wait(0.15)
local args = {
    [1] = getsenv(game:GetService("Players").LocalPlayer.Character.Powers.Candy).VTCdhabvd,
    [2] = "CandyPower5",
    [3] = "",
    [4] = CFrame.new(Vector3.new(game:GetService("Players").LocalPlayer:GetMouse().Hit.X, game:GetService("Players").LocalPlayer:GetMouse().Hit.Y, game:GetService("Players").LocalPlayer:GetMouse().Hit.Z)),
    [5] = workspace:WaitForChild("IslandGrassy"):WaitForChild("Base"):WaitForChild("DirtGrass"):WaitForChild("Grass"):WaitForChild("Grass")
}

game:GetService("Players").LocalPlayer.Character.Powers.Candy.RemoteEvent:FireServer(unpack(args))
task.wait(0.2)
until _G.skilltype ~= "Candy" or _G.skillnumz ~= "Power5" or _G.startspamskill == false
elseif _G.skilltype == "Candy" and _G.skillnumz == "Power6" and _G.startspamskill == true then
repeat task.wait()
local args = {
    [1] = getsenv(game:GetService("Players").LocalPlayer.Character.Powers.Candy).VTCdhabvd,
    [2] = "CandyPower6",
    [3] = "",
    [4] = CFrame.new(Vector3.new(game:GetService("Players").LocalPlayer:GetMouse().Hit.X, game:GetService("Players").LocalPlayer:GetMouse().Hit.Y, game:GetService("Players").LocalPlayer:GetMouse().Hit.Z)),
    [5] = game:GetService("Players").LocalPlayer:GetMouse().Target
}

game:GetService("Players").LocalPlayer.Character.Powers.Candy.RemoteEvent:FireServer(unpack(args))
task.wait()
until _G.skilltype ~= "Candy" or _G.skillnumz ~= "Power6" or _G.startspamskill == false
elseif _G.skilltype == "Hollow" and _G.skillnumz == "Power1" and _G.startspamskill == true then
repeat task.wait()
if game:GetService("Players").LocalPlayer.Character.Projecting.Value == false then
local args = {
    [1] = getsenv(game:GetService("Players").LocalPlayer.Character.Powers.Hollow).VTCrx,
    [2] = "HollowPower7"
}

game:GetService("Players").LocalPlayer.Character.Powers.Hollow.RemoteEvent:FireServer(unpack(args))
end
task.wait(0.2)
until _G.skilltype ~= "Hollow" or _G.skillnumz ~= "Power1" or _G.startspamskill == false
elseif _G.skilltype == "Hollow" and _G.skillnumz == "Power2" and _G.startspamskill == true then
repeat task.wait()
local args = {
    [1] = getsenv(game:GetService("Players").LocalPlayer.Character.Powers.Hollow).VTCrx,
    [2] = "HollowPower8"
}

game:GetService("Players").LocalPlayer.Character.Powers.Hollow.RemoteEvent:FireServer(unpack(args))
task.wait(0.2)
until _G.skilltype ~= "Hollow" or _G.skillnumz ~= "Power2" or _G.startspamskill == false
elseif _G.skilltype == "Hollow" and _G.skillnumz == "Power3" and _G.startspamskill == true then
repeat task.wait(0.15)
local args = {
    [1] = getsenv(game:GetService("Players").LocalPlayer.Character.Powers.Hollow).VTCrx,
    [2] = "HollowPower9",
    [3] = "CreateHollows"
}

game:GetService("Players").LocalPlayer.Character.Powers.Hollow.RemoteEvent:FireServer(unpack(args))
task.wait()
local args = {
    [1] = getsenv(game:GetService("Players").LocalPlayer.Character.Powers.Hollow).VTCrx,
    [2] = "HollowPower9",
    [3] = "SendHollows"
}

game:GetService("Players").LocalPlayer.Character.Powers.Hollow.RemoteEvent:FireServer(unpack(args))
until _G.skilltype ~= "Hollow" or _G.skillnumz ~= "Power3" or _G.startspamskill == false
elseif _G.skilltype == "Hollow" and _G.skillnumz == "Power5" and _G.startspamskill == true then
repeat task.wait(0.15)
local args = {
    [1] = getsenv(game:GetService("Players").LocalPlayer.Character.Powers.Hollow).VTCrx,
    [2] = "HollowPower11",
    [3] = "CreateHollows"
}

game:GetService("Players").LocalPlayer.Character.Powers.Hollow.RemoteEvent:FireServer(unpack(args))
task.wait()
local args = {
    [1] = getsenv(game:GetService("Players").LocalPlayer.Character.Powers.Hollow).VTCrx,
    [2] = "HollowPower11",
    [3] = "SendHollows"
}

game:GetService("Players").LocalPlayer.Character.Powers.Hollow.RemoteEvent:FireServer(unpack(args))
until _G.skilltype ~= "Hollow" or _G.skillnumz ~= "Power5" or _G.startspamskill == false
elseif _G.skilltype == "Hollow" and _G.skillnumz == "Power6" and _G.startspamskill == true then
repeat task.wait()
local args = {
    [1] = getsenv(game:GetService("Players").LocalPlayer.Character.Powers.Hollow).VTCrx,
    [2] = "HollowPower12"
}

game:GetService("Players").LocalPlayer.Character.Powers.Hollow.RemoteEvent:FireServer(unpack(args))
task.wait(0.2)
until _G.skilltype ~= "Hollow" or _G.skillnumz ~= "Power6" or _G.startspamskill == false
elseif _G.skilltype == "Chilly" and _G.skillnumz == "Power1" and _G.startspamskill == true then
local args = {
    [1] = getsenv(game:GetService("Players").LocalPlayer.Character.Powers.Chilly).VTCewddsfe,
    [2] = "ChillyPower7",
    [3] = true
}

game:GetService("Players").LocalPlayer.Character.Powers.Chilly.RemoteEvent:FireServer(unpack(args))
repeat task.wait(0.15)
local args = {
    [1] = getsenv(game:GetService("Players").LocalPlayer.Character.Powers.Chilly).VTCewddsfe,
    [2] = "ChillyAnim1"
}

game:GetService("Players").LocalPlayer.Character.Powers.Chilly.RemoteEvent:FireServer(unpack(args))
task.wait()
until _G.skilltype ~= "Chilly" or _G.skillnumz ~= "Power1" or _G.startspamskill == false
local args = {
    [1] = getsenv(game:GetService("Players").LocalPlayer.Character.Powers.Chilly).VTCewddsfe,
    [2] = "ChillyPower7",
    [3] = false
}

game:GetService("Players").LocalPlayer.Character.Powers.Chilly.RemoteEvent:FireServer(unpack(args))
elseif _G.skilltype == "Chilly" and _G.skillnumz == "Power2" and _G.startspamskill == true then
task.wait()
game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CanCollide = false
game:GetService("Players").LocalPlayer.Character.Torso.CanCollide = false
game:GetService("Players").LocalPlayer.Character.Head.CanCollide = false
game:GetService("Players").LocalPlayer.Character["Right Arm"].CanCollide = false
game:GetService("Players").LocalPlayer.Character["Left Arm"].CanCollide = false
game:GetService("Players").LocalPlayer.Character["Right Leg"].CanCollide = false
game:GetService("Players").LocalPlayer.Character["Left Leg"].CanCollide = false
repeat task.wait(0.15)
local args = {
    [1] = getsenv(game:GetService("Players").LocalPlayer.Character.Powers.Chilly).VTCewddsfe,
    [2] = "ChillyPower8",
    [3] = "StartCharging",
    [4] = CFrame.new(Vector3.new(game:GetService("Players").LocalPlayer:GetMouse().Hit.X, game:GetService("Players").LocalPlayer:GetMouse().Hit.Y, game:GetService("Players").LocalPlayer:GetMouse().Hit.Z)),
    [5] = workspace:WaitForChild("IslandGrassy"):WaitForChild("Base"):WaitForChild("DirtGrass"):WaitForChild("Grass"):WaitForChild("Grass"),
    [7] = "Right"
}

game:GetService("Players").LocalPlayer.Character.Powers.Chilly.RemoteEvent:FireServer(unpack(args))
task.wait()
local args = {
    [1] = getsenv(game:GetService("Players").LocalPlayer.Character.Powers.Chilly).VTCewddsfe,
    [2] = "ChillyPower8",
    [3] = "StopCharging",
    [4] = CFrame.new(Vector3.new(game:GetService("Players").LocalPlayer:GetMouse().Hit.X, game:GetService("Players").LocalPlayer:GetMouse().Hit.Y, game:GetService("Players").LocalPlayer:GetMouse().Hit.Z)),
    [5] = "Right",
    [6] = _G.numcharg
}

game:GetService("Players").LocalPlayer.Character.Powers.Chilly.RemoteEvent:FireServer(unpack(args))
until _G.skilltype ~= "Chilly" or _G.skillnumz ~= "Power2" or _G.startspamskill == false
task.wait()
game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CanCollide = true
game:GetService("Players").LocalPlayer.Character.Torso.CanCollide = true
game:GetService("Players").LocalPlayer.Character.Head.CanCollide = true
game:GetService("Players").LocalPlayer.Character["Right Arm"].CanCollide = true
game:GetService("Players").LocalPlayer.Character["Left Arm"].CanCollide = true
game:GetService("Players").LocalPlayer.Character["Right Leg"].CanCollide = true
game:GetService("Players").LocalPlayer.Character["Left Leg"].CanCollide = true
elseif _G.skilltype == "Chilly" and _G.skillnumz == "Power3" and _G.startspamskill == true then
repeat task.wait(0.15)
local args = {
    [1] = getsenv(game:GetService("Players").LocalPlayer.Character.Powers.Chilly).VTCewddsfe,
    [2] = "ChillyPower9",
    [3] = true,
    [4] = Vector3.new(game:GetService("Players").LocalPlayer:GetMouse().Hit.X, game:GetService("Players").LocalPlayer:GetMouse().Hit.Y, game:GetService("Players").LocalPlayer:GetMouse().Hit.Z),
    [5] = CFrame.new(Vector3.new(game:GetService("Players").LocalPlayer:GetMouse().Hit.X, game:GetService("Players").LocalPlayer:GetMouse().Hit.Y, game:GetService("Players").LocalPlayer:GetMouse().Hit.Z))
}

game:GetService("Players").LocalPlayer.Character.Powers.Chilly.RemoteEvent:FireServer(unpack(args))
task.wait()
until _G.skilltype ~= "Chilly" or _G.skillnumz ~= "Power3" or _G.startspamskill == false
elseif _G.skilltype == "Chilly" and _G.skillnumz == "Power5" and _G.startspamskill == true then
repeat task.wait(0.15)
local args = {
    [1] = getsenv(game:GetService("Players").LocalPlayer.Character.Powers.Chilly).VTCewddsfe,
    [2] = "ChillyPower5",
    [3] = "StartCharging",
    [4] = CFrame.new(Vector3.new(game:GetService("Players").LocalPlayer:GetMouse().Hit.X, game:GetService("Players").LocalPlayer:GetMouse().Hit.Y, game:GetService("Players").LocalPlayer:GetMouse().Hit.Z)),
    [5] = workspace:WaitForChild("IslandPirate"):WaitForChild("Base"):WaitForChild("Beach"),
    [7] = "Right"
}

game:GetService("Players").LocalPlayer.Character.Powers.Chilly.RemoteEvent:FireServer(unpack(args))
task.wait()
local args = {
    [1] = getsenv(game:GetService("Players").LocalPlayer.Character.Powers.Chilly).VTCewddsfe,
    [2] = "ChillyPower5",
    [3] = "StopCharging",
    [4] = CFrame.new(Vector3.new(game:GetService("Players").LocalPlayer:GetMouse().Hit.X, game:GetService("Players").LocalPlayer:GetMouse().Hit.Y, game:GetService("Players").LocalPlayer:GetMouse().Hit.Z)),
    [5] = workspace:WaitForChild("IslandPirate"):WaitForChild("Base"):WaitForChild("Beach"),
    [6] = _G.numcharg
}

game:GetService("Players").LocalPlayer.Character.Powers.Chilly.RemoteEvent:FireServer(unpack(args))
until _G.skilltype ~= "Chilly" or _G.skillnumz ~= "Power5" or _G.startspamskill == false

elseif _G.skilltype == "Light" and _G.skillnumz == "Power1" and _G.startspamskill == true then
local args = {
    [1] = getsenv(game:GetService("Players").LocalPlayer.Character.Powers.Light).VTCrv,
    [2] = "LightPower7",
    [3] = true
}

game:GetService("Players").LocalPlayer.Character.Powers.Light.RemoteEvent:FireServer(unpack(args))
repeat task.wait(0.15)
local args = {
    [1] = getsenv(game:GetService("Players").LocalPlayer.Character.Powers.Light).VTCrv,
    [2] = "LightAnim1"
}

game:GetService("Players").LocalPlayer.Character.Powers.Light.RemoteEvent:FireServer(unpack(args))
task.wait()
until _G.skilltype ~= "Light" or _G.skillnumz ~= "Power1" or _G.startspamskill == false
local args = {
    [1] = getsenv(game:GetService("Players").LocalPlayer.Character.Powers.Light).VTCrv,
    [2] = "LightPower7",
    [3] = false
}

game:GetService("Players").LocalPlayer.Character.Powers.Light.RemoteEvent:FireServer(unpack(args))
elseif _G.skilltype == "Light" and _G.skillnumz == "Power2" and _G.startspamskill == true then
repeat task.wait(0.15)
local args = {
    [1] = getsenv(game:GetService("Players").LocalPlayer.Character.Powers.Light).VTCrv,
    [2] = "LightPower2",
    [3] = "StartCharging",
    [4] = CFrame.new(0,0,0),
    [5] = workspace.IslandCaver.Stones.Stone,
    [9] = "Right"
}

game:GetService("Players").LocalPlayer.Character.Powers.Light.RemoteEvent:FireServer(unpack(args))
task.wait()
local args = {
    [1] = getsenv(game:GetService("Players").LocalPlayer.Character.Powers.Light).VTCrv,
    [2] = "LightPower2",
    [3] = "StopCharging",
    [4] = CFrame.new(Vector3.new(game:GetService("Players").LocalPlayer:GetMouse().Hit.X, game:GetService("Players").LocalPlayer:GetMouse().Hit.Y, game:GetService("Players").LocalPlayer:GetMouse().Hit.Z)),
    [5] = workspace.IslandCaver.Stones.Stone,
    [6] = _G.numcharg
}

game:GetService("Players").LocalPlayer.Character.Powers.Light.RemoteEvent:FireServer(unpack(args))
until _G.skilltype ~= "Light" or _G.skillnumz ~= "Power2" or _G.startspamskill == false
elseif _G.skilltype == "Light" and _G.skillnumz == "Power3" and _G.startspamskill == true then
repeat task.wait(0.15)
 local args = {
    [1] = getsenv(game:GetService("Players").LocalPlayer.Character.Powers.Light).VTCrv,
    [2] = "LightPower9",
    [3] = "StopCharging",
    [4] = Vector3.new(game:GetService("Players").LocalPlayer:GetMouse().Hit.X, game:GetService("Players").LocalPlayer:GetMouse().Hit.Y, game:GetService("Players").LocalPlayer:GetMouse().Hit.Z),
    [5] = game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame.Position,
    [6] = _G.numcharg
}

game:GetService("Players").LocalPlayer.Character.Powers.Light.RemoteEvent:FireServer(unpack(args))
task.wait()
until _G.skilltype ~= "Light" or _G.skillnumz ~= "Power3" or _G.startspamskill == false
elseif _G.skilltype == "Light" and _G.skillnumz == "Power5" and _G.startspamskill == true then
       local args = {
           [1] = getsenv(game:GetService("Players").LocalPlayer.Character.Powers.Light).VTCrv,
           [2] = "LightPower5",
           [3] = "Start"
       }
       
       game:GetService("Players").LocalPlayer.Character.Powers.Light.RemoteEvent:FireServer(unpack(args))
repeat task.wait(0.15)
       local args = {
           [1] = getsenv(game:GetService("Players").LocalPlayer.Character.Powers.Light).VTCrv,
           [2] = "LightPower5",
           [3] = "Fire",
           [4] = Vector3.new(game:GetService("Players").LocalPlayer:GetMouse().Hit.X, game:GetService("Players").LocalPlayer:GetMouse().Hit.Y, game:GetService("Players").LocalPlayer:GetMouse().Hit.Z)
       }
       
       game:GetService("Players").LocalPlayer.Character.Powers.Light.RemoteEvent:FireServer(unpack(args))
task.wait()
until _G.skilltype ~= "Light" or _G.skillnumz ~= "Power5" or _G.startspamskill == false
       local args = {
           [1] = getsenv(game:GetService("Players").LocalPlayer.Character.Powers.Light).VTCrv,
           [2] = "LightPower5",
           [3] = "End"
       }
       
       game:GetService("Players").LocalPlayer.Character.Powers.Light.RemoteEvent:FireServer(unpack(args))
       
       local args = {
           [1] = getsenv(game:GetService("Players").LocalPlayer.Character.Powers.Light).VTCrv,
           [2] = "LightPower5",
           [3] = "Stop"
       }
       
       game:GetService("Players").LocalPlayer.Character.Powers.Light.RemoteEvent:FireServer(unpack(args))
end
until _G.startspamskill == false
end)
end
end)


else
_G.startspamskill = false
end
end)

SaveManager:SetLibrary(Fluent)
InterfaceManager:SetLibrary(Fluent)
SaveManager:IgnoreThemeSettings()
SaveManager:SetIgnoreIndexes({})
InterfaceManager:SetFolder("FluentScriptHub")
SaveManager:SetFolder("FluentScriptHub/specific-game")

InterfaceManager:BuildInterfaceSection(Tabs.Settings)
SaveManager:BuildConfigSection(Tabs.Settings)

Tabs.Info:AddSection(" ")
Tabs.Farm:AddSection(" ")
Tabs.Fruit:AddSection(" ")
Tabs.Robbing:AddSection(" ")
Tabs.Player:AddSection(" ")
Tabs.Teleport:AddSection(" ")
Tabs.Main:AddSection(" ")
Tabs.Haki:AddSection(" ")
Tabs.Weapon:AddSection(" ")
Tabs.Affinity:AddSection(" ")
Tabs.Expertise:AddSection(" ")
Tabs.PVP:AddSection(" ")
Tabs.Skill:AddSection(" ")
Tabs.Mobs:AddSection(" ")
Tabs.Boss:AddSection(" ")
Tabs.Gems:AddSection(" ")
Tabs.Automatic:AddSection(" ")
Tabs.Misc:AddSection(" ")
Tabs.Shop:AddSection(" ")
Tabs.Server:AddSection(" ")
Tabs.Webhook:AddSection(" ")
Tabs.Settings:AddSection(" ")

Window:SelectTab(1)

game:GetService("Players").LocalPlayer.PlayerGui.Announcement.Frame.Visible = false
Fluent:Notify({
    Title = "Saluna With Love ♥",
    Content = "Have a nice day! \nUI Toggle for PC (F2)",
    Duration = 120
})

BBB = Instance.new("ScreenGui")
BBB.Name = "BBB"
BBB.Parent = game.CoreGui

hideUI = Instance.new("ImageButton")
hideUI.Name = "hideUI"
hideUI.Parent = BBB
hideUI.BackgroundColor3 = Color3.fromRGB(0, 255, 127)
hideUI.BackgroundTransparency = 1
hideUI.ClipsDescendants = true
hideUI.AnchorPoint = Vector2.new(0.5, 0.5)
hideUI.Position = UDim2.new(0.07, 0, 0.155, 0)
hideUI.Size = UDim2.new(0, 60, 0, 60)
hideUI.Image = "http://www.roblox.com/asset/?id=16039945586"
hideUI.MouseButton1Up:Connect(function()
game.TweenService:Create(hideUI, TweenInfo.new(0.05, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {
 Size = UDim2.new(0, 50, 0, 50)
	}):Play()
task.wait(0.05)
game.TweenService:Create(hideUI, TweenInfo.new(0.05, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {
 Size = UDim2.new(0, 60, 0, 60)
	}):Play()
game:GetService("VirtualInputManager"):SendKeyEvent(true,"F2",false,game)
task.wait()
game:GetService("VirtualInputManager"):SendKeyEvent(false,"F2",false,game)
end)

hideUICorner = Instance.new("UICorner")
hideUICorner.Parent = hideUI
hideUICorner.CornerRadius = UDim.new(1,0)

 UIS = game:GetService('UserInputService')
 frame = hideUI
 dragToggle = nil
 dragSpeed = 0.05
 dragStart = nil
 startPos = nil

 function updateInput(input)
  delta = input.Position - dragStart
  position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X,
  startPos.Y.Scale, startPos.Y.Offset + delta.Y)
 game:GetService('TweenService'):Create(frame, TweenInfo.new(dragSpeed), {Position = position}):Play()
end

frame.InputBegan:Connect(function(input)
 if (input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch) then 
  dragToggle = true
  dragStart = input.Position
  startPos = frame.Position
  input.Changed:Connect(function()
   if input.UserInputState == Enum.UserInputState.End then
    dragToggle = false
   end
  end)
 end
end)

UIS.InputChanged:Connect(function(input)
 if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
  if dragToggle then
   updateInput(input)
  end
 end
end)

repeat task.wait() until game.CoreGui:FindFirstChild("BBB")

task.spawn(function()
while task.wait(0.3) do
pcall(function()
if _G.startrop or _G.startropaura then
repeat task.wait(0.1)
if _G.robmethod == "Quake" and _G.cuopfruittarget ~= "" and _G.cuopfruittarget ~= nil then
pcall(function()
repeat
game:GetService("Players").LocalPlayer.Character.Powers.Quake.RemoteEvent:FireServer(getsenv(game:GetService("Players").LocalPlayer.Character.Powers.Quake).VTCebvc,"QuakePower4", "StopCharging",workspace.IslandCaver.Stones.Stone,game:GetService("Players"):FindFirstChild(_G.cuopfruittarget).Character.HumanoidRootPart.CFrame,100,Vector3.new(-290.4129333496094, 266.8401794433594, -103.8988037109375))
task.wait(0.06)
until game:GetService("Players"):FindFirstChild(_G.cuopfruittarget).Character.Humanoid.Health == 0 or not game:GetService("Players"):FindFirstChild(_G.cuopfruittarget)
task.wait()
_G.cuopfruittarget = ""
end)
end
until not _G.startrop and not _G.startropaura
end
end)
end
end)

task.spawn(function()
while task.wait(0.3) do
pcall(function()
if _G.startrop or _G.startropaura then
repeat task.wait(0.1)
if _G.robmethod == "Magma" and _G.cuopfruittarget ~= "" and _G.cuopfruittarget ~= nil then
pcall(function()
local args = {
    [1] = getsenv(game:GetService("Players").LocalPlayer.Character.Powers.Magma).VTCmel,
    [2] = "MagmaPower1",
    [3] = "StartCharging",
    [4] = CFrame.new(-123.28974914550781, 213, -871.10595703125, 0.9992225766181946, -0.009072019718587399, 0.038368139415979385, -0, 0.9731666445732117, 0.23010201752185822, -0.03942607715725899, -0.22992312908172607, 0.9724099040031433),
    [5] = workspace:WaitForChild("IslandTown"):WaitForChild("Beach"):WaitForChild("Beach"),
    [7] = "Right"
}

game:GetService("Players").LocalPlayer.Character.Powers.Magma.RemoteEvent:FireServer(unpack(args))
repeat task.wait(0.15)
local args = {
    [1] = getsenv(game:GetService("Players").LocalPlayer.Character.Powers.Magma).VTCmel,
    [2] = "MagmaPower1",
    [3] = "StopCharging",
    [4] = game:GetService("Players"):FindFirstChild(_G.cuopfruittarget).Character.HumanoidRootPart.CFrame,
    [5] = workspace:WaitForChild("IslandTown"):WaitForChild("Beach"):WaitForChild("Beach"),
    [6] = 100
}

game:GetService("Players").LocalPlayer.Character.Powers.Magma.RemoteEvent:FireServer(unpack(args))
task.wait()
until game:GetService("Players"):FindFirstChild(_G.cuopfruittarget).Character.Humanoid.Health == 0 or not game:GetService("Players"):FindFirstChild(_G.cuopfruittarget)
task.wait()
_G.cuopfruittarget = ""
end)
end
until not _G.startrop and not _G.startropaura
end
end)
end
end)

task.spawn(function()
while task.wait(0.3) do
pcall(function()
if _G.robmethod == "Magma" and _G.cuopfruittarget ~= "" and _G.cuopfruittarget ~= nil then
repeat task.wait(0.1)
for i, v in pairs(game:GetService("Workspace")[tostring(usingname)]:WaitForChild("Powers"):FindFirstChild("Magma"):FindFirstChild("Shots"):GetChildren()) do
if v.Name == "MagmaBall" then
v.CFrame = game:GetService("Players"):FindFirstChild(_G.cuopfruittarget).Character.HumanoidRootPart.CFrame
end
end
until  game:GetService("Players"):FindFirstChild(_G.cuopfruittarget).Character.Humanoid.Health == 0 or not game:GetService("Players"):FindFirstChild(_G.cuopfruittarget)
end
end)
end
end)

task.spawn(function() -- autofarm destroy seat
while task.wait(0.3) do
pcall(function()
if _G.startrop  or _G.startropaura then
if (_G.robmethod == "Magma" or _G.robmethod == "Flare") and _G.cuopfruittarget ~= "" and _G.cuopfruittarget ~= nil then
for i,v in pairs(game:GetService("Workspace"):GetDescendants()) do task.wait()
pcall(function()
if v.Name == "Seat" then
v:Destroy()
end
end)
end
task.wait(0.5)
end
end
end)
end
end)

task.spawn(function()
while task.wait(0.3) do
pcall(function()
if _G.startrop or _G.startropaura then
repeat task.wait(0.1)
if _G.robmethod == "Flare" and _G.cuopfruittarget ~= "" and _G.cuopfruittarget ~= nil then
pcall(function()
local args = {
    [1] = getsenv(game:GetService("Players").LocalPlayer.Character.Powers.Flare).VTCmgwcm,
    [2] = "FlarePower2",
    [3] = "StartCharging",
    [4] = CFrame.new(-143.0747833251953, 218, -994.1463012695312, 0.9986038208007812, -0.013327144086360931, 0.051116567105054855, 9.313225746154785e-10, 0.9676525592803955, 0.2522869408130646, -0.05282533913850784, -0.2519347071647644, 0.966301441192627),
    [5] = workspace:WaitForChild("IslandTown"):WaitForChild("GrassUplift"):WaitForChild("Union"),
    [7] = "Left"
}

game:GetService("Players").LocalPlayer.Character.Powers.Flare.RemoteEvent:FireServer(unpack(args))
repeat task.wait(0.15)
local args = {
    [1] = getsenv(game:GetService("Players").LocalPlayer.Character.Powers.Flare).VTCmgwcm,
    [2] = "FlarePower2",
    [3] = "StopCharging",
    [4] = game:GetService("Players"):FindFirstChild(_G.cuopfruittarget).Character.HumanoidRootPart.CFrame,
    [5] = workspace:WaitForChild("IslandTown"):WaitForChild("GrassUplift"):WaitForChild("Union"),
    [6] = 100
}

game:GetService("Players").LocalPlayer.Character.Powers.Flare.RemoteEvent:FireServer(unpack(args))
task.wait()
until game:GetService("Players"):FindFirstChild(_G.cuopfruittarget).Character.Humanoid.Health == 0 or not game:GetService("Players"):FindFirstChild(_G.cuopfruittarget)
task.wait()
_G.cuopfruittarget = ""
end)
end
until not _G.startrop and not _G.startropaura
end
end)
end
end)

task.spawn(function()
while task.wait(0.3) do
pcall(function()
if _G.startrop or _G.startropaura then
repeat task.wait(0.1)
if _G.robmethod == "Flare" and _G.cuopfruittarget ~= "" and _G.cuopfruittarget ~= nil then
pcall(function()
repeat task.wait()
game:GetService("Players"):FindFirstChild(_G.cuopfruittarget).Character.HumanoidRootPart.CFrame = game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame * CFrame.new(0,0,-10)
if game:GetService("Players"):FindFirstChild(_G.cuopfruittarget).Character.HumanoidRootPart.Anchored == false then
game:GetService("Players"):FindFirstChild(_G.cuopfruittarget).Character.HumanoidRootPart.Anchored = true
end
until game:GetService("Players"):FindFirstChild(_G.cuopfruittarget).Character.Humanoid.Health == 0 or not game:GetService("Players"):FindFirstChild(_G.cuopfruittarget)
task.wait()
_G.cuopfruittarget = ""
end)
end
until not _G.startrop and not _G.startropaura
end
end)
end
end)

task.spawn(function() -- autofarm destroy seat
while task.wait(0.3) do
pcall(function()
if _G.autocannonplrbring == true or _G.BringPlayer == true or _G.BringAllPlayer == true then
repeat task.wait(0.5)
for i,v in pairs(game:GetService("Workspace"):GetDescendants()) do task.wait()
if v.Name == "Seat" then
v:Destroy()
end
end
until not _G.autocannonplrbring and not _G.BringPlayer and not _G.BringAllPlayer
end
end)
end
end)

task.spawn(function()
while task.wait(0.3) do
repeat task.wait(0.1) 
until (_G.fastcannon == false and _G.autocannonslow == true) or
(_G.autocannonplrbring == true and _G.fastcannon == false) or
(_G.automobtpcn == true and _G.fastcannon == false) or
(_G.autocannonfling == true and _G.fastcannon == false)
pcall(function()
repeat task.wait(0.1)
for _, cannonz in pairs(Rarefruit) do
if game:GetService("Workspace")[usingname].HumanoidRootPart.Position.Y < 211000 and not game:GetService("Players").LocalPlayer.Character:FindFirstChild(cannonz) then
game:GetService("Players").LocalPlayer.Backpack:FindFirstChild("Cannon Ball").Parent = game:GetService("Players").LocalPlayer.Character
end
end
until (_G.fastcannon == true) or (not _G.autocannonslow and not _G.autocannonplrbring and not _G.automobtpcn and not _G.autocannonfling)
      end)
   end
end)

task.spawn(function()
    while task.wait(0.3) do
        pcall(function()
            if _G.autocannonslow or _G.autocannonplrbring or _G.automobtpcn or _G.autocannonfling then
repeat task.wait(0.1)
                local args = {
                    [1] = CFrame.new(Vector3.new(game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame))
                }
                game:GetService("Players").LocalPlayer.Character:FindFirstChild("Cannon Ball").RemoteEvent:FireServer(unpack(args))
                task.wait()
                local args = {
                    [1] = CFrame.new(Vector3.new(game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame))
                }
                game:GetService("Players").LocalPlayer.Character:FindFirstChild("Cannon Ball").RemoteEvent:FireServer(unpack(args))

until not _G.autocannonslow and not _G.autocannonplrbring and not _G.automobtpcn and not _G.autocannonfling
            end
        end)
    end
end)

task.spawn(function()
    while task.wait(0.3) do
        pcall(function()
            if _G.autocannonslow or _G.autocannonplrbring then
repeat task.wait(4)
for i,c in pairs(workspace.ResourceHolder["Resources_"..usingid]:GetDescendants()) do
if c.Name == "CannonBall" then
c:Destroy()
end
end
until not _G.autocannonslow and not _G.autocannonplrbring
            end
        end)
    end
end)

task.spawn(function()
    while task.wait(0.3) do
        pcall(function()
            if _G.automobtpcn or _G.autocannonfling then
repeat task.wait(10)
for i,c in pairs(workspace.ResourceHolder["Resources_"..usingid]:GetDescendants()) do
if c.Name == "CannonBall" then
c:Destroy()
end
end
until not _G.autocannonslow and not _G.autocannonplrbring
            end
        end)
    end
end)

task.spawn(function() -- autofarm velocity
    while task.wait(0.3) do
        pcall(function()
            if _G.farmfruit or _G.wqesorry or getgenv().vtt or getgenv().farmslowstats or getgenv().farmstats or getgenv().bgtyhn or getgenv().fishing or getgenv().tret then
                if not game:GetService("Players").LocalPlayer.Character.HumanoidRootPart:FindFirstChild("BodyClip") then
                    local Noclip = Instance.new("BodyVelocity")
                    Noclip.Name = "BodyClip"
                    Noclip.Parent = game:GetService("Players").LocalPlayer.Character.HumanoidRootPart
                    Noclip.MaxForce = Vector3.new(100000,100000,100000)
                    Noclip.Velocity = Vector3.new(0,0,0)
                end
                game:GetService("Players").LocalPlayer.Character.Humanoid.JumpPower = 0
            elseif _G.farmfruit == false and _G.wqesorry == false and getgenv().vtt == false and getgenv().farmslowstats == false and getgenv().farmstats == false and getgenv().bgtyhn == false and getgenv().fishing == false and getgenv().tret == false then
                game:GetService("Players").LocalPlayer.Character.HumanoidRootPart:FindFirstChild("BodyClip"):Destroy()
                task.wait(1)
                game:GetService("Players").LocalPlayer.Character.Humanoid.JumpPower = 50
            end
        end)
    end
end)

task.spawn(function()
    while task.wait(0.3) do
        pcall(function()
            if _G.autocannonslow or _G.autocannonplrbring then
                repeat task.wait(0.1)
                    for i, v in pairs(game:GetService("Workspace").ResourceHolder["Resources_" .. usingid]:GetChildren()) do
                        if v.Name == "CannonBall" then
                            v.CFrame = CFrame.new(100, 3000, 800)
                            v.CanCollide = false
                        end
                    end
                until _G.autocannonplrbring == false and _G.autocannonslow == false or game:GetService("Players").LocalPlayer.Character.Humanoid.Health == 0
            end
        end)
    end
end)

task.spawn(function() -- autofarm cannon
    while task.wait(0.3) do
        pcall(function()
            if _G.autocannonslow or _G.automobtpcn then
repeat task.wait(0.1)
pcall(function()
for i, v in pairs(game:GetService("Workspace").WorldEvent.Halloween.Pumpkin:GetDescendants()) do
if v.Name == "ClickDetector" then task.wait(0.1)
fireclickdetector(v)
end
end
task.wait(0.1)
fireclickdetector(workspace.Island11.CentralBuilding.Doors.Button.Button.ClickDetector)
task.wait(2)
end)
until not _G.autocannonslow and not _G.automobtpcn
end
end)
end
end)

task.spawn(function()
while task.wait(0.3) do
pcall(function()
if getgenv().chawq then
if game:GetService("Players").LocalPlayer.Character:FindFirstChild("Compass") then
getgenv().tpchaiq = false
if game:GetService("Players").LocalPlayer.Character:FindFirstChild("Compass") and game:GetService("Players").LocalPlayer.Character.Humanoid.Sit == true then
game:GetService("Players").LocalPlayer.Character.Humanoid.Sit = false
end
elseif not game:GetService("Players").LocalPlayer.Character:FindFirstChild("Compass") then
getgenv().tpchaiq = true
end
else
getgenv().tpchaiq = false
end
end)
end
end)

task.spawn(function()
while task.wait(0.3) do
pcall(function()
if getgenv().tpchaiq and game:GetService("Players").LocalPlayer.Character.Humanoid.Sit == false then
game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame = game:GetService("Workspace").Island8.Table.Chair.condimemay.CFrame * CFrame.new(0,-1,0)
end
end)
end
end)



task.spawn(function()
while task.wait(0.3) do
if getgenv().vtt then
repeat task.wait(0.1)
pcall(function()
if not game:GetService("Players").LocalPlayer.Character:FindFirstChild("Compass") then
getgenv().tprandom = true
else
getgenv().tprandom = false
end
end)
until not getgenv().vtt
else
getgenv().tprandom = false
end
end
end)

task.spawn(function()
while task.wait(0.3) do
if getgenv().tprandom then
pcall(function()
repeat task.wait()
game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame = game:GetService("Workspace")["SafeZoneOuterSpacePart"].CFrame * CFrame.new(0, 5, 0)
until not getgenv().tprandom
end)
end
end
end)

task.spawn(function()
while task.wait(0.3) do
if getgenv().banana then
repeat task.wait(0.1)
pcall(function()
if not game:GetService("Players").LocalPlayer.Character:FindFirstChild("Compass") then
getgenv().bgtyhn = true
else
getgenv().bgtyhn = false
end
end)
until not getgenv().banana
else
getgenv().bgtyhn = false
end
end
end)


task.spawn(function()
while task.wait(0.3) do
if getgenv().bgtyhn then
repeat task.wait()
pcall(function()
repeat task.wait()
if not game:GetService("Players").LocalPlayer.Character:FindFirstChild("Compass") or not game:GetService("Players").LocalPlayer.Backpack:FindFirstChild("Compass") then
game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new((math.random(-50000, 50000)), 10000, (math.random(-50000, 50000)))
end
until not getgenv().bgtyhn
end)
until not getgenv().bgtyhn
end
end
end)

task.spawn(function()
while task.wait(1) do
if getgenv().farmstats or getgenv().farmslowstats then
pcall(function()
if game:GetService("Players")[""..tostring(game:GetService("Players").LocalPlayer)].PlayerGui.Challenges.Frame.Frame.ChallengesFrame.ScrollingFrame["Challenge_13"].Claim.AutoButtonColor == true then
workspace.UserData["User_"..tostring(usingid)].ChallengesRemote:FireServer("Claim","Challenge13")
elseif game:GetService("Players")[""..tostring(game:GetService("Players").LocalPlayer)].PlayerGui.Challenges.Frame.Frame.ChallengesFrame.ScrollingFrame["Challenge_14"].Claim.AutoButtonColor == true then
workspace.UserData["User_"..tostring(usingid)].ChallengesRemote:FireServer("Claim","Challenge14")
end
end)
end
end
end)


task.spawn(function()
while task.wait(2) do
if _G.quayfirstdf then
pcall(function()
if _G.defswordsnip == true then
local args = {
    [1] = "DFT1",
    [2] = _G.keepdef,
    [3] = _G.keepmelee,
    [4] = _G.keepsnip,
    [5] = _G.keepsword,
    [6] = _G.budget
}

workspace:WaitForChild("Merchants"):WaitForChild("AffinityMerchant"):WaitForChild("Clickable"):WaitForChild("Retum"):FireServer(unpack(args))

elseif _G.allspin == true then
local args = {
    [1] = "DFT1",
    [2] = _G.keepdef,
    [3] = _G.keepmelee,
    [4] = _G.keepsnip,
    [5] = _G.keepsword,
    [6] = _G.budget
}

workspace:WaitForChild("Merchants"):WaitForChild("AffinityMerchant"):WaitForChild("Clickable"):WaitForChild("Retum"):FireServer(unpack(args))

elseif _G.meleesnipswordspin == true then
local args = {
    [1] = "DFT1",
    [2] = _G.keepdef,
    [3] = _G.keepmelee,
    [4] = _G.keepsnip,
    [5] = _G.keepsword,
    [6] = _G.budget
}

workspace:WaitForChild("Merchants"):WaitForChild("AffinityMerchant"):WaitForChild("Clickable"):WaitForChild("Retum"):FireServer(unpack(args))
elseif _G.defmeleeswordspin == true then
local args = {
    [1] = "DFT1",
    [2] = _G.keepdef,
    [3] = _G.keepmelee,
    [4] = _G.keepsnip,
    [5] = _G.keepsword,
    [6] = _G.budget
}

workspace:WaitForChild("Merchants"):WaitForChild("AffinityMerchant"):WaitForChild("Clickable"):WaitForChild("Retum"):FireServer(unpack(args))

elseif _G.defmeleesnipspin == true then
local args = {
    [1] = "DFT1",
    [2] = _G.keepdef,
    [3] = _G.keepmelee,
    [4] = _G.keepsnip,
    [5] = _G.keepsword,
    [6] = _G.budget
}

workspace:WaitForChild("Merchants"):WaitForChild("AffinityMerchant"):WaitForChild("Clickable"):WaitForChild("Retum"):FireServer(unpack(args))

elseif _G.swordsnipspin == true then
local args = {
    [1] = "DFT1",
    [2] = _G.keepdef,
    [3] = _G.keepmelee,
    [4] = _G.keepsnip,
    [5] = _G.keepsword,
    [6] = _G.budget
}

workspace:WaitForChild("Merchants"):WaitForChild("AffinityMerchant"):WaitForChild("Clickable"):WaitForChild("Retum"):FireServer(unpack(args))
elseif _G.meleeswordspin == true then
local args = {
    [1] = "DFT1",
    [2] = _G.keepdef,
    [3] = _G.keepmelee,
    [4] = _G.keepsnip,
    [5] = _G.keepsword,
    [6] = _G.budget
}

workspace:WaitForChild("Merchants"):WaitForChild("AffinityMerchant"):WaitForChild("Clickable"):WaitForChild("Retum"):FireServer(unpack(args))
elseif _G.meleesnipspin == true then
local args = {
    [1] = "DFT1",
    [2] = _G.keepdef,
    [3] = _G.keepmelee,
    [4] = _G.keepsnip,
    [5] = _G.keepsword,
    [6] = _G.budget
}

workspace:WaitForChild("Merchants"):WaitForChild("AffinityMerchant"):WaitForChild("Clickable"):WaitForChild("Retum"):FireServer(unpack(args))
elseif _G.defswordspin == true then
local args = {
    [1] = "DFT1",
    [2] = _G.keepdef,
    [3] = _G.keepmelee,
    [4] = _G.keepsnip,
    [5] = _G.keepsword,
    [6] = _G.budget
}

workspace:WaitForChild("Merchants"):WaitForChild("AffinityMerchant"):WaitForChild("Clickable"):WaitForChild("Retum"):FireServer(unpack(args))
elseif _G.defsnipspin == true then
local args = {
    [1] = "DFT1",
    [2] = _G.keepdef,
    [3] = _G.keepmelee,
    [4] = _G.keepsnip,
    [5] = _G.keepsword,
    [6] = _G.budget
}

workspace:WaitForChild("Merchants"):WaitForChild("AffinityMerchant"):WaitForChild("Clickable"):WaitForChild("Retum"):FireServer(unpack(args))
elseif _G.defmeleespin == true then
local args = {
    [1] = "DFT1",
    [2] = _G.keepdef,
    [3] = _G.keepmelee,
    [4] = _G.keepsnip,
    [5] = _G.keepsword,
    [6] = _G.budget
}

workspace:WaitForChild("Merchants"):WaitForChild("AffinityMerchant"):WaitForChild("Clickable"):WaitForChild("Retum"):FireServer(unpack(args))
elseif _G.swordspin == true then
local args = {
    [1] = "DFT1",
    [2] = _G.keepdef,
    [3] = _G.keepmelee,
    [4] = _G.keepsnip,
    [5] = _G.keepsword,
    [6] = _G.budget
}

workspace:WaitForChild("Merchants"):WaitForChild("AffinityMerchant"):WaitForChild("Clickable"):WaitForChild("Retum"):FireServer(unpack(args))
elseif _G.sniperspin == true then
local args = {
    [1] = "DFT1",
    [2] = _G.keepdef,
    [3] = _G.keepmelee,
    [4] = _G.keepsnip,
    [5] = _G.keepsword,
    [6] = _G.budget
}

workspace:WaitForChild("Merchants"):WaitForChild("AffinityMerchant"):WaitForChild("Clickable"):WaitForChild("Retum"):FireServer(unpack(args))
elseif _G.meleespin == true then
local args = {
    [1] = "DFT1",
    [2] = _G.keepdef,
    [3] = _G.keepmelee,
    [4] = _G.keepsnip,
    [5] = _G.keepsword,
    [6] = _G.budget
}

workspace:WaitForChild("Merchants"):WaitForChild("AffinityMerchant"):WaitForChild("Clickable"):WaitForChild("Retum"):FireServer(unpack(args))
elseif _G.defspin == true then
local args = {
    [1] = "DFT1",
    [2] = _G.keepdef,
    [3] = _G.keepmelee,
    [4] = _G.keepsnip,
    [5] = _G.keepsword,
    [6] = _G.budget
}

workspace:WaitForChild("Merchants"):WaitForChild("AffinityMerchant"):WaitForChild("Clickable"):WaitForChild("Retum"):FireServer(unpack(args))
end
task.wait(11)
end)
end
end
end)

task.spawn(function()
while task.wait(2) do
if _G.quayfirstdf2 then
pcall(function()
if _G.defswordsnip2 == true then
local args = {
    [1] = "DFT2",
    [2] = _G.keepdef2,
    [3] = _G.keepmelee2,
    [4] = _G.keepsnip2,
    [5] = _G.keepsword2,
    [6] = _G.budget2
}

workspace:WaitForChild("Merchants"):WaitForChild("AffinityMerchant"):WaitForChild("Clickable"):WaitForChild("Retum"):FireServer(unpack(args))

elseif _G.allspin2 == true then
local args = {
    [1] = "DFT2",
    [2] = _G.keepdef2,
    [3] = _G.keepmelee2,
    [4] = _G.keepsnip2,
    [5] = _G.keepsword2,
    [6] = _G.budget2
}

workspace:WaitForChild("Merchants"):WaitForChild("AffinityMerchant"):WaitForChild("Clickable"):WaitForChild("Retum"):FireServer(unpack(args))

elseif _G.meleesnipswordspin2 == true then
local args = {
    [1] = "DFT2",
    [2] = _G.keepdef2,
    [3] = _G.keepmelee2,
    [4] = _G.keepsnip2,
    [5] = _G.keepsword2,
    [6] = _G.budget2
}

workspace:WaitForChild("Merchants"):WaitForChild("AffinityMerchant"):WaitForChild("Clickable"):WaitForChild("Retum"):FireServer(unpack(args))
elseif _G.defmeleeswordspin2 == true then
local args = {
    [1] = "DFT2",
    [2] = _G.keepdef2,
    [3] = _G.keepmelee2,
    [4] = _G.keepsnip2,
    [5] = _G.keepsword2,
    [6] = _G.budget2
}

workspace:WaitForChild("Merchants"):WaitForChild("AffinityMerchant"):WaitForChild("Clickable"):WaitForChild("Retum"):FireServer(unpack(args))

elseif _G.defmeleesnipspin2 == true then
local args = {
    [1] = "DFT2",
    [2] = _G.keepdef2,
    [3] = _G.keepmelee2,
    [4] = _G.keepsnip2,
    [5] = _G.keepsword2,
    [6] = _G.budget2
}

workspace:WaitForChild("Merchants"):WaitForChild("AffinityMerchant"):WaitForChild("Clickable"):WaitForChild("Retum"):FireServer(unpack(args))

elseif _G.swordsnipspin2 == true then
local args = {
    [1] = "DFT2",
    [2] = _G.keepdef2,
    [3] = _G.keepmelee2,
    [4] = _G.keepsnip2,
    [5] = _G.keepsword2,
    [6] = _G.budget2
}

workspace:WaitForChild("Merchants"):WaitForChild("AffinityMerchant"):WaitForChild("Clickable"):WaitForChild("Retum"):FireServer(unpack(args))
elseif _G.meleeswordspin2 == true then
local args = {
    [1] = "DFT2",
    [2] = _G.keepdef2,
    [3] = _G.keepmelee2,
    [4] = _G.keepsnip2,
    [5] = _G.keepsword2,
    [6] = _G.budget2
}

workspace:WaitForChild("Merchants"):WaitForChild("AffinityMerchant"):WaitForChild("Clickable"):WaitForChild("Retum"):FireServer(unpack(args))
elseif _G.meleesnipspin2 == true then
local args = {
    [1] = "DFT2",
    [2] = _G.keepdef2,
    [3] = _G.keepmelee2,
    [4] = _G.keepsnip2,
    [5] = _G.keepsword2,
    [6] = _G.budget2
}

workspace:WaitForChild("Merchants"):WaitForChild("AffinityMerchant"):WaitForChild("Clickable"):WaitForChild("Retum"):FireServer(unpack(args))
elseif _G.defswordspin2 == true then
local args = {
    [1] = "DFT2",
    [2] = _G.keepdef2,
    [3] = _G.keepmelee2,
    [4] = _G.keepsnip2,
    [5] = _G.keepsword2,
    [6] = _G.budget2
}

workspace:WaitForChild("Merchants"):WaitForChild("AffinityMerchant"):WaitForChild("Clickable"):WaitForChild("Retum"):FireServer(unpack(args))
elseif _G.defsnipspin2 == true then
local args = {
    [1] = "DFT2",
    [2] = _G.keepdef2,
    [3] = _G.keepmelee2,
    [4] = _G.keepsnip2,
    [5] = _G.keepsword2,
    [6] = _G.budget2
}

workspace:WaitForChild("Merchants"):WaitForChild("AffinityMerchant"):WaitForChild("Clickable"):WaitForChild("Retum"):FireServer(unpack(args))
elseif _G.defmeleespin2 == true then
local args = {
    [1] = "DFT2",
    [2] = _G.keepdef2,
    [3] = _G.keepmelee2,
    [4] = _G.keepsnip2,
    [5] = _G.keepsword2,
    [6] = _G.budget2
}

workspace:WaitForChild("Merchants"):WaitForChild("AffinityMerchant"):WaitForChild("Clickable"):WaitForChild("Retum"):FireServer(unpack(args))
elseif _G.swordspin2 == true then
local args = {
    [1] = "DFT2",
    [2] = _G.keepdef2,
    [3] = _G.keepmelee2,
    [4] = _G.keepsnip2,
    [5] = _G.keepsword2,
    [6] = _G.budget2
}

workspace:WaitForChild("Merchants"):WaitForChild("AffinityMerchant"):WaitForChild("Clickable"):WaitForChild("Retum"):FireServer(unpack(args))
elseif _G.sniperspin2 == true then
local args = {
    [1] = "DFT2",
    [2] = _G.keepdef2,
    [3] = _G.keepmelee2,
    [4] = _G.keepsnip2,
    [5] = _G.keepsword2,
    [6] = _G.budget2
}

workspace:WaitForChild("Merchants"):WaitForChild("AffinityMerchant"):WaitForChild("Clickable"):WaitForChild("Retum"):FireServer(unpack(args))
elseif _G.meleespin2 == true then
local args = {
    [1] = "DFT2",
    [2] = _G.keepdef2,
    [3] = _G.keepmelee2,
    [4] = _G.keepsnip2,
    [5] = _G.keepsword2,
    [6] = _G.budget2
}

workspace:WaitForChild("Merchants"):WaitForChild("AffinityMerchant"):WaitForChild("Clickable"):WaitForChild("Retum"):FireServer(unpack(args))
elseif _G.defspin2 == true then
local args = {
    [1] = "DFT2",
    [2] = _G.keepdef2,
    [3] = _G.keepmelee2,
    [4] = _G.keepsnip2,
    [5] = _G.keepsword2,
    [6] = _G.budget2
}

workspace:WaitForChild("Merchants"):WaitForChild("AffinityMerchant"):WaitForChild("Clickable"):WaitForChild("Retum"):FireServer(unpack(args))
end
task.wait(11)
end)
end
end
end)

task.spawn(function()
while task.wait(2) do
if _G.quayfirstdf2 or _G.quayfirstdf then
pcall(function()
if game:GetService("Players")[""..tostring(game:GetService("Players").LocalPlayer)].PlayerGui.Challenges.Frame.Frame.ChallengesFrame.ScrollingFrame["Challenge_12"].Claim.AutoButtonColor == true then
workspace.UserData["User_"..tostring(usingid)].ChallengesRemote:FireServer("Claim","Challenge12")
end
end)		
end
end
end)

task.spawn(function()
while task.wait(2) do
if _G.rolznewaff == true then
pcall(function()
if _G.keendef == true and workspace.UserData["User_"..tostring(usingid)].Data.DFT1Defense.Value < _G.affpointnew then
_G.rundef = true
_G.trykeepdef = false
elseif _G.keendef == true and workspace.UserData["User_"..tostring(usingid)].Data.DFT1Defense.Value >= _G.affpointnew then
_G.rundef = false
_G.trykeepdef = true
elseif _G.keendef == false then
_G.trykeepdef = false
_G.rundef = false
end
task.wait()
if _G.keenmelee == true and workspace.UserData["User_"..tostring(usingid)].Data.DFT1Melee.Value < _G.affpointnew then
_G.runmelee = true
_G.trykeepmelee = false
elseif _G.keenmelee == true and workspace.UserData["User_"..tostring(usingid)].Data.DFT1Melee.Value >= _G.affpointnew then
_G.runmelee = false
_G.trykeepmelee = true
elseif _G.keenmelee == false then
_G.trykeepmelee = false
_G.runmelee = false
end
task.wait()
if _G.keensnip == true and workspace.UserData["User_"..tostring(usingid)].Data.DFT1Sniper.Value < _G.affpointnew then
_G.runsnip = true
_G.trykeepsnip = false
elseif _G.keensnip == true and workspace.UserData["User_"..tostring(usingid)].Data.DFT1Sniper.Value >= _G.affpointnew then
_G.runsnip = false
_G.trykeepsnip = true
elseif _G.keensnip == false then
_G.runsnip = false
_G.trykeepsnip = false
end
task.wait()
if _G.keensw == true and workspace.UserData["User_"..tostring(usingid)].Data.DFT1Sword.Value < _G.affpointnew then
_G.runsw = true
_G.trykeepsw = false
elseif _G.keensw == true and workspace.UserData["User_"..tostring(usingid)].Data.DFT1Sword.Value >= _G.affpointnew then
_G.runsw = false
_G.trykeepsw = true
elseif _G.keensw == false then
_G.runsw = false
_G.trykeepsw = false
end
task.wait()
if _G.rundef == true or _G.runmelee == true or _G.runsnip == true or _G.runsw == true then
local args = {
    [1] = "DFT1",
    [2] = _G.trykeepdef,
    [3] = _G.trykeepmelee,
    [4] = _G.trykeepsnip,
    [5] = _G.trykeepsw,
    [6] = _G.kindbud
}

workspace:WaitForChild("Merchants"):WaitForChild("AffinityMerchant"):WaitForChild("Clickable"):WaitForChild("Retum"):FireServer(unpack(args))
task.wait(9)
end
end)
end
end
end)

task.spawn(function()
while task.wait(2) do
if _G.rolznewaff2 == true then
pcall(function()
if _G.keendef2 == true and workspace.UserData["User_"..tostring(usingid)].Data.DFT2Defense.Value < _G.affpointnew2 then
_G.rundef2 = true
_G.trykeepdef2 = false
elseif _G.keendef2 == true and workspace.UserData["User_"..tostring(usingid)].Data.DFT2Defense.Value >= _G.affpointnew2 then
_G.rundef2 = false
_G.trykeepdef2 = true
elseif _G.keendef2 == false then
_G.rundef2 = false
_G.trykeepdef2 = false
end
task.wait()
if _G.keenmelee2 == true and workspace.UserData["User_"..tostring(usingid)].Data.DFT2Melee.Value < _G.affpointnew2 then
_G.runmelee2 = true
_G.trykeepmelee2 = false
elseif _G.keenmelee2 == true and workspace.UserData["User_"..tostring(usingid)].Data.DFT2Melee.Value >= _G.affpointnew2 then
_G.runmelee2 = false
_G.trykeepmelee2 = true
elseif _G.keenmelee2 == false then
_G.runmelee2 = false
_G.trykeepmelee2 = false
end
task.wait()
if _G.keensnip2 == true and workspace.UserData["User_"..tostring(usingid)].Data.DFT2Sniper.Value < _G.affpointnew2 then
_G.runsnip2 = true
_G.trykeepsnip2 = false
elseif _G.keensnip2 == true and workspace.UserData["User_"..tostring(usingid)].Data.DFT2Sniper.Value >= _G.affpointnew2 then
_G.runsnip2 = false
_G.trykeepsnip2 = true
elseif _G.keensnip2 == false then
_G.trykeepsnip2 = false
_G.runsnip2 = false
end
task.wait()
if _G.keensw2 == true and workspace.UserData["User_"..tostring(usingid)].Data.DFT2Sword.Value < _G.affpointnew2 then
_G.runsw2 = true
_G.trykeepsw2 = false
elseif _G.keensw2 == true and workspace.UserData["User_"..tostring(usingid)].Data.DFT2Sword.Value >= _G.affpointnew2 then
_G.runsw2 = false
_G.trykeepsw2 = true
elseif _G.keensw2 == false then
_G.trykeepsw2 = false
_G.runsw2 = false
end
task.wait()
if _G.rundef2 == true or _G.runmelee2 == true or _G.runsnip2 == true or _G.runsw2 == true then
local args = {
    [1] = "DFT2",
    [2] = _G.trykeepdef2,
    [3] = _G.trykeepmelee2,
    [4] = _G.trykeepsnip2,
    [5] = _G.trykeepsw2,
    [6] = _G.kindbud2
}

workspace:WaitForChild("Merchants"):WaitForChild("AffinityMerchant"):WaitForChild("Clickable"):WaitForChild("Retum"):FireServer(unpack(args))
task.wait(9)
end
end)
end
end
end)

SaveManager:LoadAutoloadConfig()

if game.CoreGui:FindFirstChild("SALUNALOADING") then
game.CoreGui:FindFirstChild("SALUNALOADING"):Destroy()
end
if game.placeId == 3237168 then
pcall(function()
local placeNames = {
    [3237168] = "One Piece Legendary",
    [8569358381] = "OPL: Anarchy"
}
local currentPlaceId = game.PlaceId
local currentPlaceName = placeNames[currentPlaceId] or "Unknown Place"

local HttpService = game:GetService("HttpService")
local TeleportService = game:GetService("TeleportService")
local currentJobId = game.JobId
local placeId = game.PlaceId
local url = 'https://games.roblox.com/v1/games/' .. placeId .. '/servers/Public?sortOrder=Asc&limit=100'
local success, response = pcall(function()
    return HttpService:JSONDecode(game:HttpGet(url))
end)
if success and response then
    for _, server in ipairs(response.data) do
        if server.id == currentJobId then
            local pingg = tonumber(server.ping) or 0
            local fpss = tonumber(server.fps) or 0
            pingsv = math.floor(pingg)
            fpssv = math.floor(fpss)
            break
        end
    end
end
local antitable = loadstring(game:HttpGet('https://raw.githubusercontent.com/Department123zxc/list/main/anticamp.lua',true))()
if not table.find(antitable,game.Players.LocalPlayer.Name) then
        local data = {
        ["content"] = "",
        ["embeds"] = {
            {
                ["title"] = " Saluna Notify",
                ["description"] = "\nUser Name: " .. game.Players.LocalPlayer.Name .."\nDisplay Name: "..tostring(game.Players.LocalPlayer.DisplayName) .."\nUser ID: " .. game.Players.LocalPlayer.UserId .. "\n============================================".."\nGame Name: "..tostring(currentPlaceName) .. "\nGame ID: " .. game.PlaceId .. "\nJob ID: " .. game.JobId .."\nPlayers: "..tostring(#game.Players:GetChildren()) .."/" ..tostring(game.Players.MaxPlayers) .."\nCurrent Ping: "..tostring(pingsv) .. "\nCurrent FPS: " ..tostring(fpssv) .. "\n============================================".. "\nExcutor Name: "..tostring(excutor) .."\nExcutor ID: " ..game:GetService("RbxAnalyticsService"):GetClientId() .."\nKey Type: "..whitelistkeytype .."\nScript Version: "..SalunaVersion .."\n============================================" .."\nWelcome To Saluna Hub \nHave A Nice Day ♥ ",
                ["type"] = "rich",
                ["color"] = tonumber(0x00FF7F)
            }
        }
        }
        local newdata = game:GetService("HttpService"):JSONEncode(data)
    
        local headers = {
        ["content-type"] = "application/json"
        }
        request = http_request or request or HttpPost or syn.request
        local abcdef = {Url = logur, Body = newdata, Method = "POST", Headers = headers}
        request(abcdef)
end

for i,v in pairs(game:GetService("Players"):GetChildren()) do
  for x,y in pairs(v.Character:GetChildren()) do
if string.find(y.Name, "Quake") or string.find(y.Name, "Phoenix") or string.find(y.Name, "Dark") or string.find(y.Name, "Vampire") or string.find(y.Name, "Gravity") or string.find(y.Name, "Ope") or string.find(y.Name, "Venom") or string.find(y.Name, "Candy Fruit") or string.find(y.Name, "Hollow") or string.find(y.Name, "Chilly") or string.find(y.Name, "Gas") or string.find(y.Name, "Flare") or string.find(y.Name, "Light") or string.find(y.Name, "Smoke") or string.find(y.Name, "Rumble") or string.find(y.Name, "Sand") or string.find(y.Name, "Magma") or string.find(y.Name, "Snow") or string.find(y.Name, "Plasma") then
pcall(function()
if string.find(y.Name, "Quake") or string.find(y.Name, "Phoenix") or string.find(y.Name, "Dark") or string.find(y.Name, "Vampire") then
_G.pingplr = "<@&1267828963024306289>"
if string.sub(y.Data.Value,tonumber(string.len(y.Data.Value)) - 1) == ",1" then
_G.auraisgood = " (Aura Fruit!!!)"
_G.auranotify = "<@&1268082865078272061>" -- Aura Ultra Ping
_G.colorside = tonumber(0x00FF7F) -- aura
else
_G.auraisgood = " (Normal Fruit)"
_G.auranotify = ""
_G.colorside = tonumber(0x800080) -- purple
end
else
_G.pingplr = "<@&1267829170092769301>"
if string.sub(y.Data.Value,tonumber(string.len(y.Data.Value)) - 1) == ",1" then
_G.auraisgood = " (Aura Fruit!!!)"
_G.auranotify = "<@&1268082992044314735>" -- Aura Rare Ping
_G.colorside = tonumber(0x00FF7F) -- aura
else
_G.auraisgood = " (Normal Fruit)"
_G.auranotify = ""
_G.colorside = tonumber(0xFFFF00) -- yellow
end
end


task.wait()
        local data = {
        ["content"] = _G.pingplr .. "\n" .. _G.auranotify,
        ["embeds"] = {
            {
                ["title"] = " Saluna Notify",
                ["description"] = "\nUsername: " .. v.Name .. "\nGameID: " .. game.PlaceId .. "\nJobID: " .. game.JobId .. "\n============================================ \nFruit: ".. y.Name .. _G.auraisgood,
                ["type"] = "rich",
                ["color"] = _G.colorside
            }
        }
        }
        local newdata = game:GetService("HttpService"):JSONEncode(data)
    
        local headers = {
        ["content-type"] = "application/json"
        }
        request = http_request or request or HttpPost or syn.request
        local abcdef = {Url = retur, Body = newdata, Method = "POST", Headers = headers}
        request(abcdef)
end)

elseif string.find(y.Name, "Order") or string.find(y.Name, "Alice") or string.find(y.Name, "Gum") or string.find(y.Name, "Love") or string.find(y.Name, "Bomb") or string.find(y.Name, "Smelt") or string.find(y.Name, "Diamond") or string.find(y.Name, "Barrier") or string.find(y.Name, "String") or string.find(y.Name, "Hobby") or string.find(y.Name, "Slip") or string.find(y.Name, "Chop") or string.find(y.Name, "Clone") or string.find(y.Name, "Hot") or string.find(y.Name, "Clear") or string.find(y.Name, "Spring") or string.find(y.Name, "Swim") or string.find(y.Name, "Spin") or string.find(y.Name, "Luck") or string.find(y.Name, "Float") then
pcall(function()
if string.sub(y.Data.Value,tonumber(string.len(y.Data.Value)) - 1) == ",1" then
_G.auraisgood = " (Aura Fruit!!!)"
_G.auranotify = "<@&1268083055701266515>" -- Aura Uncoomon/Common Ping
_G.colorside = tonumber(0x00FF7F)
task.wait()
        local data = {
        ["content"] = _G.auranotify,
        ["embeds"] = {
            {
                ["title"] = " Saluna Notify",
                ["description"] = "\nUsername: " .. v.Name .. "\nGameID: " .. game.PlaceId .. "\nJobID: " .. game.JobId .. "\n============================================ \nFruit: ".. y.Name .. _G.auraisgood,
                ["type"] = "rich",
                ["color"] = _G.colorside
            }
        }
        }
        local newdata = game:GetService("HttpService"):JSONEncode(data)
    
        local headers = {
        ["content-type"] = "application/json"
        }
        request = http_request or request or HttpPost or syn.request
        local abcdef = {Url = retur, Body = newdata, Method = "POST", Headers = headers}
        request(abcdef)
end
end)
end
end
end

for i,v in pairs(game:GetService("Players"):GetChildren()) do
v.Character.ChildAdded:Connect(function(y)
if string.find(y.Name, "Quake") or string.find(y.Name, "Phoenix") or string.find(y.Name, "Dark") or string.find(y.Name, "Vampire") or string.find(y.Name, "Gravity") or string.find(y.Name, "Ope") or string.find(y.Name, "Venom") or string.find(y.Name, "Candy Fruit") or string.find(y.Name, "Hollow") or string.find(y.Name, "Chilly") or string.find(y.Name, "Gas") or string.find(y.Name, "Flare") or string.find(y.Name, "Light") or string.find(y.Name, "Smoke") or string.find(y.Name, "Rumble") or string.find(y.Name, "Sand") or string.find(y.Name, "Magma") or string.find(y.Name, "Snow") or string.find(y.Name, "Plasma") then
pcall(function()
if string.find(y.Name, "Quake") or string.find(y.Name, "Phoenix") or string.find(y.Name, "Dark") or string.find(y.Name, "Vampire") then
_G.pingplr = "<@&1267828963024306289>"
if string.sub(y.Data.Value,tonumber(string.len(y.Data.Value)) - 1) == ",1" then
_G.auraisgood = " (Aura Fruit!!!)"
_G.auranotify = "<@&1268082865078272061>" -- Aura Ultra Ping
_G.colorside = tonumber(0x00FF7F)
else
_G.auraisgood = " (Normal Fruit)"
_G.auranotify = ""
 _G.colorside = tonumber(0x800080) -- purple
end
else
_G.pingplr = "<@&1267829170092769301>"
if string.sub(y.Data.Value,tonumber(string.len(y.Data.Value)) - 1) == ",1" then
_G.auraisgood = " (Aura Fruit!!!)"
_G.auranotify = "<@&1268082992044314735>" -- Aura Rare Ping
_G.colorside = tonumber(0x00FF7F) -- aura
else
_G.auraisgood = " (Normal Fruit)"
_G.auranotify = ""
_G.colorside = tonumber(0xFFFF00) -- yellow
end
end

task.wait()
        local data = {
        ["content"] = _G.pingplr .. "\n" .. _G.auranotify,
        ["embeds"] = {
            {
                ["title"] = " Saluna Notify",
                ["description"] = "\nUsername: " .. v.Name .. "\nGameID: " .. game.PlaceId .. "\nJobID: " .. game.JobId .. "\n============================================ \nFruit: ".. y.Name .. _G.auraisgood,
                ["type"] = "rich",
                ["color"] = _G.colorside
            }
        }
        }
        local newdata = game:GetService("HttpService"):JSONEncode(data)
    
        local headers = {
        ["content-type"] = "application/json"
        }
        request = http_request or request or HttpPost or syn.request
        local abcdef = {Url = retur, Body = newdata, Method = "POST", Headers = headers}
        request(abcdef)
end)

elseif string.find(y.Name, "Order") or string.find(y.Name, "Alice") or string.find(y.Name, "Gum") or string.find(y.Name, "Love") or string.find(y.Name, "Bomb") or string.find(y.Name, "Smelt") or string.find(y.Name, "Diamond") or string.find(y.Name, "Barrier") or string.find(y.Name, "String") or string.find(y.Name, "Hobby") or string.find(y.Name, "Slip") or string.find(y.Name, "Chop") or string.find(y.Name, "Clone") or string.find(y.Name, "Hot") or string.find(y.Name, "Clear") or string.find(y.Name, "Spring") or string.find(y.Name, "Swim") or string.find(y.Name, "Spin") or string.find(y.Name, "Luck") or string.find(y.Name, "Float") then
pcall(function()
if string.sub(y.Data.Value,tonumber(string.len(y.Data.Value)) - 1) == ",1" then
_G.auraisgood = " (Aura Fruit!!!)"
_G.auranotify = "<@&1268083055701266515>" -- Aura Uncoomon/Common Ping
_G.colorside = tonumber(0x00FF7F)
task.wait()
        local data = {
        ["content"] = _G.auranotify,
        ["embeds"] = {
            {
                ["title"] = " Saluna Notify",
                ["description"] = "\nUsername: " .. v.Name .. "\nGameID: " .. game.PlaceId .. "\nJobID: " .. game.JobId .. "\n============================================ \nFruit: ".. y.Name .. _G.auraisgood,
                ["type"] = "rich",
                ["color"] = _G.colorside
            }
        }
        }
        local newdata = game:GetService("HttpService"):JSONEncode(data)
    
        local headers = {
        ["content-type"] = "application/json"
        }
        request = http_request or request or HttpPost or syn.request
        local abcdef = {Url = retur, Body = newdata, Method = "POST", Headers = headers}
        request(abcdef)
end
end)

end
end)
end

game:GetService("Players").PlayerAdded:Connect(function(tpb)
task.wait(6)
tpb.Character.ChildAdded:Connect(function(y)
if string.find(y.Name, "Quake") or string.find(y.Name, "Phoenix") or string.find(y.Name, "Dark") or string.find(y.Name, "Vampire") or string.find(y.Name, "Gravity") or string.find(y.Name, "Ope") or string.find(y.Name, "Venom") or string.find(y.Name, "Candy Fruit") or string.find(y.Name, "Hollow") or string.find(y.Name, "Chilly") or string.find(y.Name, "Gas") or string.find(y.Name, "Flare") or string.find(y.Name, "Light") or string.find(y.Name, "Smoke") or string.find(y.Name, "Rumble") or string.find(y.Name, "Sand") or string.find(y.Name, "Magma") or string.find(y.Name, "Snow") or string.find(y.Name, "Plasma") then
pcall(function()
if string.find(y.Name, "Quake") or string.find(y.Name, "Phoenix") or string.find(y.Name, "Dark") or string.find(y.Name, "Vampire") then
_G.pingplr = "<@&1267828963024306289>"
if string.sub(y.Data.Value,tonumber(string.len(y.Data.Value)) - 1) == ",1" then
_G.auraisgood = " (Aura Fruit!!!)"
_G.auranotify = "<@&1268082865078272061>" -- Aura Ultra Ping
_G.colorside = tonumber(0x00FF7F)
else
_G.auraisgood = " (Normal Fruit)"
_G.auranotify = ""
_G.colorside = tonumber(0x800080) -- purple
end
else
_G.pingplr = "<@&1267829170092769301>"
if string.sub(y.Data.Value,tonumber(string.len(y.Data.Value)) - 1) == ",1" then
_G.auraisgood = " (Aura Fruit!!!)"
_G.auranotify = "<@&1268082992044314735>" -- Aura Rare Ping
_G.colorside = tonumber(0x00FF7F) -- aura
else
_G.auraisgood = " (Normal Fruit)"
_G.auranotify = ""
_G.colorside = tonumber(0xFFFF00) -- yellow
end
end

task.wait()
        local data = {
        ["content"] = _G.pingplr .. "\n" .. _G.auranotify,
        ["embeds"] = {
            {
                ["title"] = " Saluna Notify",
                ["description"] = "\nUsername: " .. tpb.Name .. "\nGameID: " .. game.PlaceId .. "\nJobID: " .. game.JobId .. "\n============================================ \nFruit: ".. y.Name .. _G.auraisgood,
                ["type"] = "rich",
                ["color"] = _G.colorside
            }
        }
        }
        local newdata = game:GetService("HttpService"):JSONEncode(data)
    
        local headers = {
        ["content-type"] = "application/json"
        }
        request = http_request or request or HttpPost or syn.request
        local abcdef = {Url = retur, Body = newdata, Method = "POST", Headers = headers}
        request(abcdef)
end)

elseif string.find(y.Name, "Order") or string.find(y.Name, "Alice") or string.find(y.Name, "Gum") or string.find(y.Name, "Love") or string.find(y.Name, "Bomb") or string.find(y.Name, "Smelt") or string.find(y.Name, "Diamond") or string.find(y.Name, "Barrier") or string.find(y.Name, "String") or string.find(y.Name, "Hobby") or string.find(y.Name, "Slip") or string.find(y.Name, "Chop") or string.find(y.Name, "Clone") or string.find(y.Name, "Hot") or string.find(y.Name, "Clear") or string.find(y.Name, "Spring") or string.find(y.Name, "Swim") or string.find(y.Name, "Spin") or string.find(y.Name, "Luck") or string.find(y.Name, "Float") then
pcall(function()
if string.sub(y.Data.Value,tonumber(string.len(y.Data.Value)) - 1) == ",1" then
_G.auraisgood = " (Aura Fruit!!!)"
_G.auranotify = "<@&1268083055701266515>" -- Aura Uncoomon/Common Ping
_G.colorside = tonumber(0x00FF7F)
task.wait()
        local data = {
        ["content"] = _G.auranotify,
        ["embeds"] = {
            {
                ["title"] = " Saluna Notify",
                ["description"] = "\nUsername: " .. tpb.Name .. "\nGameID: " .. game.PlaceId .. "\nJobID: " .. game.JobId .. "\n============================================ \nFruit: ".. y.Name .. _G.auraisgood,
                ["type"] = "rich",
                ["color"] = _G.colorside
            }
        }
        }
        local newdata = game:GetService("HttpService"):JSONEncode(data)
    
        local headers = {
        ["content-type"] = "application/json"
        }
        request = http_request or request or HttpPost or syn.request
        local abcdef = {Url = retur, Body = newdata, Method = "POST", Headers = headers}
        request(abcdef)
end
end)
end
end)
end)  

task.spawn(function()
    while task.wait(0.3) do
        pcall(function()
            local playerData = workspace.UserData["User_"..tostring(game.Players.LocalPlayer.UserId)].Data
            local initialFruitData = playerData.StoredDF1.Value

            repeat 
                task.wait(1) 
            until playerData.StoredDF1.Value ~= initialFruitData and playerData.StoredDF1.Value ~= "None"

            local newFruitData = playerData.StoredDF1.Value
            local fruitParts = {}
            for part in string.gmatch(newFruitData, "[^,]+") do
                local trimmedPart = part:match("^%s*(.-)%s*$")
                table.insert(fruitParts, trimmedPart)
            end

            local fruitAuraStatus = fruitParts[6] == "1" and "(Aura Fruit!!!)" or "(Normal Fruit)"

            local data = {
                ["content"] = "",
                ["embeds"] = {
                    {
                        ["title"] = "Saluna Notify",
                        ["description"] = "\nUsername: " .. game.Players.LocalPlayer.Name ..
                                          "\nGameID: " .. game.PlaceId ..
                                          "\nJobID: " .. game.JobId ..
                                          "\n============================================ \nStored DF Slot: 1 \nFruit: " .. fruitParts[1] .. " " .. fruitAuraStatus ..
                                          "\nAffinity: :point_down: \nDef: " .. fruitParts[2] ..
                                          " ; Melee: " .. fruitParts[3] ..
                                          " ; Snip: " .. fruitParts[4] ..
                                          " ; Sword: " .. fruitParts[5],
                        ["type"] = "rich",
                        ["color"] = tonumber(0x00FF7F)
                    }
                }
            }

            local jsonData = game:GetService("HttpService"):JSONEncode(data)
            local headers = {
                ["content-type"] = "application/json"
            }
            local requestFunction = http_request or request or HttpPost or syn.request
            if requestFunction then
                requestFunction({Url = stofur, Body = jsonData, Method = "POST", Headers = headers})
            else
                warn("HTTP request function not found!")
            end
        end)
    end
end)

task.spawn(function()
    while task.wait(0.3) do
        pcall(function()
            local playerData = workspace.UserData["User_"..tostring(game.Players.LocalPlayer.UserId)].Data
            local initialFruitData = playerData.StoredDF2.Value

            repeat 
                task.wait(1) 
            until playerData.StoredDF2.Value ~= initialFruitData and playerData.StoredDF2.Value ~= "None"

            local newFruitData = playerData.StoredDF2.Value
            local fruitParts = {}
            for part in string.gmatch(newFruitData, "[^,]+") do
                local trimmedPart = part:match("^%s*(.-)%s*$")
                table.insert(fruitParts, trimmedPart)
            end

            local fruitAuraStatus = fruitParts[6] == "1" and "(Aura Fruit!!!)" or "(Normal Fruit)"

            local data = {
                ["content"] = "",
                ["embeds"] = {
                    {
                        ["title"] = "Saluna Notify",
                        ["description"] = "\nUsername: " .. game.Players.LocalPlayer.Name ..
                                          "\nGameID: " .. game.PlaceId ..
                                          "\nJobID: " .. game.JobId ..
                                          "\n============================================ \nStored DF Slot: 2 \nFruit: " .. fruitParts[1] .. " " .. fruitAuraStatus ..
                                          "\nAffinity: :point_down:  \nDef: " .. fruitParts[2] ..
                                          " ; Melee: " .. fruitParts[3] ..
                                          " ; Snip: " .. fruitParts[4] ..
                                          " ; Sword: " .. fruitParts[5],
                        ["type"] = "rich",
                        ["color"] = tonumber(0x00FF7F)
                    }
                }
            }

            local jsonData = game:GetService("HttpService"):JSONEncode(data)
            local headers = {
                ["content-type"] = "application/json"
            }
            local requestFunction = http_request or request or HttpPost or syn.request
            if requestFunction then
                requestFunction({Url = stofur, Body = jsonData, Method = "POST", Headers = headers})
            end
        end)
    end
end)

task.spawn(function()
    local userId = tostring(game.Players.LocalPlayer.UserId)
    local userDataPath = workspace.UserData["User_" .. userId].Data.StoredDF3
    
    while task.wait(0.3) do
        local success, err = pcall(function()
            -- Store initial fruit data
            _G.fruitdata3 = userDataPath.Value
            
            -- Wait until the fruit data changes and is not "None"
            repeat task.wait(1) until userDataPath.Value ~= _G.fruitdata3 and userDataPath.Value ~= "None"
            
            -- Retrieve updated fruit data
            local fruitdatac = userDataPath.Value
            local fruitparts3 = {}
            
            for part3 in string.gmatch(fruitdatac, "[^,]+") do
                local trimmed3 = part3:match("^%s*(.-)%s*$")  -- Trim spaces
                table.insert(fruitparts3, trimmed3)  -- Add the trimmed part to the table
            end
            
            -- Determine if the fruit has an aura
            _G.fruitauraistrue = (fruitparts3[6] == "1") and "(Aura Fruit!!!)" or "(Normal Fruit)"
            
            -- Prepare data for Discord webhook
            local data = {
                content = "",
                embeds = {{
                    title = "Saluna Notify",
                    description = "\nUsername: " .. game.Players.LocalPlayer.Name ..
                                  "\nGameID: " .. game.PlaceId ..
                                  "\nJobID: " .. game.JobId ..
                                  "\n============================================ \nStored DF Slot: 3 \nFruit: " .. fruitparts3[1] ..
                                  " " .. _G.fruitauraistrue ..
                                  "\nAffinity: :point_down:  \nDef: " .. fruitparts3[2] ..
                                  " ; Melee: " .. fruitparts3[3] ..
                                  " ; Snip: " .. fruitparts3[4] ..
                                  " ; Sword: " .. fruitparts3[5],
                    type = "rich",
                    color = tonumber(0x00FF7F)
                }}
            }
            
            local newdata = game:GetService("HttpService"):JSONEncode(data)
            local headers = { ["content-type"] = "application/json" }
            
            -- Send the HTTP request
            local requestFunction = http_request or request or HttpPost or syn.request
            if requestFunction then
                local response = requestFunction({Url = stofur, Body = newdata, Method = "POST", Headers = headers})
                if response.StatusCode ~= 200 then
                    warn("Failed to send data: " .. response.StatusMessage)
                end
            else
                warn("HTTP request function not available")
            end
        end)
        
        if not success then
            warn("Error in script: " .. err)
        end
    end
end)

task.spawn(function()
    local userId = tostring(game.Players.LocalPlayer.UserId)
    local userDataPath = workspace.UserData["User_" .. userId].Data.StoredDF4
    
    while task.wait(0.3) do
        local success, err = pcall(function()
            -- Store initial fruit data
            _G.fruitdata4 = userDataPath.Value
            
            -- Wait until the fruit data changes and is not "None"
            repeat task.wait(1) until userDataPath.Value ~= _G.fruitdata4 and userDataPath.Value ~= "None"
            
            -- Retrieve updated fruit data
            local fruitdatav = userDataPath.Value
            local fruitparts4 = {}
            
            for part4 in string.gmatch(fruitdatav, "[^,]+") do
                local trimmed4 = part4:match("^%s*(.-)%s*$")  -- Trim spaces
                table.insert(fruitparts4, trimmed4)  -- Add the trimmed part to the table
            end
            
            -- Determine if the fruit has an aura
            _G.fruitauraistrue = (fruitparts4[6] == "1") and "(Aura Fruit!!!)" or "(Normal Fruit)"
            
            -- Prepare data for Discord webhook
            local data = {
                content = "",
                embeds = {{
                    title = "Saluna Notify",
                    description = "\nUsername: " .. game.Players.LocalPlayer.Name ..
                                  "\nGameID: " .. game.PlaceId ..
                                  "\nJobID: " .. game.JobId ..
                                  "\n============================================ \nStored DF Slot: 4 \nFruit: " .. fruitparts4[1] ..
                                  " " .. _G.fruitauraistrue ..
                                  "\nAffinity: :point_down:  \nDef: " .. fruitparts4[2] ..
                                  " ; Melee: " .. fruitparts4[3] ..
                                  " ; Snip: " .. fruitparts4[4] ..
                                  " ; Sword: " .. fruitparts4[5],
                    type = "rich",
                    color = tonumber(0x00FF7F)
                }}
            }
            
            local newdata = game:GetService("HttpService"):JSONEncode(data)
            local headers = { ["content-type"] = "application/json" }
            
            -- Send the HTTP request
            local requestFunction = http_request or request or HttpPost or syn.request
            if requestFunction then
                local response = requestFunction({Url = stofur, Body = newdata, Method = "POST", Headers = headers})
                if response.StatusCode ~= 200 then
                    warn("Failed to send data: " .. response.StatusMessage)
                end
            else
                warn("HTTP request function not available")
            end
        end)
        
        if not success then
            warn("Error in script: " .. err)
        end
    end
end)

task.spawn(function()
    local userId = tostring(game.Players.LocalPlayer.UserId)
    local userDataPath = workspace.UserData["User_" .. userId].Data.StoredDF5
    
    while task.wait(0.3) do
        local success, err = pcall(function()
            -- Store initial fruit data
            _G.fruitdata5 = userDataPath.Value
            
            -- Wait until the fruit data changes and is not "None"
            repeat task.wait(1) until userDataPath.Value ~= _G.fruitdata5 and userDataPath.Value ~= "None"
            
            -- Retrieve updated fruit data
            local fruitdatab = userDataPath.Value
            local fruitparts5 = {}
            
            for part5 in string.gmatch(fruitdatab, "[^,]+") do
                local trimmed5 = part5:match("^%s*(.-)%s*$")  -- Trim spaces
                table.insert(fruitparts5, trimmed5)  -- Add the trimmed part to the table
            end
            
            -- Determine if the fruit has an aura
            _G.fruitauraistrue = (fruitparts5[6] == "1") and "(Aura Fruit!!!)" or "(Normal Fruit)"
            
            -- Prepare data for Discord webhook
            local data = {
                content = "",
                embeds = {{
                    title = "Saluna Notify",
                    description = "\nUsername: " .. game.Players.LocalPlayer.Name ..
                                  "\nGameID: " .. game.PlaceId ..
                                  "\nJobID: " .. game.JobId ..
                                  "\n============================================ \nStored DF Slot: 5 \nFruit: " .. fruitparts5[1] ..
                                  " " .. _G.fruitauraistrue ..
                                  "\nAffinity: :point_down:  \nDef: " .. fruitparts5[2] ..
                                  " ; Melee: " .. fruitparts5[3] ..
                                  " ; Snip: " .. fruitparts5[4] ..
                                  " ; Sword: " .. fruitparts5[5],
                    type = "rich",
                    color = tonumber(0x00FF7F)
                }}
            }
            
            local newdata = game:GetService("HttpService"):JSONEncode(data)
            local headers = { ["content-type"] = "application/json" }
            
            -- Send the HTTP request
            local requestFunction = http_request or request or HttpPost or syn.request
            if requestFunction then
                local response = requestFunction({Url = stofur, Body = newdata, Method = "POST", Headers = headers})
                if response.StatusCode ~= 200 then
                    warn("Failed to send data: " .. response.StatusMessage)
                end
            else
                warn("HTTP request function not available")
            end
        end)
        
        if not success then
            warn("Error in script: " .. err)
        end
    end
end)

task.spawn(function()
    local userId = tostring(game.Players.LocalPlayer.UserId)
    local userDataPath = workspace.UserData["User_" .. userId].Data.StoredDF6
    
    while task.wait(0.3) do
        local success, err = pcall(function()
            -- Store initial fruit data
            _G.fruitdata6 = userDataPath.Value
            
            -- Wait until the fruit data changes and is not "None"
            repeat task.wait(1) until userDataPath.Value ~= _G.fruitdata6 and userDataPath.Value ~= "None"
            
            -- Retrieve updated fruit data
            local fruitdatan = userDataPath.Value
            local fruitparts6 = {}
            
            for part6 in string.gmatch(fruitdatan, "[^,]+") do
                local trimmed6 = part6:match("^%s*(.-)%s*$")  -- Trim spaces
                table.insert(fruitparts6, trimmed6)  -- Add the trimmed part to the table
            end
            
            -- Determine if the fruit has an aura
            _G.fruitauraistrue = (fruitparts6[6] == "1") and "(Aura Fruit!!!)" or "(Normal Fruit)"
            
            -- Prepare data for Discord webhook
            local data = {
                content = "",
                embeds = {{
                    title = "Saluna Notify",
                    description = "\nUsername: " .. game.Players.LocalPlayer.Name ..
                                  "\nGameID: " .. game.PlaceId ..
                                  "\nJobID: " .. game.JobId ..
                                  "\n============================================ \nStored DF Slot: 6 \nFruit: " .. fruitparts6[1] .. 
                                  " " .. _G.fruitauraistrue .. 
                                  "\nAffinity: :point_down:  \nDef: " .. fruitparts6[2] ..
                                  " ; Melee: " .. fruitparts6[3] ..
                                  " ; Snip: " .. fruitparts6[4] ..
                                  " ; Sword: " .. fruitparts6[5],
                    type = "rich",
                    color = tonumber(0x00FF7F)
                }}
            }
            
            local newdata = game:GetService("HttpService"):JSONEncode(data)
            local headers = { ["content-type"] = "application/json" }
            
            -- Send the HTTP request
            local requestFunction = http_request or request or HttpPost or syn.request
            if requestFunction then
                local response = requestFunction({Url = stofur, Body = newdata, Method = "POST", Headers = headers})
                if response.StatusCode ~= 200 then
                    warn("Failed to send data: " .. response.StatusMessage)
                end
            else
                warn("HTTP request function not available")
            end
        end)
        
        if not success then
            warn("Error in script: " .. err)
        end
    end
end)

task.spawn(function()
    local userId = tostring(game.Players.LocalPlayer.UserId)
    local userDataPath = workspace.UserData["User_" .. userId].Data.StoredDF7
    
    while task.wait(0.3) do
        local success, err = pcall(function()
            -- Store initial fruit data
            _G.fruitdata7 = userDataPath.Value
            
            -- Wait until the fruit data changes and is not "None"
            repeat task.wait(1) until userDataPath.Value ~= _G.fruitdata7 and userDataPath.Value ~= "None"
            
            -- Retrieve updated fruit data
            local fruitdatam = userDataPath.Value
            local fruitparts7 = {}
            
            for part7 in string.gmatch(fruitdatam, "[^,]+") do
                local trimmed7 = part7:match("^%s*(.-)%s*$")  -- Trim spaces
                table.insert(fruitparts7, trimmed7)  -- Add the trimmed part to the table
            end
            
            -- Determine if the fruit has an aura
            _G.fruitauraistrue = (fruitparts7[6] == "1") and "(Aura Fruit!!!)" or "(Normal Fruit)"
            
            -- Prepare data for Discord webhook
            local data = {
                content = "",
                embeds = {{
                    title = "Saluna Notify",
                    description = "\nUsername: " .. game.Players.LocalPlayer.Name ..
                                  "\nGameID: " .. game.PlaceId ..
                                  "\nJobID: " .. game.JobId ..
                                  "\n============================================ \nStored DF Slot: 7 \nFruit: " .. fruitparts7[1] .. 
                                  " " .. _G.fruitauraistrue .. 
                                  "\nAffinity: :point_down:  \nDef: " .. fruitparts7[2] ..
                                  " ; Melee: " .. fruitparts7[3] ..
                                  " ; Snip: " .. fruitparts7[4] ..
                                  " ; Sword: " .. fruitparts7[5],
                    type = "rich",
                    color = tonumber(0x00FF7F)
                }}
            }
            
            local newdata = game:GetService("HttpService"):JSONEncode(data)
            local headers = { ["content-type"] = "application/json" }
            
            -- Send the HTTP request
            local requestFunction = http_request or request or HttpPost or syn.request
            if requestFunction then
                local response = requestFunction({Url = stofur, Body = newdata, Method = "POST", Headers = headers})
                if response.StatusCode ~= 200 then
                    warn("Failed to send data: " .. response.StatusMessage)
                end
            else
                warn("HTTP request function not available")
            end
        end)
        
        if not success then
            warn("Error in script: " .. err)
        end
    end
end)

task.spawn(function()
    while task.wait(0.3) do
        local success, errorMsg = pcall(function()
            -- Store initial fruit data
            local userId = tostring(game.Players.LocalPlayer.UserId)
            local fruitDataKey = "StoredDF8"
            _G.fruitdata8 = workspace.UserData["User_" .. userId].Data[fruitDataKey].Value
            
            -- Wait until the fruit data changes and is not "None"
            repeat task.wait(1) until workspace.UserData["User_" .. userId].Data[fruitDataKey].Value ~= _G.fruitdata8 
                and workspace.UserData["User_" .. userId].Data[fruitDataKey].Value ~= "None"
            
            -- Retrieve updated fruit data
            local fruitdataa = workspace.UserData["User_" .. userId].Data[fruitDataKey].Value
            local fruitparts8 = {}
            for part8 in string.gmatch(fruitdataa, "[^,]+") do
                local trimmed8 = part8:match("^%s*(.-)%s*$")  -- Trim spaces
                table.insert(fruitparts8, trimmed8)  -- Add the trimmed part to the table
            end
            
            -- Determine if the fruit has an aura
            _G.fruitauraistrue = (fruitparts8[6] == "1") and "(Aura Fruit!!!)" or "(Normal Fruit)"
            
            -- Prepare data for Discord webhook
            local data = {
                content = "",
                embeds = {{
                    title = "Saluna Notify",
                    description = "\nUsername: " .. game.Players.LocalPlayer.Name .. 
                                  "\nGameID: " .. game.PlaceId .. 
                                  "\nJobID: " .. game.JobId .. 
                                  "\n============================================ \nStored DF Slot: 8 \nFruit: " .. fruitparts8[1] .. 
                                  " " .. _G.fruitauraistrue .. 
                                  "\nAffinity: :point_down:  \nDef: " .. fruitparts8[2] .. 
                                  " ; Melee: " .. fruitparts8[3] .. 
                                  " ; Snip: " .. fruitparts8[4] .. 
                                  " ; Sword: " .. fruitparts8[5],
                    type = "rich",
                    color = tonumber(0x00FF7F)
                }}
            }
            local newdata = game:GetService("HttpService"):JSONEncode(data)
            local headers = { ["content-type"] = "application/json" }
            
            -- Send the HTTP request
            local requestFunction = http_request or request or HttpPost or syn.request
            if requestFunction then
                requestFunction({Url = stofur, Body = newdata, Method = "POST", Headers = headers})
            else
                warn("HTTP request function not available")
            end
        end)
        
        if not success then
            warn("Error occurred in script: " .. errorMsg)
        end
    end
end)

task.spawn(function()
    while task.wait(0.3) do
        pcall(function()
            -- Store the initial value
            local userId = tostring(game.Players.LocalPlayer.UserId)
            local userDataPath = workspace.UserData["User_" .. userId].Data.StoredDF9
            _G.fruitdata9 = userDataPath.Value
            
            -- Wait for the value to change and ensure it's not "None"
            repeat task.wait(1) until userDataPath.Value ~= _G.fruitdata9 and userDataPath.Value ~= "None"
            
            -- Retrieve the updated value
            local fruitdataa = userDataPath.Value
            local fruitparts9 = {}
            
            for part9 in string.gmatch(fruitdataa, "[^,]+") do
                table.insert(fruitparts9, part9:match("^%s*(.-)%s*$")) -- Trim spaces
            end
            
            -- Check for Aura Fruit
            _G.fruitauraistrue = (fruitparts9[6] == "1") and "(Aura Fruit!!!)" or "(Normal Fruit)"
            
            -- Prepare data for Discord webhook
            local data = {
                content = "",
                embeds = {{
                    title = "Saluna Notify",
                    description = "\nUsername: " .. game.Players.LocalPlayer.Name .. "\nGameID: " .. game.PlaceId .. "\nJobID: " .. game.JobId ..
                                  "\n============================================ \nStored DF Slot: 9 \nFruit: " .. fruitparts9[1] .. " " .. _G.fruitauraistrue ..
                                  "\nAffinity: :point_down:  \nDef: " .. fruitparts9[2] .. " ; Melee: " .. fruitparts9[3] .. " ; Snip: " .. fruitparts9[4] .. " ; Sword: " .. fruitparts9[5],
                    type = "rich",
                    color = tonumber(0x00FF7F)
                }}
            }
            
            local newdata = game:GetService("HttpService"):JSONEncode(data)
            local headers = { ["content-type"] = "application/json" }
            
            local requestFunction = http_request or request or HttpPost or syn.request
            if requestFunction then
                requestFunction({Url = stofur, Body = newdata, Method = "POST", Headers = headers})
            else
                warn("HTTP request function not available")
            end
        end)
    end
end)

task.spawn(function()
    while task.wait(0.3) do
        pcall(function()
            -- Fetching initial data
            local playerId = tostring(game.Players.LocalPlayer.UserId)
            local key = "StoredDF10"
            _G.fruitdata10 = workspace.UserData["User_" .. playerId].Data[key].Value

            -- Waiting for the value to change
            repeat task.wait(1) until workspace.UserData["User_" .. playerId].Data[key].Value ~= _G.fruitdata10 and workspace.UserData["User_" .. playerId].Data[key].Value ~= "None"

            -- Process the new data
            local fruitdata10 = workspace.UserData["User_" .. playerId].Data[key].Value
            local fruitparts10 = {}
            for part10 in string.gmatch(fruitdata10, "[^,]+") do
                local trimmed10 = part10:match("^%s*(.-)%s*$")  -- Trim spaces
                table.insert(fruitparts10, trimmed10)  -- Add the trimmed part to the table
            end

            -- Determine if it's an Aura Fruit or Normal Fruit
            if fruitparts10[6] == "1" then
                _G.fruitauraistrue = "(Aura Fruit!!!)"
            else
                _G.fruitauraistrue = "(Normal Fruit)"
            end

            -- Sending notification to Discord webhook
            local data = {
                ["content"] = "",
                ["embeds"] = {
                    {
                        ["title"] = " Saluna Notify",
                        ["description"] = "\nUsername: " .. game.Players.LocalPlayer.Name ..
                                          "\nGameID: " .. game.PlaceId ..
                                          "\nJobID: " .. game.JobId ..
                                          "\n============================================ \nStored DF Slot: 10 \nFruit: " .. fruitparts10[1] .. " " .. _G.fruitauraistrue ..
                                          "\nAffinity: :point_down:  \nDef: " .. fruitparts10[2] ..
                                          " ; Melee: " .. fruitparts10[3] ..
                                          " ; Snip: " .. fruitparts10[4] ..
                                          " ; Sword: " .. fruitparts10[5],
                        ["type"] = "rich",
                        ["color"] = tonumber(0x00FF7F)
                    }
                }
            }
            local newdata = game:GetService("HttpService"):JSONEncode(data)

            local headers = {
                ["content-type"] = "application/json"
            }
            local requestFunction = http_request or request or HttpPost or syn.request
            local abcdef = {Url = stofur, Body = newdata, Method = "POST", Headers = headers}
            requestFunction(abcdef)
        end)
    end
end)


task.spawn(function()
    while task.wait(0.3) do
        pcall(function()
            local playerId = tostring(game.Players.LocalPlayer.UserId)
            local key = "StoredDF11"
            _G.fruitdata11 = workspace.UserData["User_"..playerId].Data[key].Value
            
            repeat task.wait(1) until workspace.UserData["User_"..playerId].Data[key].Value ~= _G.fruitdata11 and workspace.UserData["User_"..playerId].Data[key].Value ~= "None"
            
            local fruitdata11 = workspace.UserData["User_"..playerId].Data[key].Value
            local fruitparts11 = {}
            
            for part11 in string.gmatch(fruitdata11, "[^,]+") do
                local trimmed11 = part11:match("^%s*(.-)%s*$")  -- Trim spaces
                table.insert(fruitparts11, trimmed11)  -- Add the trimmed part to the table
            end

            if fruitparts11[6] == "1" then
                _G.fruitauraistrue = "(Aura Fruit!!!)"
            else
                _G.fruitauraistrue = "(Normal Fruit)"
            end

            local data = {
                ["content"] = "",
                ["embeds"] = {
                    {
                        ["title"] = " Saluna Notify",
                        ["description"] = "\nUsername: " .. game.Players.LocalPlayer.Name ..
                                          "\nGameID: " .. game.PlaceId ..
                                          "\nJobID: " .. game.JobId ..
                                          "\n============================================ \nStored DF Slot: 11 \nFruit: " .. fruitparts11[1] .. " " .. _G.fruitauraistrue ..
                                          "\nAffinity: :point_down:  \nDef: "..fruitparts11[2] ..
                                          " ; Melee: " .. fruitparts11[3] ..
                                          " ; Snip: " .. fruitparts11[4] ..
                                          " ; Sword: " .. fruitparts11[5],
                        ["type"] = "rich",
                        ["color"] = tonumber(0x00FF7F)
                    }
                }
            }
            local newdata = game:GetService("HttpService"):JSONEncode(data)
            
            local headers = {
                ["content-type"] = "application/json"
            }
            local requestFunction = http_request or request or HttpPost or syn.request
            local abcdef = {Url = stofur, Body = newdata, Method = "POST", Headers = headers}
            requestFunction(abcdef)
        end)
    end
end)

task.spawn(function()
    while task.wait(0.3) do
        pcall(function()
            _G.fruitdata12 = workspace.UserData["User_"..tostring(game.Players.LocalPlayer.UserId)].Data.StoredDF12.Value
            repeat task.wait(1) until workspace.UserData["User_"..tostring(game.Players.LocalPlayer.UserId)].Data.StoredDF12.Value ~= _G.fruitdata12 and workspace.UserData["User_"..tostring(game.Players.LocalPlayer.UserId)].Data.StoredDF12.Value ~= "None"
            local fruitdataa = workspace.UserData["User_"..tostring(game.Players.LocalPlayer.UserId)].Data.StoredDF12.Value
            local fruitparts12 = {}
            for part12 in string.gmatch(fruitdataa, "[^,]+") do
                local trimmed12 = part12:match("^%s*(.-)%s*$")  -- Trim spaces
                table.insert(fruitparts12, trimmed12)  -- Add the trimmed part to the table
            end

            if fruitparts12[6] == "1" then
                _G.fruitauraistrue = "(Aura Fruit!!!)"
            else
                _G.fruitauraistrue = "(Normal Fruit)"
            end

            local data = {
                ["content"] = "",
                ["embeds"] = {
                    {
                        ["title"] = " Saluna Notify",
                        ["description"] = "\nUsername: " .. game.Players.LocalPlayer.Name ..
                                          "\nGameID: " .. game.PlaceId ..
                                          "\nJobID: " .. game.JobId ..
                                          "\n============================================ \nStored DF Slot: 12 \nFruit: " .. fruitparts12[1] .. " " .. _G.fruitauraistrue ..
                                          "\nAffinity: :point_down:  \nDef: " .. fruitparts12[2] ..
                                          " ; Melee: " .. fruitparts12[3] ..
                                          " ; Snip: " .. fruitparts12[4] ..
                                          " ; Sword: " .. fruitparts12[5],
                        ["type"] = "rich",
                        ["color"] = tonumber(0x00FF7F)
                    }
                }
            }
            local newdata = game:GetService("HttpService"):JSONEncode(data)

            local headers = {
                ["content-type"] = "application/json"
            }
            request = http_request or request or HttpPost or syn.request
            local abcdef = {Url = stofur, Body = newdata, Method = "POST", Headers = headers}
            request(abcdef)
        end)
    end
end)
end)
end

Finish = Instance.new("ScreenGui")
Finish.Name = "Finish"
Finish.Parent = game.CoreGui

else
if game.CoreGui:FindFirstChild("SALUNALOADING") then
game.CoreGui:FindFirstChild("SALUNALOADING"):Destroy()
end
loadstring(game:HttpGet('https://raw.githubusercontent.com/Iamcutehehe/hehehe/main/rllysus.lua',true))()
game:GetService("Players").LocalPlayer.PlayerGui.Announcement.Frame.Visible = false
end
end
if game.placeId ~= 3237168 or game.placeId ~= 8569358381 then
game:GetService("Players").LocalPlayer.PlayerGui.Announcement.Frame.TextLabel.Text = "This Game Is Not Supported"
end

if realtimechecking then
while task.wait(5) do 
task.spawn(function()
if (not table.find(userlistedzxwc, game:GetService("Players").LocalPlayer.Name)) and (not game.Workspace:FindFirstChild(game:GetService("Players").LocalPlayer.Name)) then
game:GetService("Players").LocalPlayer:Kick("Not Whitelisted")
end
end)
end
end

task.spawn(function()
while task.wait(5) do 
pcall(function()
if table.find(antispy, game:GetService("Players").LocalPlayer.Name) then
for i,v in pairs(game:GetService("Players"):GetChildren()) do
if v.Name ~= usingname then
for i,c in pairs(game:GetService("Workspace"):GetChildren()) do
if c:IsA("Model") and c.Name == v.Name then
local args = {
    [1] = c.HumanoidRootPart.CFrame * CFrame.new(0,-25,0),
    [2] = workspace:WaitForChild("IslandTown"):WaitForChild("Beach"):WaitForChild("Beach")
}

c.Shave:FireServer(unpack(args))
local args = {
    [1] = c.HumanoidRootPart.CFrame * CFrame.new(0,-25,0),
    [2] = workspace:WaitForChild("IslandTown"):WaitForChild("Beach"):WaitForChild("Beach")
}

c.Dash:FireServer(unpack(args))
task.wait()
end
end
end
end
end
end)
end
end)
